
Running puzzle...
[100%] Built target UnitProject
visiting inst:   %1 = load i64, ptr @next, align 8
NONONONO NONOMONO return bottom
visiting inst:   %2 = mul i64 %1, 1103515245
NONONONO NONOMONO return bottom
visiting inst:   %3 = add i64 %2, 12345
NONONONO NONOMONO return bottom
visiting inst:   store i64 %3, ptr @next, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i64 %3, ptr @next, align 8
ffffffflowwl succ pushed:   %4 = load i64, ptr @next, align 8
visiting inst:   %4 = load i64, ptr @next, align 8
NONONONO NONOMONO return bottom
visiting inst:   %5 = udiv i64 %4, 65536
NONONONO NONOMONO return bottom
visiting inst:   %6 = trunc i64 %5 to i32
NONONONO NONOMONO return bottom
visiting inst:   %7 = urem i32 %6, 32767
NONONONO NONOMONO return bottom
visiting inst:   %8 = add i32 %7, 1
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %8
ffffffflowwl succ pushed: null!
visiting inst:   ret i32 %8
NONONONO NONOMONO return bottom
visiting inst:   %8 = add i32 %7, 1
NONONONO NONOMONO return bottom
visiting inst:   %7 = urem i32 %6, 32767
NONONONO NONOMONO return bottom
visiting inst:   %6 = trunc i64 %5 to i32
NONONONO NONOMONO return bottom
visiting inst:   %5 = udiv i64 %4, 65536
NONONONO NONOMONO return bottom
visiting inst:   store i64 %3, ptr @next, align 8
NONONONO NONOMONO return bottom
visiting inst:   %3 = add i64 %2, 12345
NONONONO NONOMONO return bottom
visiting inst:   %2 = mul i64 %1, 1103515245
NONONONO NONOMONO return bottom
visiting inst:   %2 = zext i32 %0 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i64 %2, ptr @next, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i64 %2, ptr @next, align 8
ffffffflowwl succ pushed:   ret void
visiting inst:   ret void
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret void
ffffffflowwl succ pushed: null!
visiting inst:   store i64 %2, ptr @next, align 8
NONONONO NONOMONO return bottom
visiting inst:   %3 = sub nsw i32 %1, %0
NONONONO NONOMONO return bottom
visiting inst:   %4 = add nsw i32 %3, 1
NONONONO NONOMONO return bottom
visiting inst:   %5 = sitofp i32 %4 to double
NONONONO NONOMONO return bottom
visiting inst:   %6 = call i32 @rand() #4
NONONONO NONOMONO return bottom
visiting inst:   %7 = sitofp i32 %6 to double
NONONONO NONOMONO return bottom
visiting inst:   %8 = fdiv double %7, 3.276800e+04
NONONONO NONOMONO return bottom
visiting inst:   %9 = fmul double %5, %8
NONONONO NONOMONO return bottom
visiting inst:   %10 = fptosi double %9 to i32
NONONONO NONOMONO return bottom
visiting inst:   %11 = icmp eq i32 %10, %4
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %10, %0
NONONONO NONOMONO return bottom
visiting inst:   %13 = sub nsw i32 %12, 1
NONONONO NONOMONO return bottom
visiting inst:   %14 = add nsw i32 %10, %0
NONONONO NONOMONO return bottom
visiting inst:   %15 = select i1 %11, i32 %13, i32 %14
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %15
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %15
ffffffflowwl succ pushed: null!
visiting inst:   ret i32 %15
NONONONO NONOMONO return bottom
visiting inst:   %15 = select i1 %11, i32 %13, i32 %14
NONONONO NONOMONO return bottom
visiting inst:   %15 = select i1 %11, i32 %13, i32 %14
NONONONO NONOMONO return bottom
visiting inst:   %13 = sub nsw i32 %12, 1
NONONONO NONOMONO return bottom
visiting inst:   %15 = select i1 %11, i32 %13, i32 %14
NONONONO NONOMONO return bottom
visiting inst:   %11 = icmp eq i32 %10, %4
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %10, %0
NONONONO NONOMONO return bottom
visiting inst:   %14 = add nsw i32 %10, %0
NONONONO NONOMONO return bottom
visiting inst:   %10 = fptosi double %9 to i32
NONONONO NONOMONO return bottom
visiting inst:   %9 = fmul double %5, %8
NONONONO NONOMONO return bottom
visiting inst:   %8 = fdiv double %7, 3.276800e+04
NONONONO NONOMONO return bottom
visiting inst:   %7 = sitofp i32 %6 to double
NONONONO NONOMONO return bottom
visiting inst:   %9 = fmul double %5, %8
NONONONO NONOMONO return bottom
visiting inst:   %5 = sitofp i32 %4 to double
NONONONO NONOMONO return bottom
visiting inst:   %11 = icmp eq i32 %10, %4
NONONONO NONOMONO return bottom
visiting inst:   %4 = add nsw i32 %3, 1
NONONONO NONOMONO return bottom
visiting inst:   %3 = sub nsw i32 %1, 1
NONONONO NONOMONO return bottom
visiting inst:   %4 = sext i32 %3 to i64
NONONONO NONOMONO return bottom
visiting inst:   br label %5
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %5
ffffffflowwl succ pushed:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
visit phi inst:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
0,incoming:   %4 = sext i32 %3 to i64
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming:   %26 = add i64 %.0, -1
edge not in execflag!!
visiting inst:   %6 = icmp ugt i64 %.0, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %6, label %7, label %27
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %6, label %7, label %27
ffffffflowwl succ pushed:   %8 = add i64 %.0, 1
ffffffflowwl inst pushed:   br i1 %6, label %7, label %27
ffffffflowwl succ pushed:   ret void
visiting inst:   ret void
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret void
ffffffflowwl succ pushed: null!
visiting inst:   %8 = add i64 %.0, 1
opInstr1:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %9 = uitofp i64 %8 to double
NONONONO NONOMONO return bottom
visiting inst:   %10 = call i32 @rand() #4
NONONONO NONOMONO return bottom
visiting inst:   %11 = sitofp i32 %10 to double
NONONONO NONOMONO return bottom
visiting inst:   %12 = fdiv double %11, 3.276800e+04
NONONONO NONOMONO return bottom
visiting inst:   %13 = fmul double %9, %12
NONONONO NONOMONO return bottom
visiting inst:   %14 = fptosi double %13 to i32
NONONONO NONOMONO return bottom
visiting inst:   %15 = sext i32 %14 to i64
NONONONO NONOMONO return bottom
visiting inst:   %16 = add i64 %.0, 1
opInstr1:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %17 = icmp eq i64 %15, %16
NONONONO NONOMONO return bottom
visiting inst:   %18 = sub i64 %15, 1
NONONONO NONOMONO return bottom
visiting inst:   %19 = select i1 %17, i64 %18, i64 %15
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds i32, ptr %0, i64 %.0
NONONONO NONOMONO return bottom
visiting inst:   %21 = load i32, ptr %20, align 4
NONONONO NONOMONO return bottom
visiting inst:   %22 = getelementptr inbounds i32, ptr %0, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   %23 = load i32, ptr %22, align 4
NONONONO NONOMONO return bottom
visiting inst:   %24 = getelementptr inbounds i32, ptr %0, i64 %.0
NONONONO NONOMONO return bottom
visiting inst:   store i32 %23, ptr %24, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %23, ptr %24, align 4
ffffffflowwl succ pushed:   %25 = getelementptr inbounds i32, ptr %0, i64 %19
visiting inst:   %25 = getelementptr inbounds i32, ptr %0, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   store i32 %21, ptr %25, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %21, ptr %25, align 4
ffffffflowwl succ pushed:   %26 = add i64 %.0, -1
visiting inst:   %26 = add i64 %.0, -1
opInstr1:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %5, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %5, !llvm.loop !6
ffffffflowwl succ pushed:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
visit phi inst:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
0,incoming:   %4 = sext i32 %3 to i64
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %26 = add i64 %.0, -1
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
0,incoming:   %4 = sext i32 %3 to i64
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %26 = add i64 %.0, -1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   store i32 %21, ptr %25, align 4
NONONONO NONOMONO return bottom
visiting inst:   store i32 %23, ptr %24, align 4
NONONONO NONOMONO return bottom
visiting inst:   store i32 %23, ptr %24, align 4
NONONONO NONOMONO return bottom
visiting inst:   %23 = load i32, ptr %22, align 4
NONONONO NONOMONO return bottom
visiting inst:   store i32 %21, ptr %25, align 4
NONONONO NONOMONO return bottom
visiting inst:   %21 = load i32, ptr %20, align 4
NONONONO NONOMONO return bottom
visiting inst:   %25 = getelementptr inbounds i32, ptr %0, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   %22 = getelementptr inbounds i32, ptr %0, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   %19 = select i1 %17, i64 %18, i64 %15
NONONONO NONOMONO return bottom
visiting inst:   %19 = select i1 %17, i64 %18, i64 %15
NONONONO NONOMONO return bottom
visiting inst:   %17 = icmp eq i64 %15, %16
NONONONO NONOMONO return bottom
visiting inst:   %17 = icmp eq i64 %15, %16
NONONONO NONOMONO return bottom
visiting inst:   %18 = sub i64 %15, 1
NONONONO NONOMONO return bottom
visiting inst:   %19 = select i1 %17, i64 %18, i64 %15
NONONONO NONOMONO return bottom
visiting inst:   %15 = sext i32 %14 to i64
NONONONO NONOMONO return bottom
visiting inst:   %14 = fptosi double %13 to i32
NONONONO NONOMONO return bottom
visiting inst:   %13 = fmul double %9, %12
NONONONO NONOMONO return bottom
visiting inst:   %12 = fdiv double %11, 3.276800e+04
NONONONO NONOMONO return bottom
visiting inst:   %11 = sitofp i32 %10 to double
NONONONO NONOMONO return bottom
visiting inst:   %13 = fmul double %9, %12
NONONONO NONOMONO return bottom
visiting inst:   %9 = uitofp i64 %8 to double
NONONONO NONOMONO return bottom
visiting inst:   br i1 %6, label %7, label %27
NONONONO NONOMONO return bottom
visiting inst:   %6 = icmp ugt i64 %.0, 0
NONONONO NONOMONO return bottom
visiting inst:   %8 = add i64 %.0, 1
opInstr1:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %16 = add i64 %.0, 1
opInstr1:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds i32, ptr %0, i64 %.0
NONONONO NONOMONO return bottom
visiting inst:   %24 = getelementptr inbounds i32, ptr %0, i64 %.0
NONONONO NONOMONO return bottom
visiting inst:   %26 = add i64 %.0, -1
opInstr1:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i64 [ %4, %2 ], [ %26, %7 ]
0,incoming:   %4 = sext i32 %3 to i64
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %26 = add i64 %.0, -1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %4 = sext i32 %3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %2 = add nsw i32 %0, 1
NONONONO NONOMONO return bottom
visiting inst:   %3 = sext i32 %2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %4 = mul i64 %3, 4
NONONONO NONOMONO return bottom
visiting inst:   %5 = call noalias ptr @malloc(i64 noundef %4) #4
NONONONO NONOMONO return bottom
visiting inst:   br label %6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %6
ffffffflowwl succ pushed:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
visit phi inst:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %11 = add nsw i32 %.0, 1
edge not in execflag!!
visiting inst:   %7 = icmp slt i32 %.0, %2
NONONONO NONOMONO return bottom
visiting inst:   br i1 %7, label %8, label %12
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %7, label %8, label %12
ffffffflowwl succ pushed:   %9 = sext i32 %.0 to i64
ffffffflowwl inst pushed:   br i1 %7, label %8, label %12
ffffffflowwl succ pushed:   %13 = call i32 @randInt(i32 noundef 1, i32 noundef %0)
visiting inst:   %13 = call i32 @randInt(i32 noundef 1, i32 noundef %0)
NONONONO NONOMONO return bottom
visiting inst:   %14 = getelementptr inbounds i32, ptr %5, i64 0
NONONONO NONOMONO return bottom
visiting inst:   store i32 %13, ptr %14, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %13, ptr %14, align 4
ffffffflowwl succ pushed:   call void @shuffle(ptr noundef %5, i32 noundef %2)
visiting inst:   call void @shuffle(ptr noundef %5, i32 noundef %2)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @shuffle(ptr noundef %5, i32 noundef %2)
ffffffflowwl succ pushed:   ret ptr %5
visiting inst:   ret ptr %5
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret ptr %5
ffffffflowwl succ pushed: null!
visiting inst:   %9 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %10 = getelementptr inbounds i32, ptr %5, i64 %9
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.0, ptr %10, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %.0, ptr %10, align 4
ffffffflowwl succ pushed:   %11 = add nsw i32 %.0, 1
visiting inst:   %11 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %6, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %6, !llvm.loop !6
ffffffflowwl succ pushed:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
visit phi inst:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %11 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %7 = icmp slt i32 %.0, %2
NONONONO NONOMONO return bottom
visiting inst:   %9 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.0, ptr %10, align 4
NONONONO NONOMONO return bottom
visiting inst:   %11 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %11 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %7 = icmp slt i32 %.0, %2
NONONONO NONOMONO return bottom
visiting inst:   %9 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.0, ptr %10, align 4
NONONONO NONOMONO return bottom
visiting inst:   %11 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %11 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %7 = icmp slt i32 %.0, %2
NONONONO NONOMONO return bottom
visiting inst:   %9 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.0, ptr %10, align 4
NONONONO NONOMONO return bottom
visiting inst:   %11 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %7 = icmp slt i32 %.0, %2
NONONONO NONOMONO return bottom
visiting inst:   %9 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.0, ptr %10, align 4
NONONONO NONOMONO return bottom
visiting inst:   %11 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.0, ptr %10, align 4
NONONONO NONOMONO return bottom
visiting inst:   %10 = getelementptr inbounds i32, ptr %5, i64 %9
NONONONO NONOMONO return bottom
visiting inst:   store i32 %13, ptr %14, align 4
NONONONO NONOMONO return bottom
visiting inst:   store i32 %13, ptr %14, align 4
NONONONO NONOMONO return bottom
visiting inst:   br i1 %7, label %8, label %12
NONONONO NONOMONO return bottom
visiting inst:   %7 = icmp slt i32 %.0, %2
NONONONO NONOMONO return bottom
visiting inst:   %9 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.0, ptr %10, align 4
NONONONO NONOMONO return bottom
visiting inst:   %11 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %1 ], [ %11, %8 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = getelementptr inbounds i32, ptr %5, i64 %9
NONONONO NONOMONO return bottom
visiting inst:   %14 = getelementptr inbounds i32, ptr %5, i64 0
NONONONO NONOMONO return bottom
visiting inst:   call void @shuffle(ptr noundef %5, i32 noundef %2)
NONONONO NONOMONO return bottom
visiting inst:   ret ptr %5
NONONONO NONOMONO return bottom
visiting inst:   %5 = call noalias ptr @malloc(i64 noundef %4) #4
NONONONO NONOMONO return bottom
visiting inst:   %4 = mul i64 %3, 4
NONONONO NONOMONO return bottom
visiting inst:   %3 = sext i32 %2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %7 = icmp slt i32 %.0, %2
NONONONO NONOMONO return bottom
visiting inst:   call void @shuffle(ptr noundef %5, i32 noundef %2)
NONONONO NONOMONO return bottom
visiting inst:   br label %3
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %3
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
visit phi inst:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %12 = add nsw i32 %.01, 1
edge not in execflag!!
visit phi inst:   %.0 = phi i32 [ 0, %2 ], [ %11, %5 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming:   %11 = xor i32 %7, %10
edge not in execflag!!
visiting inst:   %4 = icmp slt i32 %.01, %1
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %4, label %5, label %13
ffffffflowwl succ pushed:   %6 = add nsw i32 %.01, 1
ffffffflowwl inst pushed:   br i1 %4, label %5, label %13
ffffffflowwl succ pushed:   %14 = xor i32 %.0, %1
visiting inst:   %14 = xor i32 %.0, %1
opInstr1:   %.0 = phi i32 [ 0, %2 ], [ %11, %5 ]
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %14
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %14
ffffffflowwl succ pushed: null!
visiting inst:   %6 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   %7 = xor i32 %.0, %6
opInstr1:   %.0 = phi i32 [ 0, %2 ], [ %11, %5 ]
not in latcell, latcell:
7
  br label %3, type: 1, name = , v =   br label %3
  %.01 = phi i32 [ 0, %2 ], [ %12, %5 ], type: 2, name = .01, v = i32 0
  %4 = icmp slt i32 %.01, %1, type: 1, name = , v =   %4 = icmp slt i32 %.01, %1
  br i1 %4, label %5, label %13, type: 1, name = , v =   br i1 %4, label %5, label %13
  %6 = add nsw i32 %.01, 1, type: 2, name = , v = i32 1
  %14 = xor i32 %.0, %1, type: 1, name = , v =   %14 = xor i32 %.0, %1
  ret i32 %14, type: 1, name = , v =   ret i32 %14
NONONONO NONOMONO return bottom
visiting inst:   %8 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %9 = getelementptr inbounds i32, ptr %0, i64 %8
NONONONO NONOMONO return bottom
visiting inst:   %10 = load i32, ptr %9, align 4
NONONONO NONOMONO return bottom
visiting inst:   %11 = xor i32 %7, %10
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %3, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %3, !llvm.loop !6
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
visit phi inst:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %12 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %4 = icmp slt i32 %.01, %1
NONONONO NONOMONO return bottom
visiting inst:   %6 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %7 = xor i32 %.0, %6
opInstr1:   %.0 = phi i32 [ 0, %2 ], [ %11, %5 ]
not in latcell, latcell:
14
  br label %3, type: 1, name = , v =   br label %3
  %.01 = phi i32 [ 0, %2 ], [ %12, %5 ], type: 1, name = .01, v = i32 0
  %4 = icmp slt i32 %.01, %1, type: 1, name = , v =   %4 = icmp slt i32 %.01, %1
  br i1 %4, label %5, label %13, type: 1, name = , v =   br i1 %4, label %5, label %13
  %6 = add nsw i32 %.01, 1, type: 1, name = , v =   %6 = add nsw i32 %.01, 1
  %7 = xor i32 %.0, %6, type: 1, name = , v =   %7 = xor i32 %.0, %6
  %8 = sext i32 %.01 to i64, type: 1, name = , v =   %8 = sext i32 %.01 to i64
  %9 = getelementptr inbounds i32, ptr %0, i64 %8, type: 1, name = , v =   %9 = getelementptr inbounds i32, ptr %0, i64 %8
  %10 = load i32, ptr %9, align 4, type: 1, name = , v =   %10 = load i32, ptr %9, align 4
  %11 = xor i32 %7, %10, type: 1, name = , v =   %11 = xor i32 %7, %10
  %12 = add nsw i32 %.01, 1, type: 2, name = , v = i32 1
  br label %3, !llvm.loop !6, type: 1, name = , v =   br label %3, !llvm.loop !6
  %14 = xor i32 %.0, %1, type: 1, name = , v =   %14 = xor i32 %.0, %1
  ret i32 %14, type: 1, name = , v =   ret i32 %14
NONONONO NONOMONO return bottom
visiting inst:   %8 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %12 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %4 = icmp slt i32 %.01, %1
NONONONO NONOMONO return bottom
visiting inst:   %6 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %8 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %12 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %4 = icmp slt i32 %.01, %1
NONONONO NONOMONO return bottom
visiting inst:   %6 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %8 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %4 = icmp slt i32 %.01, %1
NONONONO NONOMONO return bottom
visiting inst:   %6 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %8 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 0, %2 ], [ %11, %5 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming:   %11 = xor i32 %7, %10
edge not in execflag!!
visiting inst:   %11 = xor i32 %7, %10
NONONONO NONOMONO return bottom
visiting inst:   %10 = load i32, ptr %9, align 4
NONONONO NONOMONO return bottom
visiting inst:   %9 = getelementptr inbounds i32, ptr %0, i64 %8
NONONONO NONOMONO return bottom
visiting inst:   %11 = xor i32 %7, %10
NONONONO NONOMONO return bottom
visiting inst:   %7 = xor i32 %.0, %6
opInstr1:   %.0 = phi i32 [ 0, %2 ], [ %11, %5 ]
not in latcell, latcell:
14
  br label %3, type: 1, name = , v =   br label %3
  %.01 = phi i32 [ 0, %2 ], [ %12, %5 ], type: 1, name = .01, v =   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
  %4 = icmp slt i32 %.01, %1, type: 1, name = , v =   %4 = icmp slt i32 %.01, %1
  br i1 %4, label %5, label %13, type: 1, name = , v =   br i1 %4, label %5, label %13
  %6 = add nsw i32 %.01, 1, type: 1, name = , v =   %6 = add nsw i32 %.01, 1
  %7 = xor i32 %.0, %6, type: 1, name = , v =   %7 = xor i32 %.0, %6
  %8 = sext i32 %.01 to i64, type: 1, name = , v =   %8 = sext i32 %.01 to i64
  %9 = getelementptr inbounds i32, ptr %0, i64 %8, type: 1, name = , v =   %9 = getelementptr inbounds i32, ptr %0, i64 %8
  %10 = load i32, ptr %9, align 4, type: 1, name = , v =   %10 = load i32, ptr %9, align 4
  %11 = xor i32 %7, %10, type: 1, name = , v =   %11 = xor i32 %7, %10
  %12 = add nsw i32 %.01, 1, type: 1, name = , v =   %12 = add nsw i32 %.01, 1
  br label %3, !llvm.loop !6, type: 1, name = , v =   br label %3, !llvm.loop !6
  %14 = xor i32 %.0, %1, type: 1, name = , v =   %14 = xor i32 %.0, %1
  ret i32 %14, type: 1, name = , v =   ret i32 %14
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %14
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %13
NONONONO NONOMONO return bottom
visiting inst:   %4 = icmp slt i32 %.01, %1
NONONONO NONOMONO return bottom
visiting inst:   %6 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %8 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %12, %5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   call void @srand(i32 noundef 1) #4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @srand(i32 noundef 1) #4
ffffffflowwl succ pushed:   br label %1
visiting inst:   br label %1
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %1
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
visit phi inst:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %12 = add nsw i32 %.01, 1
edge not in execflag!!
visit phi inst:   %.0 = phi i32 [ undef, %0 ], [ %.1, %10 ]
0,incoming: i32 undef
edge not in execflag!!
1,incoming:   %.1 = phi i32 [ %.0, %3 ], [ %8, %7 ]
edge not in execflag!!
visiting inst:   %2 = icmp slt i32 %.01, 5
NONONONO NONOMONO return bottom
visiting inst:   br i1 %2, label %3, label %13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %2, label %3, label %13
ffffffflowwl succ pushed:   %4 = call ptr @createRandomArray(i32 noundef 500000)
ffffffflowwl inst pushed:   br i1 %2, label %3, label %13
ffffffflowwl succ pushed:   ret i32 0
visiting inst:   ret i32 0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 0
ffffffflowwl succ pushed: null!
visiting inst:   %4 = call ptr @createRandomArray(i32 noundef 500000)
NONONONO NONOMONO return bottom
visiting inst:   br label %5
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %5
ffffffflowwl succ pushed:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
visit phi inst:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %9 = add nsw i32 %.02, 1
edge not in execflag!!
visit phi inst:   %.1 = phi i32 [ %.0, %3 ], [ %8, %7 ]
0,incoming:   %.0 = phi i32 [ undef, %0 ], [ %.1, %10 ]
edge not in execflag!!
1,incoming:   %8 = call i32 @findDuplicate(ptr noundef %4, i32 noundef 500001)
edge not in execflag!!
visiting inst:   %6 = icmp slt i32 %.02, 200
NONONONO NONOMONO return bottom
visiting inst:   br i1 %6, label %7, label %10
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %6, label %7, label %10
ffffffflowwl succ pushed:   %8 = call i32 @findDuplicate(ptr noundef %4, i32 noundef 500001)
ffffffflowwl inst pushed:   br i1 %6, label %7, label %10
ffffffflowwl succ pushed:   call void @free(ptr noundef %4) #4
visiting inst:   call void @free(ptr noundef %4) #4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @free(ptr noundef %4) #4
ffffffflowwl succ pushed:   %11 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %.1)
visiting inst:   %11 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %.1)
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %1, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %1, !llvm.loop !8
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
visit phi inst:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %12 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %8 = call i32 @findDuplicate(ptr noundef %4, i32 noundef 500001)
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %5, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %5, !llvm.loop !6
ffffffflowwl succ pushed:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
visit phi inst:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %9 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %6 = icmp slt i32 %.02, 200
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %9 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %6 = icmp slt i32 %.02, 200
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %9 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %6 = icmp slt i32 %.02, 200
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %6 = icmp slt i32 %.02, 200
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.1 = phi i32 [ %.0, %3 ], [ %8, %7 ]
0,incoming:   %.0 = phi i32 [ undef, %0 ], [ %.1, %10 ]
edge not in execflag!!
1,incoming:   %8 = call i32 @findDuplicate(ptr noundef %4, i32 noundef 500001)
edge not in execflag!!
visiting inst:   %2 = icmp slt i32 %.01, 5
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %12 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %2 = icmp slt i32 %.01, 5
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %12 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %2 = icmp slt i32 %.01, 5
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %2 = icmp slt i32 %.01, 5
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %6, label %7, label %10
NONONONO NONOMONO return bottom
visiting inst:   %6 = icmp slt i32 %.02, 200
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %3 ], [ %9, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %8 = call i32 @findDuplicate(ptr noundef %4, i32 noundef 500001)
NONONONO NONOMONO return bottom
visiting inst:   call void @free(ptr noundef %4) #4
NONONONO NONOMONO return bottom
visiting inst:   br i1 %2, label %3, label %13
NONONONO NONOMONO return bottom
visiting inst:   %2 = icmp slt i32 %.01, 5
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %0 ], [ %12, %10 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom

Running almabench...
[100%] Built target UnitProject
visiting inst:   %2 = call double @fmod(double noundef %0, double noundef 0x401921FB54442D18) #5
NONONONO NONOMONO return bottom
visiting inst:   %3 = call double @llvm.fabs.f64(double %2)
NONONONO NONOMONO return bottom
visiting inst:   %4 = fcmp oge double %3, 0x400921FB54442D18
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %10
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %4, label %5, label %10
ffffffflowwl succ pushed:   %6 = fcmp olt double %0, 0.000000e+00
ffffffflowwl inst pushed:   br i1 %4, label %5, label %10
ffffffflowwl succ pushed:   %.0 = phi double [ %9, %5 ], [ %2, %1 ]
visit phi inst:   %.0 = phi double [ %9, %5 ], [ %2, %1 ]
0,incoming:   %9 = fsub double %2, %8
edge not in execflag!!
1,incoming:   %2 = call double @fmod(double noundef %0, double noundef 0x401921FB54442D18) #5
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   ret double %.0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret double %.0
ffffffflowwl succ pushed: null!
visiting inst:   %6 = fcmp olt double %0, 0.000000e+00
NONONONO NONOMONO return bottom
visiting inst:   %7 = zext i1 %6 to i64
NONONONO NONOMONO return bottom
visiting inst:   %8 = select i1 %6, double 0xC01921FB54442D18, double 0x401921FB54442D18
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   %9 = fsub double %2, %8
NONONONO NONOMONO return bottom
visiting inst:   br label %10
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %10
ffffffflowwl succ pushed:   %.0 = phi double [ %9, %5 ], [ %2, %1 ]
visit phi inst:   %.0 = phi double [ %9, %5 ], [ %2, %1 ]
0,incoming:   %9 = fsub double %2, %8
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %2 = call double @fmod(double noundef %0, double noundef 0x401921FB54442D18) #5
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.0 = phi double [ %9, %5 ], [ %2, %1 ]
0,incoming:   %9 = fsub double %2, %8
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %2 = call double @fmod(double noundef %0, double noundef 0x401921FB54442D18) #5
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %9 = fsub double %2, %8
NONONONO NONOMONO return bottom
visiting inst:   %7 = zext i1 %6 to i64
NONONONO NONOMONO return bottom
visiting inst:   %8 = select i1 %6, double 0xC01921FB54442D18, double 0x401921FB54442D18
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   ret double %.0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %10
NONONONO NONOMONO return bottom
visiting inst:   %4 = fcmp oge double %3, 0x400921FB54442D18
NONONONO NONOMONO return bottom
visiting inst:   %3 = call double @llvm.fabs.f64(double %2)
NONONONO NONOMONO return bottom
visiting inst:   %9 = fsub double %2, %8
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi double [ %9, %5 ], [ %2, %1 ]
0,incoming:   %9 = fsub double %2, %8
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %2 = call double @fmod(double noundef %0, double noundef 0x401921FB54442D18) #5
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %4 = getelementptr inbounds double, ptr %0, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %5 = load double, ptr %4, align 8
NONONONO NONOMONO return bottom
visiting inst:   %6 = fsub double %5, 0x4142B42C80000000
NONONONO NONOMONO return bottom
visiting inst:   %7 = getelementptr inbounds double, ptr %0, i64 1
NONONONO NONOMONO return bottom
visiting inst:   %8 = load double, ptr %7, align 8
NONONONO NONOMONO return bottom
visiting inst:   %9 = fadd double %6, %8
NONONONO NONOMONO return bottom
visiting inst:   %10 = fdiv double %9, 3.652500e+05
NONONONO NONOMONO return bottom
visiting inst:   %11 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = getelementptr inbounds [8 x [3 x double]], ptr @a, i64 0, i64 %11
NONONONO NONOMONO return bottom
visiting inst:   %13 = getelementptr inbounds [3 x double], ptr %12, i64 0, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %14 = load double, ptr %13, align 8
NONONONO NONOMONO return bottom
visiting inst:   %15 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %16 = getelementptr inbounds [8 x [3 x double]], ptr @a, i64 0, i64 %15
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds [3 x double], ptr %16, i64 0, i64 1
NONONONO NONOMONO return bottom
visiting inst:   %18 = load double, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds [8 x [3 x double]], ptr @a, i64 0, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   %21 = getelementptr inbounds [3 x double], ptr %20, i64 0, i64 2
NONONONO NONOMONO return bottom
visiting inst:   %22 = load double, ptr %21, align 8
NONONONO NONOMONO return bottom
visiting inst:   %23 = call double @llvm.fmuladd.f64(double %22, double %10, double %18)
NONONONO NONOMONO return bottom
visiting inst:   %24 = call double @llvm.fmuladd.f64(double %23, double %10, double %14)
NONONONO NONOMONO return bottom
visiting inst:   %25 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %26 = getelementptr inbounds [8 x [3 x double]], ptr @dlm, i64 0, i64 %25
NONONONO NONOMONO return bottom
visiting inst:   %27 = getelementptr inbounds [3 x double], ptr %26, i64 0, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %28 = load double, ptr %27, align 8
NONONONO NONOMONO return bottom
visiting inst:   %29 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %30 = getelementptr inbounds [8 x [3 x double]], ptr @dlm, i64 0, i64 %29
NONONONO NONOMONO return bottom
visiting inst:   %31 = getelementptr inbounds [3 x double], ptr %30, i64 0, i64 1
NONONONO NONOMONO return bottom
visiting inst:   %32 = load double, ptr %31, align 8
NONONONO NONOMONO return bottom
visiting inst:   %33 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %34 = getelementptr inbounds [8 x [3 x double]], ptr @dlm, i64 0, i64 %33
NONONONO NONOMONO return bottom
visiting inst:   %35 = getelementptr inbounds [3 x double], ptr %34, i64 0, i64 2
NONONONO NONOMONO return bottom
visiting inst:   %36 = load double, ptr %35, align 8
NONONONO NONOMONO return bottom
visiting inst:   %37 = call double @llvm.fmuladd.f64(double %36, double %10, double %32)
NONONONO NONOMONO return bottom
visiting inst:   %38 = fmul double %37, %10
NONONONO NONOMONO return bottom
visiting inst:   %39 = call double @llvm.fmuladd.f64(double 3.600000e+03, double %28, double %38)
NONONONO NONOMONO return bottom
visiting inst:   %40 = fmul double %39, 0x3ED455A5B2FF8F9D
NONONONO NONOMONO return bottom
visiting inst:   %41 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = getelementptr inbounds [8 x [3 x double]], ptr @e, i64 0, i64 %41
NONONONO NONOMONO return bottom
visiting inst:   %43 = getelementptr inbounds [3 x double], ptr %42, i64 0, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %44 = load double, ptr %43, align 8
NONONONO NONOMONO return bottom
visiting inst:   %45 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %46 = getelementptr inbounds [8 x [3 x double]], ptr @e, i64 0, i64 %45
NONONONO NONOMONO return bottom
visiting inst:   %47 = getelementptr inbounds [3 x double], ptr %46, i64 0, i64 1
NONONONO NONOMONO return bottom
visiting inst:   %48 = load double, ptr %47, align 8
NONONONO NONOMONO return bottom
visiting inst:   %49 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %50 = getelementptr inbounds [8 x [3 x double]], ptr @e, i64 0, i64 %49
NONONONO NONOMONO return bottom
visiting inst:   %51 = getelementptr inbounds [3 x double], ptr %50, i64 0, i64 2
NONONONO NONOMONO return bottom
visiting inst:   %52 = load double, ptr %51, align 8
NONONONO NONOMONO return bottom
visiting inst:   %53 = call double @llvm.fmuladd.f64(double %52, double %10, double %48)
NONONONO NONOMONO return bottom
visiting inst:   %54 = call double @llvm.fmuladd.f64(double %53, double %10, double %44)
NONONONO NONOMONO return bottom
visiting inst:   %55 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %56 = getelementptr inbounds [8 x [3 x double]], ptr @pi, i64 0, i64 %55
NONONONO NONOMONO return bottom
visiting inst:   %57 = getelementptr inbounds [3 x double], ptr %56, i64 0, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %58 = load double, ptr %57, align 8
NONONONO NONOMONO return bottom
visiting inst:   %59 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %60 = getelementptr inbounds [8 x [3 x double]], ptr @pi, i64 0, i64 %59
NONONONO NONOMONO return bottom
visiting inst:   %61 = getelementptr inbounds [3 x double], ptr %60, i64 0, i64 1
NONONONO NONOMONO return bottom
visiting inst:   %62 = load double, ptr %61, align 8
NONONONO NONOMONO return bottom
visiting inst:   %63 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %64 = getelementptr inbounds [8 x [3 x double]], ptr @pi, i64 0, i64 %63
NONONONO NONOMONO return bottom
visiting inst:   %65 = getelementptr inbounds [3 x double], ptr %64, i64 0, i64 2
NONONONO NONOMONO return bottom
visiting inst:   %66 = load double, ptr %65, align 8
NONONONO NONOMONO return bottom
visiting inst:   %67 = call double @llvm.fmuladd.f64(double %66, double %10, double %62)
NONONONO NONOMONO return bottom
visiting inst:   %68 = fmul double %67, %10
NONONONO NONOMONO return bottom
visiting inst:   %69 = call double @llvm.fmuladd.f64(double 3.600000e+03, double %58, double %68)
NONONONO NONOMONO return bottom
visiting inst:   %70 = fmul double %69, 0x3ED455A5B2FF8F9D
NONONONO NONOMONO return bottom
visiting inst:   %71 = call double @anpm(double noundef %70)
NONONONO NONOMONO return bottom
visiting inst:   %72 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %73 = getelementptr inbounds [8 x [3 x double]], ptr @dinc, i64 0, i64 %72
NONONONO NONOMONO return bottom
visiting inst:   %74 = getelementptr inbounds [3 x double], ptr %73, i64 0, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %75 = load double, ptr %74, align 8
NONONONO NONOMONO return bottom
visiting inst:   %76 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %77 = getelementptr inbounds [8 x [3 x double]], ptr @dinc, i64 0, i64 %76
NONONONO NONOMONO return bottom
visiting inst:   %78 = getelementptr inbounds [3 x double], ptr %77, i64 0, i64 1
NONONONO NONOMONO return bottom
visiting inst:   %79 = load double, ptr %78, align 8
NONONONO NONOMONO return bottom
visiting inst:   %80 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %81 = getelementptr inbounds [8 x [3 x double]], ptr @dinc, i64 0, i64 %80
NONONONO NONOMONO return bottom
visiting inst:   %82 = getelementptr inbounds [3 x double], ptr %81, i64 0, i64 2
NONONONO NONOMONO return bottom
visiting inst:   %83 = load double, ptr %82, align 8
NONONONO NONOMONO return bottom
visiting inst:   %84 = call double @llvm.fmuladd.f64(double %83, double %10, double %79)
NONONONO NONOMONO return bottom
visiting inst:   %85 = fmul double %84, %10
NONONONO NONOMONO return bottom
visiting inst:   %86 = call double @llvm.fmuladd.f64(double 3.600000e+03, double %75, double %85)
NONONONO NONOMONO return bottom
visiting inst:   %87 = fmul double %86, 0x3ED455A5B2FF8F9D
NONONONO NONOMONO return bottom
visiting inst:   %88 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %89 = getelementptr inbounds [8 x [3 x double]], ptr @omega, i64 0, i64 %88
NONONONO NONOMONO return bottom
visiting inst:   %90 = getelementptr inbounds [3 x double], ptr %89, i64 0, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %91 = load double, ptr %90, align 8
NONONONO NONOMONO return bottom
visiting inst:   %92 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %93 = getelementptr inbounds [8 x [3 x double]], ptr @omega, i64 0, i64 %92
NONONONO NONOMONO return bottom
visiting inst:   %94 = getelementptr inbounds [3 x double], ptr %93, i64 0, i64 1
NONONONO NONOMONO return bottom
visiting inst:   %95 = load double, ptr %94, align 8
NONONONO NONOMONO return bottom
visiting inst:   %96 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %97 = getelementptr inbounds [8 x [3 x double]], ptr @omega, i64 0, i64 %96
NONONONO NONOMONO return bottom
visiting inst:   %98 = getelementptr inbounds [3 x double], ptr %97, i64 0, i64 2
NONONONO NONOMONO return bottom
visiting inst:   %99 = load double, ptr %98, align 8
NONONONO NONOMONO return bottom
visiting inst:   %100 = call double @llvm.fmuladd.f64(double %99, double %10, double %95)
NONONONO NONOMONO return bottom
visiting inst:   %101 = fmul double %100, %10
NONONONO NONOMONO return bottom
visiting inst:   %102 = call double @llvm.fmuladd.f64(double 3.600000e+03, double %91, double %101)
NONONONO NONOMONO return bottom
visiting inst:   %103 = fmul double %102, 0x3ED455A5B2FF8F9D
NONONONO NONOMONO return bottom
visiting inst:   %104 = call double @anpm(double noundef %103)
NONONONO NONOMONO return bottom
visiting inst:   %105 = fmul double 0x3FD702A41F2E9970, %10
NONONONO NONOMONO return bottom
visiting inst:   br label %106
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %106
ffffffflowwl succ pushed:   %.03 = phi i32 [ 0, %3 ], [ %151, %108 ]
visit phi inst:   %.03 = phi i32 [ 0, %3 ], [ %151, %108 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %151 = add nsw i32 %.03, 1
edge not in execflag!!
visit phi inst:   %.02 = phi double [ %24, %3 ], [ %135, %108 ]
0,incoming:   %24 = call double @llvm.fmuladd.f64(double %23, double %10, double %14)
edge not in execflag!!
1,incoming:   %135 = call double @llvm.fmuladd.f64(double %134, double 0x3E7AD7F29ABCAF48, double %.02)
edge not in execflag!!
visit phi inst:   %.01 = phi double [ %40, %3 ], [ %150, %108 ]
0,incoming:   %40 = fmul double %39, 0x3ED455A5B2FF8F9D
edge not in execflag!!
1,incoming:   %150 = call double @llvm.fmuladd.f64(double %149, double 0x3E7AD7F29ABCAF48, double %.01)
edge not in execflag!!
visiting inst:   %107 = icmp slt i32 %.03, 8
NONONONO NONOMONO return bottom
visiting inst:   br i1 %107, label %108, label %152
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %107, label %108, label %152
ffffffflowwl succ pushed:   %109 = sext i32 %1 to i64
ffffffflowwl inst pushed:   br i1 %107, label %108, label %152
ffffffflowwl succ pushed:   %153 = sext i32 %1 to i64
visiting inst:   %153 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %154 = getelementptr inbounds [8 x [9 x double]], ptr @kp, i64 0, i64 %153
NONONONO NONOMONO return bottom
visiting inst:   %155 = getelementptr inbounds [9 x double], ptr %154, i64 0, i64 8
NONONONO NONOMONO return bottom
visiting inst:   %156 = load double, ptr %155, align 8
NONONONO NONOMONO return bottom
visiting inst:   %157 = fmul double %156, %105
NONONONO NONOMONO return bottom
visiting inst:   %158 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %159 = getelementptr inbounds [8 x [9 x double]], ptr @ca, i64 0, i64 %158
NONONONO NONOMONO return bottom
visiting inst:   %160 = getelementptr inbounds [9 x double], ptr %159, i64 0, i64 8
NONONONO NONOMONO return bottom
visiting inst:   %161 = load double, ptr %160, align 8
NONONONO NONOMONO return bottom
visiting inst:   %162 = call double @cos(double noundef %157) #5
NONONONO NONOMONO return bottom
visiting inst:   %163 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %164 = getelementptr inbounds [8 x [9 x double]], ptr @sa, i64 0, i64 %163
NONONONO NONOMONO return bottom
visiting inst:   %165 = getelementptr inbounds [9 x double], ptr %164, i64 0, i64 8
NONONONO NONOMONO return bottom
visiting inst:   %166 = load double, ptr %165, align 8
NONONONO NONOMONO return bottom
visiting inst:   %167 = call double @sin(double noundef %157) #5
NONONONO NONOMONO return bottom
visiting inst:   %168 = fmul double %166, %167
NONONONO NONOMONO return bottom
visiting inst:   %169 = call double @llvm.fmuladd.f64(double %161, double %162, double %168)
NONONONO NONOMONO return bottom
visiting inst:   %170 = fmul double %10, %169
NONONONO NONOMONO return bottom
visiting inst:   %171 = call double @llvm.fmuladd.f64(double %170, double 0x3E7AD7F29ABCAF48, double %.02)
NONONONO NONOMONO return bottom
visiting inst:   br label %172
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %172
ffffffflowwl succ pushed:   %.14 = phi i32 [ 8, %152 ], [ %197, %174 ]
visit phi inst:   %.14 = phi i32 [ 8, %152 ], [ %197, %174 ]
0,incoming: i32 8
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %197 = add nsw i32 %.14, 1
edge not in execflag!!
visit phi inst:   %.1 = phi double [ %.01, %152 ], [ %196, %174 ]
0,incoming:   %.01 = phi double [ %40, %3 ], [ %150, %108 ]
edge not in execflag!!
1,incoming:   %196 = call double @llvm.fmuladd.f64(double %195, double 0x3E7AD7F29ABCAF48, double %.1)
edge not in execflag!!
visiting inst:   %173 = icmp sle i32 %.14, 9
NONONONO NONOMONO return bottom
visiting inst:   br i1 %173, label %174, label %198
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %173, label %174, label %198
ffffffflowwl succ pushed:   %175 = sext i32 %1 to i64
ffffffflowwl inst pushed:   br i1 %173, label %174, label %198
ffffffflowwl succ pushed:   %199 = call double @fmod(double noundef %.1, double noundef 0x401921FB54442D18) #5
visiting inst:   %199 = call double @fmod(double noundef %.1, double noundef 0x401921FB54442D18) #5
NONONONO NONOMONO return bottom
visiting inst:   %200 = fsub double %199, %71
NONONONO NONOMONO return bottom
visiting inst:   %201 = call double @sin(double noundef %200) #5
NONONONO NONOMONO return bottom
visiting inst:   %202 = call double @llvm.fmuladd.f64(double %54, double %201, double %200)
NONONONO NONOMONO return bottom
visiting inst:   br label %203
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %203
ffffffflowwl succ pushed:   %.2 = phi i32 [ 0, %198 ], [ %212, %203 ]
visit phi inst:   %.2 = phi i32 [ 0, %198 ], [ %212, %203 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %212 = add nsw i32 %.2, 1
edge not in execflag!!
visit phi inst:   %.0 = phi double [ %202, %198 ], [ %211, %203 ]
0,incoming:   %202 = call double @llvm.fmuladd.f64(double %54, double %201, double %200)
edge not in execflag!!
1,incoming:   %211 = fadd double %.0, %210
edge not in execflag!!
visiting inst:   %204 = fsub double %200, %.0
opInstr2:   %.0 = phi double [ %202, %198 ], [ %211, %203 ]
NONONONO NONOMONO return bottom
visiting inst:   %205 = call double @sin(double noundef %.0) #5
NONONONO NONOMONO return bottom
visiting inst:   %206 = call double @llvm.fmuladd.f64(double %54, double %205, double %204)
NONONONO NONOMONO return bottom
visiting inst:   %207 = call double @cos(double noundef %.0) #5
NONONONO NONOMONO return bottom
visiting inst:   %208 = fneg double %54
NONONONO NONOMONO return bottom
visiting inst:   %209 = call double @llvm.fmuladd.f64(double %208, double %207, double 1.000000e+00)
NONONONO NONOMONO return bottom
visiting inst:   %210 = fdiv double %206, %209
NONONONO NONOMONO return bottom
visiting inst:   %211 = fadd double %.0, %210
opInstr1:   %.0 = phi double [ %202, %198 ], [ %211, %203 ]
NONONONO NONOMONO return bottom
visiting inst:   %212 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ 0, %198 ], [ %212, %203 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   %213 = icmp sge i32 %212, 10
icmp const!!
visiting inst:   %214 = call double @llvm.fabs.f64(double %210)
NONONONO NONOMONO return bottom
visiting inst:   %215 = fcmp olt double %214, 0x3D719799812DEA11
NONONONO NONOMONO return bottom
visiting inst:   %or.cond = select i1 %213, i1 true, i1 %215
really const1 yes????
visiting inst:   br i1 %or.cond, label %216, label %203
Running fannkuch...
[100%] Built target UnitProject
visiting inst:   %3 = call i64 @fannkuch(i32 noundef 11)
NONONONO NONOMONO return bottom
visiting inst:   %4 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef 11, i64 noundef %3)
NONONONO NONOMONO return bottom
visiting inst:   ret i32 0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 0
ffffffflowwl succ pushed: null!
visiting inst:   %4 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef 11, i64 noundef %3)
NONONONO NONOMONO return bottom
visiting inst:   %2 = sub nsw i32 %0, 1
NONONONO NONOMONO return bottom
visiting inst:   %3 = icmp slt i32 %0, 1
NONONONO NONOMONO return bottom
visiting inst:   br i1 %3, label %112, label %4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %3, label %112, label %4
ffffffflowwl succ pushed:   %5 = sext i32 %0 to i64
ffffffflowwl inst pushed:   br i1 %3, label %112, label %4
ffffffflowwl succ pushed:   %.0 = phi i64 [ 0, %1 ], [ %.29, %.loopexit ]
visit phi inst:   %.0 = phi i64 [ 0, %1 ], [ %.29, %.loopexit ]
0,incoming: i64 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
edge not in execflag!!
visiting inst:   ret i64 %.0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i64 %.0
ffffffflowwl succ pushed: null!
visiting inst:   %5 = sext i32 %0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %6 = call noalias ptr @calloc(i64 noundef %5, i64 noundef 4) #3
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %8 = call noalias ptr @calloc(i64 noundef %7, i64 noundef 4) #3
NONONONO NONOMONO return bottom
visiting inst:   %9 = sext i32 %0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %10 = call noalias ptr @calloc(i64 noundef %9, i64 noundef 4) #3
NONONONO NONOMONO return bottom
visiting inst:   br label %11
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %11
ffffffflowwl succ pushed:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
visit phi inst:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %16 = add nsw i32 %.04, 1
edge not in execflag!!
visiting inst:   %12 = icmp slt i32 %.04, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %12, label %13, label %.preheader3
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %12, label %13, label %.preheader3
ffffffflowwl succ pushed:   %14 = sext i32 %.04 to i64
ffffffflowwl inst pushed:   br i1 %12, label %13, label %.preheader3
ffffffflowwl succ pushed:   br label %17
visiting inst:   br label %17
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %17
ffffffflowwl succ pushed:   %.010 = phi i32 [ %.212, %.loopexit1 ], [ %0, %.preheader3 ]
visit phi inst:   %.010 = phi i32 [ %.212, %.loopexit1 ], [ %0, %.preheader3 ]
0,incoming:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
edge not in execflag!!
1,incoming: i32 %0
MMMMMMMMMMnewtype = 0
no constant
!!!!! changed, added here
visit phi inst:   %.07 = phi i64 [ %.29, %.loopexit1 ], [ 0, %.preheader3 ]
0,incoming:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
edge not in execflag!!
1,incoming: i64 0
edge not in execflag!!
visit phi inst:   %.02 = phi i32 [ %.1, %.loopexit1 ], [ 0, %.preheader3 ]
0,incoming:   %.1 = phi i32 [ %30, %28 ], [ %.02, %17 ]
edge not in execflag!!
1,incoming: i32 0
edge not in execflag!!
visiting inst:   %18 = icmp slt i32 %.02, 30
NONONONO NONOMONO return bottom
visiting inst:   br i1 %18, label %.preheader2, label %31
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %18, label %.preheader2, label %31
ffffffflowwl succ pushed:   br label %19
ffffffflowwl inst pushed:   br i1 %18, label %.preheader2, label %31
ffffffflowwl succ pushed:   %.1 = phi i32 [ %30, %28 ], [ %.02, %17 ]
visit phi inst:   %.1 = phi i32 [ %30, %28 ], [ %.02, %17 ]
0,incoming:   %30 = add nsw i32 %.02, 1
edge not in execflag!!
1,incoming:   %.02 = phi i32 [ %.1, %.loopexit1 ], [ 0, %.preheader3 ]
MMMMMMMMMMnewtype = 0
no constant
!!!!! changed, added here
visiting inst:   br label %32
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %32
ffffffflowwl succ pushed:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
visit phi inst:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
0,incoming:   %.010 = phi i32 [ %.212, %.loopexit1 ], [ %0, %.preheader3 ]
MMMMMMMMMMnewtype = 0
no constant
!!!!! changed, added here
1,incoming:   %38 = add nsw i32 %.111, -1
edge not in execflag!!
visiting inst:   %33 = icmp ne i32 %.111, 1
NONONONO NONOMONO return bottom
visiting inst:   br i1 %33, label %34, label %39
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %33, label %34, label %39
ffffffflowwl succ pushed:   %35 = sub nsw i32 %.111, 1
ffffffflowwl inst pushed:   br i1 %33, label %34, label %39
ffffffflowwl succ pushed:   %40 = getelementptr inbounds i32, ptr %8, i64 0
visiting inst:   %40 = getelementptr inbounds i32, ptr %8, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %41 = load i32, ptr %40, align 4
NONONONO NONOMONO return bottom
visiting inst:   %42 = icmp eq i32 %41, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %42, label %87, label %43
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %42, label %87, label %43
ffffffflowwl succ pushed:   %44 = sext i32 %2 to i64
ffffffflowwl inst pushed:   br i1 %42, label %87, label %43
ffffffflowwl succ pushed:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
visit phi inst:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
0,incoming:   %.07 = phi i64 [ %.29, %.loopexit1 ], [ 0, %.preheader3 ]
MMMMMMMMMMnewtype = 0
no constant
!!!!! changed, added here
1,incoming:   %.07 = phi i64 [ %.29, %.loopexit1 ], [ 0, %.preheader3 ]
edge not in execflag!!
2,incoming:   %spec.select = select i1 %86, i64 %78, i64 %.07
edge not in execflag!!
visiting inst:   br label %88
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %88
ffffffflowwl succ pushed:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
visit phi inst:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
0,incoming:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
MMMMMMMMMMnewtype = 0
no constant
!!!!! changed, added here
1,incoming:   %111 = add nsw i32 %.212, 1
edge not in execflag!!
visiting inst:   %89 = icmp eq i32 %.212, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %89, label %.loopexit, label %90
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %89, label %.loopexit, label %90
ffffffflowwl succ pushed:   br label %112
ffffffflowwl inst pushed:   br i1 %89, label %.loopexit, label %90
ffffffflowwl succ pushed:   %91 = getelementptr inbounds i32, ptr %8, i64 0
visiting inst:   %91 = getelementptr inbounds i32, ptr %8, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %92 = load i32, ptr %91, align 4
NONONONO NONOMONO return bottom
visiting inst:   br label %93
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %93
ffffffflowwl succ pushed:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
visit phi inst:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %96 = add nsw i32 %.4, 1
edge not in execflag!!
visiting inst:   %94 = icmp slt i32 %.4, %.212
NONONONO NONOMONO return bottom
visiting inst:   br i1 %94, label %95, label %102
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %94, label %95, label %102
ffffffflowwl succ pushed:   %96 = add nsw i32 %.4, 1
ffffffflowwl inst pushed:   br i1 %94, label %95, label %102
ffffffflowwl succ pushed:   %103 = sext i32 %.212 to i64
visiting inst:   %103 = sext i32 %.212 to i64
NONONONO NONOMONO return bottom
visiting inst:   %104 = getelementptr inbounds i32, ptr %8, i64 %103
NONONONO NONOMONO return bottom
visiting inst:   store i32 %92, ptr %104, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %92, ptr %104, align 4
ffffffflowwl succ pushed:   %105 = sext i32 %.212 to i64
visiting inst:   %105 = sext i32 %.212 to i64
NONONONO NONOMONO return bottom
visiting inst:   %106 = getelementptr inbounds i32, ptr %10, i64 %105
NONONONO NONOMONO return bottom
visiting inst:   %107 = load i32, ptr %106, align 4
NONONONO NONOMONO return bottom
visiting inst:   %108 = sub nsw i32 %107, 1
NONONONO NONOMONO return bottom
visiting inst:   store i32 %108, ptr %106, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %108, ptr %106, align 4
ffffffflowwl succ pushed:   %109 = icmp sgt i32 %108, 0
visiting inst:   %109 = icmp sgt i32 %108, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %109, label %.loopexit1, label %110
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %109, label %.loopexit1, label %110
ffffffflowwl succ pushed:   br label %17
ffffffflowwl inst pushed:   br i1 %109, label %.loopexit1, label %110
ffffffflowwl succ pushed:   %111 = add nsw i32 %.212, 1
visiting inst:   %111 = add nsw i32 %.212, 1
opInstr1:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %88
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %88
ffffffflowwl succ pushed:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
visit phi inst:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
0,incoming:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
MMMMMMMMMMnewtype = 0
no constant
1,incoming:   %111 = add nsw i32 %.212, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   br label %17
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %17
ffffffflowwl succ pushed:   %.010 = phi i32 [ %.212, %.loopexit1 ], [ %0, %.preheader3 ]
visit phi inst:   %.010 = phi i32 [ %.212, %.loopexit1 ], [ %0, %.preheader3 ]
0,incoming:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 %0
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %96 = add nsw i32 %.4, 1
opInstr1:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   %97 = sext i32 %96 to i64
NONONONO NONOMONO return bottom
visiting inst:   %98 = getelementptr inbounds i32, ptr %8, i64 %97
NONONONO NONOMONO return bottom
visiting inst:   %99 = load i32, ptr %98, align 4
NONONONO NONOMONO return bottom
visiting inst:   %100 = sext i32 %.4 to i64
NONONONO NONOMONO return bottom
visiting inst:   %101 = getelementptr inbounds i32, ptr %8, i64 %100
NONONONO NONOMONO return bottom
visiting inst:   store i32 %99, ptr %101, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %99, ptr %101, align 4
ffffffflowwl succ pushed:   br label %93, !llvm.loop !13
visiting inst:   br label %93, !llvm.loop !13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %93, !llvm.loop !13
ffffffflowwl succ pushed:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
visit phi inst:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %96 = add nsw i32 %.4, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   br label %112
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %112
ffffffflowwl succ pushed:   %.0 = phi i64 [ 0, %1 ], [ %.29, %.loopexit ]
visit phi inst:   %.0 = phi i64 [ 0, %1 ], [ %.29, %.loopexit ]
0,incoming: i64 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
MMMMMMMMMMnewtype = 2
prev constant
visiting inst:   %44 = sext i32 %2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %45 = getelementptr inbounds i32, ptr %8, i64 %44
NONONONO NONOMONO return bottom
visiting inst:   %46 = load i32, ptr %45, align 4
NONONONO NONOMONO return bottom
visiting inst:   %47 = icmp eq i32 %46, %2
NONONONO NONOMONO return bottom
visiting inst:   br i1 %47, label %87, label %.preheader
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %47, label %87, label %.preheader
ffffffflowwl succ pushed:   br label %48
ffffffflowwl inst pushed:   br i1 %47, label %87, label %.preheader
ffffffflowwl succ pushed:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
visit phi inst:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
0,incoming:   %.07 = phi i64 [ %.29, %.loopexit1 ], [ 0, %.preheader3 ]
MMMMMMMMMMnewtype = 0
no constant
1,incoming:   %.07 = phi i64 [ %.29, %.loopexit1 ], [ 0, %.preheader3 ]
MMMMMMMMMMnewtype = 0
no constant
2,incoming:   %spec.select = select i1 %86, i64 %78, i64 %.07
edge not in execflag!!
visiting inst:   br label %48
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %48
ffffffflowwl succ pushed:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
visit phi inst:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
0,incoming:   %56 = add nsw i32 %.2, 1
edge not in execflag!!
1,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %49 = icmp slt i32 %.2, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %49, label %50, label %57
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %49, label %50, label %57
ffffffflowwl succ pushed:   %51 = sext i32 %.2 to i64
ffffffflowwl inst pushed:   br i1 %49, label %50, label %57
ffffffflowwl succ pushed:   %58 = getelementptr inbounds i32, ptr %8, i64 0
visiting inst:   %58 = getelementptr inbounds i32, ptr %8, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %59 = load i32, ptr %58, align 4
NONONONO NONOMONO return bottom
visiting inst:   br label %60
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %60
ffffffflowwl succ pushed:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
visit phi inst:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
0,incoming: i64 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %78 = add nsw i64 %.06, 1
edge not in execflag!!
visit phi inst:   %.03 = phi i32 [ %59, %57 ], [ %81, %77 ]
0,incoming:   %59 = load i32, ptr %58, align 4
edge not in execflag!!
1,incoming:   %81 = load i32, ptr %80, align 4
edge not in execflag!!
visiting inst:   %61 = sub nsw i32 %.03, 1
opInstr1:   %.03 = phi i32 [ %59, %57 ], [ %81, %77 ]
NONONONO NONOMONO return bottom
visiting inst:   br label %62
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %62
ffffffflowwl succ pushed:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
visit phi inst:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %75 = add nsw i32 %.3, 1
edge not in execflag!!
visit phi inst:   %.01 = phi i32 [ %61, %60 ], [ %76, %64 ]
0,incoming:   %61 = sub nsw i32 %.03, 1
edge not in execflag!!
1,incoming:   %76 = add nsw i32 %.01, -1
edge not in execflag!!
visiting inst:   %63 = icmp slt i32 %.3, %.01
NONONONO NONOMONO return bottom
visiting inst:   br i1 %63, label %64, label %77
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %63, label %64, label %77
ffffffflowwl succ pushed:   %65 = sext i32 %.3 to i64
ffffffflowwl inst pushed:   br i1 %63, label %64, label %77
ffffffflowwl succ pushed:   %78 = add nsw i64 %.06, 1
visiting inst:   %78 = add nsw i64 %.06, 1
opInstr1:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   %79 = sext i32 %.03 to i64
NONONONO NONOMONO return bottom
visiting inst:   %80 = getelementptr inbounds i32, ptr %6, i64 %79
NONONONO NONOMONO return bottom
visiting inst:   %81 = load i32, ptr %80, align 4
NONONONO NONOMONO return bottom
visiting inst:   %82 = sext i32 %.03 to i64
NONONONO NONOMONO return bottom
visiting inst:   %83 = getelementptr inbounds i32, ptr %6, i64 %82
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.03, ptr %83, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %.03, ptr %83, align 4
ffffffflowwl succ pushed:   %84 = icmp ne i32 %81, 0
visiting inst:   %84 = icmp ne i32 %81, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %84, label %60, label %85, !llvm.loop !12
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %84, label %60, label %85, !llvm.loop !12
ffffffflowwl succ pushed:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
ffffffflowwl inst pushed:   br i1 %84, label %60, label %85, !llvm.loop !12
ffffffflowwl succ pushed:   %86 = icmp slt i64 %.07, %78
visiting inst:   %86 = icmp slt i64 %.07, %78
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %86, i64 %78, i64 %.07
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   br label %87
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %87
ffffffflowwl succ pushed:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
visit phi inst:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
0,incoming:   %.07 = phi i64 [ %.29, %.loopexit1 ], [ 0, %.preheader3 ]
MMMMMMMMMMnewtype = 0
no constant
1,incoming:   %.07 = phi i64 [ %.29, %.loopexit1 ], [ 0, %.preheader3 ]
MMMMMMMMMMnewtype = 0
no constant
2,incoming:   %spec.select = select i1 %86, i64 %78, i64 %.07
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visit phi inst:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
0,incoming: i64 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %78 = add nsw i64 %.06, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %65 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %66 = getelementptr inbounds i32, ptr %6, i64 %65
NONONONO NONOMONO return bottom
visiting inst:   %67 = load i32, ptr %66, align 4
NONONONO NONOMONO return bottom
visiting inst:   %68 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %69 = getelementptr inbounds i32, ptr %6, i64 %68
NONONONO NONOMONO return bottom
visiting inst:   %70 = load i32, ptr %69, align 4
NONONONO NONOMONO return bottom
visiting inst:   %71 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %72 = getelementptr inbounds i32, ptr %6, i64 %71
NONONONO NONOMONO return bottom
visiting inst:   store i32 %70, ptr %72, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %70, ptr %72, align 4
ffffffflowwl succ pushed:   %73 = sext i32 %.01 to i64
visiting inst:   %73 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %74 = getelementptr inbounds i32, ptr %6, i64 %73
NONONONO NONOMONO return bottom
visiting inst:   store i32 %67, ptr %74, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %67, ptr %74, align 4
ffffffflowwl succ pushed:   %75 = add nsw i32 %.3, 1
visiting inst:   %75 = add nsw i32 %.3, 1
opInstr1:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   %76 = add nsw i32 %.01, -1
opInstr1:   %.01 = phi i32 [ %61, %60 ], [ %76, %64 ]
NONONONO NONOMONO return bottom
visiting inst:   br label %62, !llvm.loop !11
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %62, !llvm.loop !11
ffffffflowwl succ pushed:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
visit phi inst:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %75 = add nsw i32 %.3, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %51 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %52 = getelementptr inbounds i32, ptr %8, i64 %51
NONONONO NONOMONO return bottom
visiting inst:   %53 = load i32, ptr %52, align 4
NONONONO NONOMONO return bottom
visiting inst:   %54 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %55 = getelementptr inbounds i32, ptr %6, i64 %54
NONONONO NONOMONO return bottom
visiting inst:   store i32 %53, ptr %55, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %53, ptr %55, align 4
ffffffflowwl succ pushed:   %56 = add nsw i32 %.2, 1
visiting inst:   %56 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %48, !llvm.loop !10
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %48, !llvm.loop !10
ffffffflowwl succ pushed:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
visit phi inst:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
0,incoming:   %56 = add nsw i32 %.2, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   %35 = sub nsw i32 %.111, 1
opInstr1:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %36 = sext i32 %35 to i64
NONONONO NONOMONO return bottom
visiting inst:   %37 = getelementptr inbounds i32, ptr %10, i64 %36
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.111, ptr %37, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %.111, ptr %37, align 4
ffffffflowwl succ pushed:   %38 = add nsw i32 %.111, -1
visiting inst:   %38 = add nsw i32 %.111, -1
opInstr1:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %32, !llvm.loop !9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %32, !llvm.loop !9
ffffffflowwl succ pushed:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
visit phi inst:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
0,incoming:   %.010 = phi i32 [ %.212, %.loopexit1 ], [ %0, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming:   %38 = add nsw i32 %.111, -1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br label %19
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %19
ffffffflowwl succ pushed:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
visit phi inst:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
0,incoming:   %27 = add nsw i32 %.15, 1
edge not in execflag!!
1,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %20 = icmp slt i32 %.15, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %20, label %21, label %28
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %20, label %21, label %28
ffffffflowwl succ pushed:   %22 = sext i32 %.15 to i64
ffffffflowwl inst pushed:   br i1 %20, label %21, label %28
ffffffflowwl succ pushed:   %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
visiting inst:   %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
NONONONO NONOMONO return bottom
visiting inst:   %30 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ %.1, %.loopexit1 ], [ 0, %.preheader3 ]
NONONONO NONOMONO return bottom
visiting inst:   br label %31
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %31
ffffffflowwl succ pushed:   %.1 = phi i32 [ %30, %28 ], [ %.02, %17 ]
visit phi inst:   %.1 = phi i32 [ %30, %28 ], [ %.02, %17 ]
0,incoming:   %30 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming:   %.02 = phi i32 [ %.1, %.loopexit1 ], [ 0, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %22 = sext i32 %.15 to i64
NONONONO NONOMONO return bottom
visiting inst:   %23 = getelementptr inbounds i32, ptr %8, i64 %22
NONONONO NONOMONO return bottom
visiting inst:   %24 = load i32, ptr %23, align 4
NONONONO NONOMONO return bottom
visiting inst:   %25 = add nsw i32 1, %24
NONONONO NONOMONO return bottom
visiting inst:   %26 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef %25)
NONONONO NONOMONO return bottom
visiting inst:   %27 = add nsw i32 %.15, 1
opInstr1:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %19, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %19, !llvm.loop !8
ffffffflowwl succ pushed:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
visit phi inst:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
0,incoming:   %27 = add nsw i32 %.15, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   %14 = sext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %15 = getelementptr inbounds i32, ptr %8, i64 %14
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.04, ptr %15, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %.04, ptr %15, align 4
ffffffflowwl succ pushed:   %16 = add nsw i32 %.04, 1
visiting inst:   %16 = add nsw i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %11, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %11, !llvm.loop !6
ffffffflowwl succ pushed:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
visit phi inst:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %16 = add nsw i32 %.04, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %12 = icmp slt i32 %.04, %0
NONONONO NONOMONO return bottom
visiting inst:   %14 = sext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.04, ptr %15, align 4
NONONONO NONOMONO return bottom
visiting inst:   %16 = add nsw i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %16 = add nsw i32 %.04, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %12 = icmp slt i32 %.04, %0
NONONONO NONOMONO return bottom
visiting inst:   %14 = sext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.04, ptr %15, align 4
NONONONO NONOMONO return bottom
visiting inst:   %16 = add nsw i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %16 = add nsw i32 %.04, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %12 = icmp slt i32 %.04, %0
NONONONO NONOMONO return bottom
visiting inst:   %14 = sext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.04, ptr %15, align 4
NONONONO NONOMONO return bottom
visiting inst:   %16 = add nsw i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %12 = icmp slt i32 %.04, %0
NONONONO NONOMONO return bottom
visiting inst:   %14 = sext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.04, ptr %15, align 4
NONONONO NONOMONO return bottom
visiting inst:   %16 = add nsw i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.04, ptr %15, align 4
NONONONO NONOMONO return bottom
visiting inst:   %15 = getelementptr inbounds i32, ptr %8, i64 %14
NONONONO NONOMONO return bottom
visiting inst:   %20 = icmp slt i32 %.15, %0
NONONONO NONOMONO return bottom
visiting inst:   %22 = sext i32 %.15 to i64
NONONONO NONOMONO return bottom
visiting inst:   %27 = add nsw i32 %.15, 1
opInstr1:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
0,incoming:   %27 = add nsw i32 %.15, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %20 = icmp slt i32 %.15, %0
NONONONO NONOMONO return bottom
visiting inst:   %22 = sext i32 %.15 to i64
NONONONO NONOMONO return bottom
visiting inst:   %27 = add nsw i32 %.15, 1
opInstr1:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %20 = icmp slt i32 %.15, %0
NONONONO NONOMONO return bottom
visiting inst:   %22 = sext i32 %.15 to i64
NONONONO NONOMONO return bottom
visiting inst:   %27 = add nsw i32 %.15, 1
opInstr1:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
0,incoming:   %27 = add nsw i32 %.15, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %20 = icmp slt i32 %.15, %0
NONONONO NONOMONO return bottom
visiting inst:   %22 = sext i32 %.15 to i64
NONONONO NONOMONO return bottom
visiting inst:   %27 = add nsw i32 %.15, 1
opInstr1:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %20 = icmp slt i32 %.15, %0
NONONONO NONOMONO return bottom
visiting inst:   %22 = sext i32 %.15 to i64
NONONONO NONOMONO return bottom
visiting inst:   %27 = add nsw i32 %.15, 1
opInstr1:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %26 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef %25)
NONONONO NONOMONO return bottom
visiting inst:   %25 = add nsw i32 1, %24
NONONONO NONOMONO return bottom
visiting inst:   %24 = load i32, ptr %23, align 4
NONONONO NONOMONO return bottom
visiting inst:   %23 = getelementptr inbounds i32, ptr %8, i64 %22
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi i32 [ %.1, %.loopexit1 ], [ 0, %.preheader3 ]
0,incoming:   %.1 = phi i32 [ %30, %28 ], [ %.02, %17 ]
edge not in execflag!!
1,incoming: i32 0
edge not in execflag!!
visit phi inst:   %.1 = phi i32 [ %30, %28 ], [ %.02, %17 ]
0,incoming:   %30 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.02 = phi i32 [ %.1, %.loopexit1 ], [ 0, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br i1 %20, label %21, label %28
NONONONO NONOMONO return bottom
visiting inst:   %20 = icmp slt i32 %.15, %0
NONONONO NONOMONO return bottom
visiting inst:   %22 = sext i32 %.15 to i64
NONONONO NONOMONO return bottom
visiting inst:   %27 = add nsw i32 %.15, 1
opInstr1:   %.15 = phi i32 [ %27, %21 ], [ 0, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %33 = icmp ne i32 %.111, 1
NONONONO NONOMONO return bottom
visiting inst:   %35 = sub nsw i32 %.111, 1
opInstr1:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.111, ptr %37, align 4
NONONONO NONOMONO return bottom
visiting inst:   %38 = add nsw i32 %.111, -1
opInstr1:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
0,incoming:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %111 = add nsw i32 %.212, 1
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
0,incoming:   %.010 = phi i32 [ %.212, %.loopexit1 ], [ %0, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %38 = add nsw i32 %.111, -1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   store i32 %.111, ptr %37, align 4
NONONONO NONOMONO return bottom
visiting inst:   %37 = getelementptr inbounds i32, ptr %10, i64 %36
NONONONO NONOMONO return bottom
visiting inst:   %36 = sext i32 %35 to i64
NONONONO NONOMONO return bottom
visiting inst:   %49 = icmp slt i32 %.2, %0
NONONONO NONOMONO return bottom
visiting inst:   %51 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %54 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %56 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
0,incoming:   %56 = add nsw i32 %.2, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %49 = icmp slt i32 %.2, %0
NONONONO NONOMONO return bottom
visiting inst:   %51 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %54 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %56 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %49 = icmp slt i32 %.2, %0
NONONONO NONOMONO return bottom
visiting inst:   %51 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %54 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %56 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
0,incoming:   %56 = add nsw i32 %.2, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %49 = icmp slt i32 %.2, %0
NONONONO NONOMONO return bottom
visiting inst:   %51 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %54 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %56 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %49 = icmp slt i32 %.2, %0
NONONONO NONOMONO return bottom
visiting inst:   %51 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %54 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %56 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store i32 %53, ptr %55, align 4
NONONONO NONOMONO return bottom
visiting inst:   %55 = getelementptr inbounds i32, ptr %6, i64 %54
NONONONO NONOMONO return bottom
visiting inst:   store i32 %53, ptr %55, align 4
NONONONO NONOMONO return bottom
visiting inst:   %53 = load i32, ptr %52, align 4
NONONONO NONOMONO return bottom
visiting inst:   %52 = getelementptr inbounds i32, ptr %8, i64 %51
NONONONO NONOMONO return bottom
visiting inst:   %63 = icmp slt i32 %.3, %.01
NONONONO NONOMONO return bottom
visiting inst:   %65 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %71 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %75 = add nsw i32 %.3, 1
opInstr1:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %75 = add nsw i32 %.3, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %63 = icmp slt i32 %.3, %.01
NONONONO NONOMONO return bottom
visiting inst:   %65 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %71 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %75 = add nsw i32 %.3, 1
opInstr1:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ %61, %60 ], [ %76, %64 ]
0,incoming:   %61 = sub nsw i32 %.03, 1
edge not in execflag!!
1,incoming:   %76 = add nsw i32 %.01, -1
edge not in execflag!!
visit phi inst:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %75 = add nsw i32 %.3, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %63 = icmp slt i32 %.3, %.01
NONONONO NONOMONO return bottom
visiting inst:   %65 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %71 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %75 = add nsw i32 %.3, 1
opInstr1:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %63 = icmp slt i32 %.3, %.01
NONONONO NONOMONO return bottom
visiting inst:   %65 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %71 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %75 = add nsw i32 %.3, 1
opInstr1:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store i32 %67, ptr %74, align 4
NONONONO NONOMONO return bottom
visiting inst:   %74 = getelementptr inbounds i32, ptr %6, i64 %73
NONONONO NONOMONO return bottom
visiting inst:   store i32 %70, ptr %72, align 4
NONONONO NONOMONO return bottom
visiting inst:   %72 = getelementptr inbounds i32, ptr %6, i64 %71
NONONONO NONOMONO return bottom
visiting inst:   store i32 %70, ptr %72, align 4
NONONONO NONOMONO return bottom
visiting inst:   %70 = load i32, ptr %69, align 4
NONONONO NONOMONO return bottom
visiting inst:   %69 = getelementptr inbounds i32, ptr %6, i64 %68
NONONONO NONOMONO return bottom
visiting inst:   store i32 %67, ptr %74, align 4
NONONONO NONOMONO return bottom
visiting inst:   %67 = load i32, ptr %66, align 4
NONONONO NONOMONO return bottom
visiting inst:   %66 = getelementptr inbounds i32, ptr %6, i64 %65
NONONONO NONOMONO return bottom
visiting inst:   %78 = add nsw i64 %.06, 1
opInstr1:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
0,incoming: i64 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %78 = add nsw i64 %.06, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %78 = add nsw i64 %.06, 1
opInstr1:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %86 = icmp slt i64 %.07, %78
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %86, i64 %78, i64 %.07
really const1 yes????
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i64 [ 0, %1 ], [ %.29, %.loopexit ]
0,incoming: i64 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   ret i64 %.0
NONONONO NONOMONO return bottom
visit phi inst:   %.07 = phi i64 [ %.29, %.loopexit1 ], [ 0, %.preheader3 ]
0,incoming:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
edge not in execflag!!
1,incoming: i64 0
edge not in execflag!!
visit phi inst:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
0,incoming:   %.07 = phi i64 [ %.29, %.loopexit1 ], [ 0, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.07 = phi i64 [ %.29, %.loopexit1 ], [ 0, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
2,incoming:   %spec.select = select i1 %86, i64 %78, i64 %.07
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %spec.select = select i1 %86, i64 %78, i64 %.07
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   br i1 %84, label %60, label %85, !llvm.loop !12
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.03, ptr %83, align 4
NONONONO NONOMONO return bottom
visiting inst:   %83 = getelementptr inbounds i32, ptr %6, i64 %82
NONONONO NONOMONO return bottom
visit phi inst:   %.03 = phi i32 [ %59, %57 ], [ %81, %77 ]
0,incoming:   %59 = load i32, ptr %58, align 4
edge not in execflag!!
1,incoming:   %81 = load i32, ptr %80, align 4
edge not in execflag!!
visiting inst:   %84 = icmp ne i32 %81, 0
NONONONO NONOMONO return bottom
visiting inst:   %81 = load i32, ptr %80, align 4
NONONONO NONOMONO return bottom
visiting inst:   %80 = getelementptr inbounds i32, ptr %6, i64 %79
NONONONO NONOMONO return bottom
visit phi inst:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
0,incoming: i64 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %78 = add nsw i64 %.06, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %78 = add nsw i64 %.06, 1
opInstr1:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %78 = add nsw i64 %.06, 1
opInstr1:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %86 = icmp slt i64 %.07, %78
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %86, i64 %78, i64 %.07
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   br i1 %63, label %64, label %77
NONONONO NONOMONO return bottom
visiting inst:   %63 = icmp slt i32 %.3, %.01
NONONONO NONOMONO return bottom
visiting inst:   %65 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %71 = sext i32 %.3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %75 = add nsw i32 %.3, 1
opInstr1:   %.3 = phi i32 [ 1, %60 ], [ %75, %64 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ %61, %60 ], [ %76, %64 ]
0,incoming:   %61 = sub nsw i32 %.03, 1
edge not in execflag!!
1,incoming:   %76 = add nsw i32 %.01, -1
edge not in execflag!!
visiting inst:   %78 = add nsw i64 %.06, 1
opInstr1:   %.06 = phi i64 [ 0, %57 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.03 = phi i32 [ %59, %57 ], [ %81, %77 ]
0,incoming:   %59 = load i32, ptr %58, align 4
edge not in execflag!!
1,incoming:   %81 = load i32, ptr %80, align 4
edge not in execflag!!
visiting inst:   %59 = load i32, ptr %58, align 4
NONONONO NONOMONO return bottom
visiting inst:   br i1 %49, label %50, label %57
NONONONO NONOMONO return bottom
visiting inst:   %49 = icmp slt i32 %.2, %0
NONONONO NONOMONO return bottom
visiting inst:   %51 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %54 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %56 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %56, %50 ], [ 1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %47, label %87, label %.preheader
NONONONO NONOMONO return bottom
visiting inst:   %47 = icmp eq i32 %46, %2
NONONONO NONOMONO return bottom
visiting inst:   %46 = load i32, ptr %45, align 4
NONONONO NONOMONO return bottom
visiting inst:   %45 = getelementptr inbounds i32, ptr %8, i64 %44
NONONONO NONOMONO return bottom
visiting inst:   %94 = icmp slt i32 %.4, %.212
NONONONO NONOMONO return bottom
visiting inst:   %96 = add nsw i32 %.4, 1
opInstr1:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %96 = add nsw i32 %.4, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %94 = icmp slt i32 %.4, %.212
NONONONO NONOMONO return bottom
visiting inst:   %96 = add nsw i32 %.4, 1
opInstr1:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %100 = sext i32 %.4 to i64
NONONONO NONOMONO return bottom
visiting inst:   %97 = sext i32 %96 to i64
NONONONO NONOMONO return bottom
visiting inst:   %100 = sext i32 %.4 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %99, ptr %101, align 4
NONONONO NONOMONO return bottom
visiting inst:   %101 = getelementptr inbounds i32, ptr %8, i64 %100
NONONONO NONOMONO return bottom
visiting inst:   store i32 %99, ptr %101, align 4
NONONONO NONOMONO return bottom
visiting inst:   %99 = load i32, ptr %98, align 4
NONONONO NONOMONO return bottom
visiting inst:   %98 = getelementptr inbounds i32, ptr %8, i64 %97
NONONONO NONOMONO return bottom
visit phi inst:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %96 = add nsw i32 %.4, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %94 = icmp slt i32 %.4, %.212
NONONONO NONOMONO return bottom
visiting inst:   %96 = add nsw i32 %.4, 1
opInstr1:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %100 = sext i32 %.4 to i64
NONONONO NONOMONO return bottom
visiting inst:   %94 = icmp slt i32 %.4, %.212
NONONONO NONOMONO return bottom
visiting inst:   %96 = add nsw i32 %.4, 1
opInstr1:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %100 = sext i32 %.4 to i64
NONONONO NONOMONO return bottom
visiting inst:   %97 = sext i32 %96 to i64
NONONONO NONOMONO return bottom
visit phi inst:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
0,incoming:   %.010 = phi i32 [ %.212, %.loopexit1 ], [ %0, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %38 = add nsw i32 %.111, -1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %89 = icmp eq i32 %.212, %0
NONONONO NONOMONO return bottom
visiting inst:   %94 = icmp slt i32 %.4, %.212
NONONONO NONOMONO return bottom
visiting inst:   %103 = sext i32 %.212 to i64
NONONONO NONOMONO return bottom
visiting inst:   %105 = sext i32 %.212 to i64
NONONONO NONOMONO return bottom
visiting inst:   %111 = add nsw i32 %.212, 1
opInstr1:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.010 = phi i32 [ %.212, %.loopexit1 ], [ %0, %.preheader3 ]
0,incoming:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming: i32 %0
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
0,incoming:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %111 = add nsw i32 %.212, 1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br i1 %109, label %.loopexit1, label %110
NONONONO NONOMONO return bottom
visiting inst:   store i32 %108, ptr %106, align 4
NONONONO NONOMONO return bottom
visiting inst:   %109 = icmp sgt i32 %108, 0
NONONONO NONOMONO return bottom
visiting inst:   %108 = sub nsw i32 %107, 1
NONONONO NONOMONO return bottom
visiting inst:   %107 = load i32, ptr %106, align 4
NONONONO NONOMONO return bottom
visiting inst:   store i32 %108, ptr %106, align 4
NONONONO NONOMONO return bottom
visiting inst:   %106 = getelementptr inbounds i32, ptr %10, i64 %105
NONONONO NONOMONO return bottom
visiting inst:   store i32 %92, ptr %104, align 4
NONONONO NONOMONO return bottom
visiting inst:   %104 = getelementptr inbounds i32, ptr %8, i64 %103
NONONONO NONOMONO return bottom
visiting inst:   br i1 %94, label %95, label %102
NONONONO NONOMONO return bottom
visiting inst:   %94 = icmp slt i32 %.4, %.212
NONONONO NONOMONO return bottom
visiting inst:   %96 = add nsw i32 %.4, 1
opInstr1:   %.4 = phi i32 [ 0, %90 ], [ %96, %95 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %100 = sext i32 %.4 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %92, ptr %104, align 4
NONONONO NONOMONO return bottom
visiting inst:   %92 = load i32, ptr %91, align 4
NONONONO NONOMONO return bottom
visiting inst:   br i1 %89, label %.loopexit, label %90
NONONONO NONOMONO return bottom
visiting inst:   %89 = icmp eq i32 %.212, %0
NONONONO NONOMONO return bottom
visiting inst:   %94 = icmp slt i32 %.4, %.212
NONONONO NONOMONO return bottom
visiting inst:   %103 = sext i32 %.212 to i64
NONONONO NONOMONO return bottom
visiting inst:   %105 = sext i32 %.212 to i64
NONONONO NONOMONO return bottom
visiting inst:   %111 = add nsw i32 %.212, 1
opInstr1:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.010 = phi i32 [ %.212, %.loopexit1 ], [ %0, %.preheader3 ]
0,incoming:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming: i32 %0
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.0 = phi i64 [ 0, %1 ], [ %.29, %.loopexit ]
0,incoming: i64 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   ret i64 %.0
NONONONO NONOMONO return bottom
visit phi inst:   %.07 = phi i64 [ %.29, %.loopexit1 ], [ 0, %.preheader3 ]
0,incoming:   %.29 = phi i64 [ %.07, %39 ], [ %.07, %43 ], [ %spec.select, %85 ]
edge not in execflag!!
1,incoming: i64 0
edge not in execflag!!
visiting inst:   br i1 %42, label %87, label %43
NONONONO NONOMONO return bottom
visiting inst:   %42 = icmp eq i32 %41, 0
NONONONO NONOMONO return bottom
visiting inst:   %41 = load i32, ptr %40, align 4
NONONONO NONOMONO return bottom
visiting inst:   br i1 %33, label %34, label %39
NONONONO NONOMONO return bottom
visiting inst:   %33 = icmp ne i32 %.111, 1
NONONONO NONOMONO return bottom
visiting inst:   %35 = sub nsw i32 %.111, 1
opInstr1:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.111, ptr %37, align 4
NONONONO NONOMONO return bottom
visiting inst:   %38 = add nsw i32 %.111, -1
opInstr1:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.212 = phi i32 [ %.111, %87 ], [ %111, %110 ]
0,incoming:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %111 = add nsw i32 %.212, 1
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.02 = phi i32 [ %.1, %.loopexit1 ], [ 0, %.preheader3 ]
0,incoming:   %.1 = phi i32 [ %30, %28 ], [ %.02, %17 ]
edge not in execflag!!
1,incoming: i32 0
edge not in execflag!!
visiting inst:   br i1 %18, label %.preheader2, label %31
NONONONO NONOMONO return bottom
visit phi inst:   %.111 = phi i32 [ %.010, %31 ], [ %38, %34 ]
0,incoming:   %.010 = phi i32 [ %.212, %.loopexit1 ], [ %0, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %38 = add nsw i32 %.111, -1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br i1 %12, label %13, label %.preheader3
NONONONO NONOMONO return bottom
visiting inst:   %12 = icmp slt i32 %.04, %0
NONONONO NONOMONO return bottom
visiting inst:   %14 = sext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   store i32 %.04, ptr %15, align 4
NONONONO NONOMONO return bottom
visiting inst:   %16 = add nsw i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 0, %4 ], [ %16, %13 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %37 = getelementptr inbounds i32, ptr %10, i64 %36
NONONONO NONOMONO return bottom
visiting inst:   %106 = getelementptr inbounds i32, ptr %10, i64 %105
NONONONO NONOMONO return bottom
visiting inst:   %10 = call noalias ptr @calloc(i64 noundef %9, i64 noundef 4) #3
NONONONO NONOMONO return bottom
visiting inst:   %15 = getelementptr inbounds i32, ptr %8, i64 %14
NONONONO NONOMONO return bottom
visiting inst:   %23 = getelementptr inbounds i32, ptr %8, i64 %22
NONONONO NONOMONO return bottom
visiting inst:   %40 = getelementptr inbounds i32, ptr %8, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %45 = getelementptr inbounds i32, ptr %8, i64 %44
NONONONO NONOMONO return bottom
visiting inst:   %52 = getelementptr inbounds i32, ptr %8, i64 %51
NONONONO NONOMONO return bottom
visiting inst:   %58 = getelementptr inbounds i32, ptr %8, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %91 = getelementptr inbounds i32, ptr %8, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %98 = getelementptr inbounds i32, ptr %8, i64 %97
NONONONO NONOMONO return bottom
visiting inst:   %101 = getelementptr inbounds i32, ptr %8, i64 %100
NONONONO NONOMONO return bottom
visiting inst:   %104 = getelementptr inbounds i32, ptr %8, i64 %103
NONONONO NONOMONO return bottom
visiting inst:   %8 = call noalias ptr @calloc(i64 noundef %7, i64 noundef 4) #3
NONONONO NONOMONO return bottom
visiting inst:   %55 = getelementptr inbounds i32, ptr %6, i64 %54
NONONONO NONOMONO return bottom
visiting inst:   %66 = getelementptr inbounds i32, ptr %6, i64 %65
NONONONO NONOMONO return bottom
visiting inst:   %69 = getelementptr inbounds i32, ptr %6, i64 %68
NONONONO NONOMONO return bottom
visiting inst:   %72 = getelementptr inbounds i32, ptr %6, i64 %71
NONONONO NONOMONO return bottom
visiting inst:   %74 = getelementptr inbounds i32, ptr %6, i64 %73
NONONONO NONOMONO return bottom
visiting inst:   %80 = getelementptr inbounds i32, ptr %6, i64 %79
NONONONO NONOMONO return bottom
visiting inst:   %83 = getelementptr inbounds i32, ptr %6, i64 %82
NONONONO NONOMONO return bottom
visiting inst:   %6 = call noalias ptr @calloc(i64 noundef %5, i64 noundef 4) #3
NONONONO NONOMONO return bottom
visiting inst:   ret i64 %.0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %3, label %112, label %4
NONONONO NONOMONO return bottom
visiting inst:   %44 = sext i32 %2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %47 = icmp eq i32 %46, %2
NONONONO NONOMONO return bottom

Running doloop...
[100%] Built target UnitProject
visiting inst:   br label %4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %4
ffffffflowwl succ pushed:   %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ]
visit phi inst:   %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %spec.select = select i1 %12, i32 %.01, i32 %10
edge not in execflag!!
visit phi inst:   %.0 = phi i32 [ %0, %3 ], [ %11, %7 ]
0,incoming: i32 %0
edge not in execflag!!
1,incoming:   %11 = add nsw i32 %.0, %10
edge not in execflag!!
visiting inst:   %5 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %5, label %6, label %7
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %5, label %6, label %7
ffffffflowwl succ pushed:   store i32 %0, ptr %1, align 4
ffffffflowwl inst pushed:   br i1 %5, label %6, label %7
ffffffflowwl succ pushed:   %8 = sdiv i32 %0, -3
visiting inst:   %8 = sdiv i32 %0, -3
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 1, %.01
opInstr2:   %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ]
const phi 2 found to be a const!!
binaryOp const!!
visiting inst:   %10 = sub nsw i32 %8, %9
not in latcell, latcell:
6
  %5 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %5 = icmp sgt i32 %.01, 0
  %8 = sdiv i32 %0, -3, type: 1, name = , v =   %8 = sdiv i32 %0, -3
  %9 = add nsw i32 1, %.01, type: 2, name = , v = i32 2
  br label %4, type: 1, name = , v =   br label %4
  %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ], type: 2, name = .01, v = i32 1
  br i1 %5, label %6, label %7, type: 1, name = , v =   br i1 %5, label %6, label %7
NONONONO NONOMONO return bottom
visiting inst:   %11 = add nsw i32 %.0, %10
opInstr1:   %.0 = phi i32 [ %0, %3 ], [ %11, %7 ]
NONONONO NONOMONO return bottom
visiting inst:   %12 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %12, i32 %.01, i32 %10
NONONONO NONOMONO return bottom
visiting inst:   store i32 %0, ptr %2, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %0, ptr %2, align 4
ffffffflowwl succ pushed:   %13 = icmp slt i32 0, %11
visiting inst:   %13 = icmp slt i32 0, %11
NONONONO NONOMONO return bottom
visiting inst:   br i1 %13, label %4, label %14, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %13, label %4, label %14, !llvm.loop !6
ffffffflowwl succ pushed:   %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ]
ffffffflowwl inst pushed:   br i1 %13, label %4, label %14, !llvm.loop !6
ffffffflowwl succ pushed:   ret i32 %spec.select
visiting inst:   ret i32 %spec.select
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %spec.select
ffffffflowwl succ pushed: null!
visit phi inst:   %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %spec.select = select i1 %12, i32 %.01, i32 %10
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   store i32 %0, ptr %1, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %0, ptr %1, align 4
ffffffflowwl succ pushed:   br label %7
visiting inst:   br label %7
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %7
ffffffflowwl succ pushed:   %8 = sdiv i32 %0, -3
visiting inst:   %5 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 1, %.01
opInstr2:   %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = sub nsw i32 %8, %9
not in latcell, latcell:
16
  %5 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %5 = icmp sgt i32 %.01, 0
  store i32 %0, ptr %1, align 4, type: 1, name = , v =   store i32 %0, ptr %1, align 4
  %8 = sdiv i32 %0, -3, type: 1, name = , v =   %8 = sdiv i32 %0, -3
  %9 = add nsw i32 1, %.01, type: 1, name = , v =   %9 = add nsw i32 1, %.01
  %10 = sub nsw i32 %8, %9, type: 1, name = , v =   %10 = sub nsw i32 %8, %9
  %spec.select = select i1 %12, i32 %.01, i32 %10, type: 1, name = spec.select, v =   %spec.select = select i1 %12, i32 %.01, i32 %10
  br label %4, type: 1, name = , v =   br label %4
  %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ], type: 1, name = .01, v = i32 1
  br i1 %5, label %6, label %7, type: 1, name = , v =   br i1 %5, label %6, label %7
  br label %7, type: 1, name = , v =   br label %7
  %11 = add nsw i32 %.0, %10, type: 1, name = , v =   %11 = add nsw i32 %.0, %10
  %12 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %12 = icmp sgt i32 %.01, 0
  store i32 %0, ptr %2, align 4, type: 1, name = , v =   store i32 %0, ptr %2, align 4
  %13 = icmp slt i32 0, %11, type: 1, name = , v =   %13 = icmp slt i32 0, %11
  br i1 %13, label %4, label %14, !llvm.loop !6, type: 1, name = , v =   br i1 %13, label %4, label %14, !llvm.loop !6
  ret i32 %spec.select, type: 1, name = , v =   ret i32 %spec.select
NONONONO NONOMONO return bottom
visiting inst:   %12 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %12, i32 %.01, i32 %10
NONONONO NONOMONO return bottom
visiting inst:   br i1 %13, label %4, label %14, !llvm.loop !6
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %spec.select
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %spec.select = select i1 %12, i32 %.01, i32 %10
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %5 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 1, %.01
opInstr2:   %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %12 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %12, i32 %.01, i32 %10
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %12, i32 %.01, i32 %10
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ %0, %3 ], [ %11, %7 ]
0,incoming: i32 %0
edge not in execflag!!
1,incoming:   %11 = add nsw i32 %.0, %10
edge not in execflag!!
visiting inst:   %13 = icmp slt i32 0, %11
NONONONO NONOMONO return bottom
visiting inst:   %11 = add nsw i32 %.0, %10
opInstr1:   %.0 = phi i32 [ %0, %3 ], [ %11, %7 ]
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %12, i32 %.01, i32 %10
NONONONO NONOMONO return bottom
visiting inst:   %10 = sub nsw i32 %8, %9
not in latcell, latcell:
16
  %5 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %5 = icmp sgt i32 %.01, 0
  store i32 %0, ptr %1, align 4, type: 1, name = , v =   store i32 %0, ptr %1, align 4
  %8 = sdiv i32 %0, -3, type: 1, name = , v =   %8 = sdiv i32 %0, -3
  %9 = add nsw i32 1, %.01, type: 1, name = , v =   %9 = add nsw i32 1, %.01
  %10 = sub nsw i32 %8, %9, type: 1, name = , v =   %10 = sub nsw i32 %8, %9
  %spec.select = select i1 %12, i32 %.01, i32 %10, type: 1, name = spec.select, v =   %spec.select = select i1 %12, i32 %.01, i32 %10
  br label %4, type: 1, name = , v =   br label %4
  %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ], type: 1, name = .01, v =   %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ]
  br i1 %5, label %6, label %7, type: 1, name = , v =   br i1 %5, label %6, label %7
  br label %7, type: 1, name = , v =   br label %7
  %11 = add nsw i32 %.0, %10, type: 1, name = , v =   %11 = add nsw i32 %.0, %10
  %12 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %12 = icmp sgt i32 %.01, 0
  store i32 %0, ptr %2, align 4, type: 1, name = , v =   store i32 %0, ptr %2, align 4
  %13 = icmp slt i32 0, %11, type: 1, name = , v =   %13 = icmp slt i32 0, %11
  br i1 %13, label %4, label %14, !llvm.loop !6, type: 1, name = , v =   br i1 %13, label %4, label %14, !llvm.loop !6
  ret i32 %spec.select, type: 1, name = , v =   ret i32 %spec.select
NONONONO NONOMONO return bottom
visiting inst:   %10 = sub nsw i32 %8, %9
not in latcell, latcell:
16
  %5 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %5 = icmp sgt i32 %.01, 0
  store i32 %0, ptr %1, align 4, type: 1, name = , v =   store i32 %0, ptr %1, align 4
  %8 = sdiv i32 %0, -3, type: 1, name = , v =   %8 = sdiv i32 %0, -3
  %9 = add nsw i32 1, %.01, type: 1, name = , v =   %9 = add nsw i32 1, %.01
  %10 = sub nsw i32 %8, %9, type: 1, name = , v =   %10 = sub nsw i32 %8, %9
  %spec.select = select i1 %12, i32 %.01, i32 %10, type: 1, name = spec.select, v =   %spec.select = select i1 %12, i32 %.01, i32 %10
  br label %4, type: 1, name = , v =   br label %4
  %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ], type: 1, name = .01, v =   %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ]
  br i1 %5, label %6, label %7, type: 1, name = , v =   br i1 %5, label %6, label %7
  br label %7, type: 1, name = , v =   br label %7
  %11 = add nsw i32 %.0, %10, type: 1, name = , v =   %11 = add nsw i32 %.0, %10
  %12 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %12 = icmp sgt i32 %.01, 0
  store i32 %0, ptr %2, align 4, type: 1, name = , v =   store i32 %0, ptr %2, align 4
  %13 = icmp slt i32 0, %11, type: 1, name = , v =   %13 = icmp slt i32 0, %11
  br i1 %13, label %4, label %14, !llvm.loop !6, type: 1, name = , v =   br i1 %13, label %4, label %14, !llvm.loop !6
  ret i32 %spec.select, type: 1, name = , v =   ret i32 %spec.select
NONONONO NONOMONO return bottom
visiting inst:   br i1 %5, label %6, label %7
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 1, %.01
opInstr2:   %.01 = phi i32 [ 1, %3 ], [ %spec.select, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %12 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %12, i32 %.01, i32 %10
NONONONO NONOMONO return bottom

Running partialsums...
[100%] Built target UnitProject
visiting inst:   %3 = alloca <2 x double>, align 16
NONONONO NONOMONO return bottom
visiting inst:   store double %0, ptr %3, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %0, ptr %3, align 8
ffffffflowwl succ pushed:   %4 = getelementptr inbounds double, ptr %3, i64 1
visiting inst:   %4 = getelementptr inbounds double, ptr %3, i64 1
NONONONO NONOMONO return bottom
visiting inst:   store double %1, ptr %4, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %1, ptr %4, align 8
ffffffflowwl succ pushed:   %5 = load <2 x double>, ptr %3, align 16
visiting inst:   %5 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   ret <2 x double> %5
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret <2 x double> %5
ffffffflowwl succ pushed: null!
visiting inst:   ret <2 x double> %5
NONONONO NONOMONO return bottom
visiting inst:   store double %1, ptr %4, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %0, ptr %3, align 8
NONONONO NONOMONO return bottom
visiting inst:   %4 = getelementptr inbounds double, ptr %3, i64 1
NONONONO NONOMONO return bottom
visiting inst:   %5 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %2 = alloca <2 x double>, align 16
NONONONO NONOMONO return bottom
visiting inst:   store <2 x double> %0, ptr %2, align 16
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store <2 x double> %0, ptr %2, align 16
ffffffflowwl succ pushed:   %3 = load double, ptr %2, align 8
visiting inst:   %3 = load double, ptr %2, align 8
NONONONO NONOMONO return bottom
visiting inst:   %4 = getelementptr inbounds double, ptr %2, i64 1
NONONONO NONOMONO return bottom
visiting inst:   %5 = load double, ptr %4, align 8
NONONONO NONOMONO return bottom
visiting inst:   %6 = fadd double %3, %5
NONONONO NONOMONO return bottom
visiting inst:   ret double %6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret double %6
ffffffflowwl succ pushed: null!
visiting inst:   ret double %6
NONONONO NONOMONO return bottom
visiting inst:   %6 = fadd double %3, %5
NONONONO NONOMONO return bottom
visiting inst:   %5 = load double, ptr %4, align 8
NONONONO NONOMONO return bottom
visiting inst:   %6 = fadd double %3, %5
NONONONO NONOMONO return bottom
visiting inst:   store <2 x double> %0, ptr %2, align 16
NONONONO NONOMONO return bottom
visiting inst:   %3 = load double, ptr %2, align 8
NONONONO NONOMONO return bottom
visiting inst:   %4 = getelementptr inbounds double, ptr %2, i64 1
NONONONO NONOMONO return bottom
visiting inst:   %3 = alloca <2 x double>, align 16
NONONONO NONOMONO return bottom
visiting inst:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
NONONONO NONOMONO return bottom
visiting inst:   %5 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 1.000000e+00)
NONONONO NONOMONO return bottom
visiting inst:   %6 = call <2 x double> @make_vec(double noundef 2.000000e+00, double noundef 2.000000e+00)
NONONONO NONOMONO return bottom
visiting inst:   %7 = call <2 x double> @make_vec(double noundef -1.000000e+00, double noundef -1.000000e+00)
NONONONO NONOMONO return bottom
visiting inst:   %8 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 2.000000e+00)
NONONONO NONOMONO return bottom
visiting inst:   %9 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef -1.000000e+00)
NONONONO NONOMONO return bottom
visiting inst:   br label %10
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %10
ffffffflowwl succ pushed:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %13 ]
visit phi inst:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %13 ]
0,incoming: double 0.000000e+00
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %31 = fadd double %.06, %30
edge not in execflag!!
visit phi inst:   %.05 = phi double [ 0.000000e+00, %2 ], [ %27, %13 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %27 = fadd double %.05, %26
edge not in execflag!!
visit phi inst:   %.04 = phi double [ 0.000000e+00, %2 ], [ %19, %13 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %19 = fadd double %.04, %18
edge not in execflag!!
visit phi inst:   %.03 = phi double [ 0.000000e+00, %2 ], [ %16, %13 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %16 = fadd double %.03, %15
edge not in execflag!!
visit phi inst:   %.0 = phi double [ 1.000000e+00, %2 ], [ %32, %13 ]
0,incoming: double 1.000000e+00
edge not in execflag!!
1,incoming:   %32 = fadd double %.0, 1.000000e+00
edge not in execflag!!
visiting inst:   %11 = sitofp i32 2500000 to double
NONONONO NONOMONO return bottom
visiting inst:   %12 = fcmp ole double %.0, %11
NONONONO NONOMONO return bottom
visiting inst:   br i1 %12, label %13, label %33
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %12, label %13, label %33
ffffffflowwl succ pushed:   %14 = fsub double %.0, 1.000000e+00
ffffffflowwl inst pushed:   br i1 %12, label %13, label %33
ffffffflowwl succ pushed:   store <2 x double> %8, ptr %3, align 16
visiting inst:   store <2 x double> %8, ptr %3, align 16
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store <2 x double> %8, ptr %3, align 16
ffffffflowwl succ pushed:   br label %34
visiting inst:   br label %34
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %34
ffffffflowwl succ pushed:   %.09 = phi <2 x double> [ %4, %33 ], [ %44, %38 ]
visit phi inst:   %.09 = phi <2 x double> [ %4, %33 ], [ %44, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming:   %44 = fadd <2 x double> %.09, %43
edge not in execflag!!
visit phi inst:   %.08 = phi <2 x double> [ %4, %33 ], [ %52, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %52 = fadd <2 x double> %.08, %51
edge not in execflag!!
visit phi inst:   %.07 = phi <2 x double> [ %4, %33 ], [ %47, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %47 = fadd <2 x double> %.07, %46
edge not in execflag!!
visit phi inst:   %.02 = phi <2 x double> [ %4, %33 ], [ %55, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %55 = fadd <2 x double> %.02, %54
edge not in execflag!!
visit phi inst:   %.01 = phi <2 x double> [ %4, %33 ], [ %60, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %60 = fadd <2 x double> %.01, %59
edge not in execflag!!
visiting inst:   %35 = load double, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %36 = sitofp i32 2500000 to double
NONONONO NONOMONO return bottom
visiting inst:   %37 = fcmp ole double %35, %36
NONONONO NONOMONO return bottom
visiting inst:   br i1 %37, label %38, label %63
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %37, label %38, label %63
ffffffflowwl succ pushed:   %64 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %.03, ptr noundef @.str.1)
ffffffflowwl inst pushed:   br i1 %37, label %38, label %63
ffffffflowwl succ pushed:   %39 = load <2 x double>, ptr %3, align 16
visiting inst:   %39 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %40 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %41 = fadd <2 x double> %40, %5
NONONONO NONOMONO return bottom
visiting inst:   %42 = fmul <2 x double> %39, %41
NONONONO NONOMONO return bottom
visiting inst:   %43 = fdiv <2 x double> %5, %42
NONONONO NONOMONO return bottom
visiting inst:   %44 = fadd <2 x double> %.09, %43
opInstr1:   %.09 = phi <2 x double> [ %4, %33 ], [ %44, %38 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %45 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %46 = fdiv <2 x double> %5, %45
NONONONO NONOMONO return bottom
visiting inst:   %47 = fadd <2 x double> %.07, %46
opInstr1:   %.07 = phi <2 x double> [ %4, %33 ], [ %47, %38 ]
NONONONO NONOMONO return bottom
visiting inst:   %48 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %49 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %50 = fmul <2 x double> %48, %49
NONONONO NONOMONO return bottom
visiting inst:   %51 = fdiv <2 x double> %5, %50
NONONONO NONOMONO return bottom
visiting inst:   %52 = fadd <2 x double> %.08, %51
opInstr1:   %.08 = phi <2 x double> [ %4, %33 ], [ %52, %38 ]
NONONONO NONOMONO return bottom
visiting inst:   %53 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %54 = fdiv <2 x double> %9, %53
NONONONO NONOMONO return bottom
visiting inst:   %55 = fadd <2 x double> %.02, %54
opInstr1:   %.02 = phi <2 x double> [ %4, %33 ], [ %55, %38 ]
NONONONO NONOMONO return bottom
visiting inst:   %56 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %57 = fneg <2 x double> %5
NONONONO NONOMONO return bottom
visiting inst:   %58 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %6, <2 x double> %56, <2 x double> %57)
NONONONO NONOMONO return bottom
visiting inst:   %59 = fdiv <2 x double> %9, %58
NONONONO NONOMONO return bottom
visiting inst:   %60 = fadd <2 x double> %.01, %59
opInstr1:   %.01 = phi <2 x double> [ %4, %33 ], [ %60, %38 ]
NONONONO NONOMONO return bottom
visiting inst:   %61 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %62 = fadd <2 x double> %61, %6
NONONONO NONOMONO return bottom
visiting inst:   store <2 x double> %62, ptr %3, align 16
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store <2 x double> %62, ptr %3, align 16
ffffffflowwl succ pushed:   br label %34, !llvm.loop !8
visiting inst:   br label %34, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %34, !llvm.loop !8
ffffffflowwl succ pushed:   %.09 = phi <2 x double> [ %4, %33 ], [ %44, %38 ]
visit phi inst:   %.09 = phi <2 x double> [ %4, %33 ], [ %44, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %44 = fadd <2 x double> %.09, %43
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %64 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %.03, ptr noundef @.str.1)
NONONONO NONOMONO return bottom
visiting inst:   %65 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %.04, ptr noundef @.str.2)
NONONONO NONOMONO return bottom
visiting inst:   %66 = call double @sum_vec(<2 x double> noundef %.09)
NONONONO NONOMONO return bottom
visiting inst:   %67 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %66, ptr noundef @.str.3)
NONONONO NONOMONO return bottom
visiting inst:   %68 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %.05, ptr noundef @.str.4)
NONONONO NONOMONO return bottom
visiting inst:   %69 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %.06, ptr noundef @.str.5)
NONONONO NONOMONO return bottom
visiting inst:   %70 = call double @sum_vec(<2 x double> noundef %.07)
NONONONO NONOMONO return bottom
visiting inst:   %71 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %70, ptr noundef @.str.6)
NONONONO NONOMONO return bottom
visiting inst:   %72 = call double @sum_vec(<2 x double> noundef %.08)
NONONONO NONOMONO return bottom
visiting inst:   %73 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %72, ptr noundef @.str.7)
NONONONO NONOMONO return bottom
visiting inst:   %74 = call double @sum_vec(<2 x double> noundef %.02)
NONONONO NONOMONO return bottom
visiting inst:   %75 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %74, ptr noundef @.str.8)
NONONONO NONOMONO return bottom
visiting inst:   %76 = call double @sum_vec(<2 x double> noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %77 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %76, ptr noundef @.str.9)
NONONONO NONOMONO return bottom
visiting inst:   ret i32 0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 0
ffffffflowwl succ pushed: null!
visiting inst:   %14 = fsub double %.0, 1.000000e+00
opInstr1:   %.0 = phi double [ 1.000000e+00, %2 ], [ %32, %13 ]
NONONONO NONOMONO return bottom
visiting inst:   %15 = call double @pow(double noundef 0x3FE5555555555555, double noundef %14) #4
NONONONO NONOMONO return bottom
visiting inst:   %16 = fadd double %.03, %15
opInstr1:   %.03 = phi double [ 0.000000e+00, %2 ], [ %16, %13 ]
NONONONO NONOMONO return bottom
visiting inst:   %17 = call double @sqrt(double noundef %.0) #4
NONONONO NONOMONO return bottom
visiting inst:   %18 = fdiv double 1.000000e+00, %17
NONONONO NONOMONO return bottom
visiting inst:   %19 = fadd double %.04, %18
opInstr1:   %.04 = phi double [ 0.000000e+00, %2 ], [ %19, %13 ]
NONONONO NONOMONO return bottom
visiting inst:   %20 = fmul double %.0, %.0
opInstr1:   %.0 = phi double [ 1.000000e+00, %2 ], [ %32, %13 ]
opInstr2:   %.0 = phi double [ 1.000000e+00, %2 ], [ %32, %13 ]
NONONONO NONOMONO return bottom
visiting inst:   %21 = fmul double %20, %.0
opInstr2:   %.0 = phi double [ 1.000000e+00, %2 ], [ %32, %13 ]
NONONONO NONOMONO return bottom
visiting inst:   %22 = call double @sin(double noundef %.0) #4
NONONONO NONOMONO return bottom
visiting inst:   %23 = call double @cos(double noundef %.0) #4
NONONONO NONOMONO return bottom
visiting inst:   %24 = fmul double %21, %22
NONONONO NONOMONO return bottom
visiting inst:   %25 = fmul double %24, %22
NONONONO NONOMONO return bottom
visiting inst:   %26 = fdiv double 1.000000e+00, %25
NONONONO NONOMONO return bottom
visiting inst:   %27 = fadd double %.05, %26
opInstr1:   %.05 = phi double [ 0.000000e+00, %2 ], [ %27, %13 ]
NONONONO NONOMONO return bottom
visiting inst:   %28 = fmul double %21, %23
NONONONO NONOMONO return bottom
visiting inst:   %29 = fmul double %28, %23
NONONONO NONOMONO return bottom
visiting inst:   %30 = fdiv double 1.000000e+00, %29
NONONONO NONOMONO return bottom
visiting inst:   %31 = fadd double %.06, %30
opInstr1:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %13 ]
const phi 1 found to be a const!!
NONONONO NONOMONO return bottom
visiting inst:   %32 = fadd double %.0, 1.000000e+00
opInstr1:   %.0 = phi double [ 1.000000e+00, %2 ], [ %32, %13 ]
NONONONO NONOMONO return bottom
visiting inst:   br label %10, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %10, !llvm.loop !6
ffffffflowwl succ pushed:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %13 ]
visit phi inst:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %13 ]
0,incoming: double 0.000000e+00
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %31 = fadd double %.06, %30
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %31 = fadd double %.06, %30
opInstr1:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %13 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %69 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %.06, ptr noundef @.str.5)
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi double [ 1.000000e+00, %2 ], [ %32, %13 ]
0,incoming: double 1.000000e+00
edge not in execflag!!
1,incoming:   %32 = fadd double %.0, 1.000000e+00
edge not in execflag!!
visit phi inst:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %13 ]
0,incoming: double 0.000000e+00
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %31 = fadd double %.06, %30
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %31 = fadd double %.06, %30
opInstr1:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %13 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %69 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %.06, ptr noundef @.str.5)
NONONONO NONOMONO return bottom
visiting inst:   %31 = fadd double %.06, %30
opInstr1:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %13 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %30 = fdiv double 1.000000e+00, %29
NONONONO NONOMONO return bottom
visiting inst:   %29 = fmul double %28, %23
NONONONO NONOMONO return bottom
visit phi inst:   %.05 = phi double [ 0.000000e+00, %2 ], [ %27, %13 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %27 = fadd double %.05, %26
edge not in execflag!!
visiting inst:   %27 = fadd double %.05, %26
opInstr1:   %.05 = phi double [ 0.000000e+00, %2 ], [ %27, %13 ]
NONONONO NONOMONO return bottom
visiting inst:   %26 = fdiv double 1.000000e+00, %25
NONONONO NONOMONO return bottom
visiting inst:   %25 = fmul double %24, %22
NONONONO NONOMONO return bottom
visiting inst:   %28 = fmul double %21, %23
NONONONO NONOMONO return bottom
visiting inst:   %29 = fmul double %28, %23
NONONONO NONOMONO return bottom
visiting inst:   %24 = fmul double %21, %22
NONONONO NONOMONO return bottom
visiting inst:   %25 = fmul double %24, %22
NONONONO NONOMONO return bottom
visiting inst:   %24 = fmul double %21, %22
NONONONO NONOMONO return bottom
visiting inst:   %28 = fmul double %21, %23
NONONONO NONOMONO return bottom
visiting inst:   %21 = fmul double %20, %.0
opInstr2:   %.0 = phi double [ 1.000000e+00, %2 ], [ %32, %13 ]
NONONONO NONOMONO return bottom
visit phi inst:   %.04 = phi double [ 0.000000e+00, %2 ], [ %19, %13 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %19 = fadd double %.04, %18
edge not in execflag!!
visiting inst:   %19 = fadd double %.04, %18
opInstr1:   %.04 = phi double [ 0.000000e+00, %2 ], [ %19, %13 ]
NONONONO NONOMONO return bottom
visiting inst:   %18 = fdiv double 1.000000e+00, %17
NONONONO NONOMONO return bottom
visit phi inst:   %.03 = phi double [ 0.000000e+00, %2 ], [ %16, %13 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %16 = fadd double %.03, %15
edge not in execflag!!
visiting inst:   %16 = fadd double %.03, %15
opInstr1:   %.03 = phi double [ 0.000000e+00, %2 ], [ %16, %13 ]
NONONONO NONOMONO return bottom
visiting inst:   %15 = call double @pow(double noundef 0x3FE5555555555555, double noundef %14) #4
NONONONO NONOMONO return bottom
visiting inst:   %77 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %76, ptr noundef @.str.9)
NONONONO NONOMONO return bottom
visiting inst:   %75 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %74, ptr noundef @.str.8)
NONONONO NONOMONO return bottom
visiting inst:   %73 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %72, ptr noundef @.str.7)
NONONONO NONOMONO return bottom
visiting inst:   %71 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %70, ptr noundef @.str.6)
NONONONO NONOMONO return bottom
visiting inst:   %67 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %66, ptr noundef @.str.3)
NONONONO NONOMONO return bottom
visiting inst:   store <2 x double> %62, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %62 = fadd <2 x double> %61, %6
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi <2 x double> [ %4, %33 ], [ %60, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %60 = fadd <2 x double> %.01, %59
edge not in execflag!!
visiting inst:   %60 = fadd <2 x double> %.01, %59
opInstr1:   %.01 = phi <2 x double> [ %4, %33 ], [ %60, %38 ]
NONONONO NONOMONO return bottom
visiting inst:   %59 = fdiv <2 x double> %9, %58
NONONONO NONOMONO return bottom
visiting inst:   %58 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %6, <2 x double> %56, <2 x double> %57)
NONONONO NONOMONO return bottom
visiting inst:   %58 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %6, <2 x double> %56, <2 x double> %57)
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi <2 x double> [ %4, %33 ], [ %55, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %55 = fadd <2 x double> %.02, %54
edge not in execflag!!
visiting inst:   %55 = fadd <2 x double> %.02, %54
opInstr1:   %.02 = phi <2 x double> [ %4, %33 ], [ %55, %38 ]
NONONONO NONOMONO return bottom
visiting inst:   %54 = fdiv <2 x double> %9, %53
NONONONO NONOMONO return bottom
visit phi inst:   %.08 = phi <2 x double> [ %4, %33 ], [ %52, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %52 = fadd <2 x double> %.08, %51
edge not in execflag!!
visiting inst:   %52 = fadd <2 x double> %.08, %51
opInstr1:   %.08 = phi <2 x double> [ %4, %33 ], [ %52, %38 ]
NONONONO NONOMONO return bottom
visiting inst:   %51 = fdiv <2 x double> %5, %50
NONONONO NONOMONO return bottom
visiting inst:   %50 = fmul <2 x double> %48, %49
NONONONO NONOMONO return bottom
visiting inst:   %50 = fmul <2 x double> %48, %49
NONONONO NONOMONO return bottom
visit phi inst:   %.07 = phi <2 x double> [ %4, %33 ], [ %47, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %47 = fadd <2 x double> %.07, %46
edge not in execflag!!
visiting inst:   %47 = fadd <2 x double> %.07, %46
opInstr1:   %.07 = phi <2 x double> [ %4, %33 ], [ %47, %38 ]
NONONONO NONOMONO return bottom
visiting inst:   %46 = fdiv <2 x double> %5, %45
NONONONO NONOMONO return bottom
visit phi inst:   %.09 = phi <2 x double> [ %4, %33 ], [ %44, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %44 = fadd <2 x double> %.09, %43
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %44 = fadd <2 x double> %.09, %43
opInstr1:   %.09 = phi <2 x double> [ %4, %33 ], [ %44, %38 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %43 = fdiv <2 x double> %5, %42
NONONONO NONOMONO return bottom
visiting inst:   %42 = fmul <2 x double> %39, %41
NONONONO NONOMONO return bottom
visiting inst:   %41 = fadd <2 x double> %40, %5
NONONONO NONOMONO return bottom
visiting inst:   %42 = fmul <2 x double> %39, %41
NONONONO NONOMONO return bottom
visiting inst:   br i1 %37, label %38, label %63
NONONONO NONOMONO return bottom
visiting inst:   %37 = fcmp ole double %35, %36
NONONONO NONOMONO return bottom
visiting inst:   %37 = fcmp ole double %35, %36
NONONONO NONOMONO return bottom
visiting inst:   %44 = fadd <2 x double> %.09, %43
opInstr1:   %.09 = phi <2 x double> [ %4, %33 ], [ %44, %38 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %66 = call double @sum_vec(<2 x double> noundef %.09)
NONONONO NONOMONO return bottom
visiting inst:   br i1 %12, label %13, label %33
NONONONO NONOMONO return bottom
visiting inst:   %12 = fcmp ole double %.0, %11
NONONONO NONOMONO return bottom
visiting inst:   %31 = fadd double %.06, %30
opInstr1:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %13 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %69 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %.06, ptr noundef @.str.5)
NONONONO NONOMONO return bottom
visiting inst:   %54 = fdiv <2 x double> %9, %53
NONONONO NONOMONO return bottom
visiting inst:   %59 = fdiv <2 x double> %9, %58
NONONONO NONOMONO return bottom
visiting inst:   store <2 x double> %8, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %58 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %6, <2 x double> %56, <2 x double> %57)
NONONONO NONOMONO return bottom
visiting inst:   %62 = fadd <2 x double> %61, %6
NONONONO NONOMONO return bottom
visiting inst:   %41 = fadd <2 x double> %40, %5
NONONONO NONOMONO return bottom
visiting inst:   %43 = fdiv <2 x double> %5, %42
NONONONO NONOMONO return bottom
visiting inst:   %46 = fdiv <2 x double> %5, %45
NONONONO NONOMONO return bottom
visiting inst:   %51 = fdiv <2 x double> %5, %50
NONONONO NONOMONO return bottom
visiting inst:   %57 = fneg <2 x double> %5
NONONONO NONOMONO return bottom
visit phi inst:   %.09 = phi <2 x double> [ %4, %33 ], [ %44, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %44 = fadd <2 x double> %.09, %43
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.08 = phi <2 x double> [ %4, %33 ], [ %52, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %52 = fadd <2 x double> %.08, %51
edge not in execflag!!
visit phi inst:   %.07 = phi <2 x double> [ %4, %33 ], [ %47, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %47 = fadd <2 x double> %.07, %46
edge not in execflag!!
visit phi inst:   %.02 = phi <2 x double> [ %4, %33 ], [ %55, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %55 = fadd <2 x double> %.02, %54
edge not in execflag!!
visit phi inst:   %.01 = phi <2 x double> [ %4, %33 ], [ %60, %38 ]
0,incoming:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
edge not in execflag!!
1,incoming:   %60 = fadd <2 x double> %.01, %59
edge not in execflag!!
visiting inst:   store <2 x double> %8, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %35 = load double, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %39 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %40 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %45 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %48 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %49 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %53 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %56 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   %61 = load <2 x double>, ptr %3, align 16
NONONONO NONOMONO return bottom
visiting inst:   store <2 x double> %62, ptr %3, align 16
NONONONO NONOMONO return bottom

Running PR491...
[100%] Built target UnitProject
visiting inst:   %2 = alloca %union.anon, align 8
NONONONO NONOMONO return bottom
visiting inst:   store i64 0, ptr %2, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i64 0, ptr %2, align 8
ffffffflowwl succ pushed:   %3 = getelementptr inbounds [8 x i8], ptr %2, i64 0, i64 0
visiting inst:   %3 = getelementptr inbounds [8 x i8], ptr %2, i64 0, i64 0
NONONONO NONOMONO return bottom
visiting inst:   store i8 -128, ptr %3, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i8 -128, ptr %3, align 8
ffffffflowwl succ pushed:   %4 = load i64, ptr %2, align 8
visiting inst:   %4 = load i64, ptr %2, align 8
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp eq i64 %4, 128
NONONONO NONOMONO return bottom
visiting inst:   br i1 %5, label %8, label %6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %5, label %8, label %6
ffffffflowwl succ pushed:   %9 = phi i32 [ %7, %6 ], [ 1, %1 ]
ffffffflowwl inst pushed:   br i1 %5, label %8, label %6
ffffffflowwl succ pushed:   %7 = call i32 @assert_fail(ptr noundef @.str, i32 noundef 22)
visiting inst:   %7 = call i32 @assert_fail(ptr noundef @.str, i32 noundef 22)
NONONONO NONOMONO return bottom
visiting inst:   br label %8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %8
ffffffflowwl succ pushed:   %9 = phi i32 [ %7, %6 ], [ 1, %1 ]
visit phi inst:   %9 = phi i32 [ %7, %6 ], [ 1, %1 ]
0,incoming:   %7 = call i32 @assert_fail(ptr noundef @.str, i32 noundef 22)
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 1
edge not in execflag!!
visiting inst:   %10 = and i32 %0, %9
opInstr2:   %9 = phi i32 [ %7, %6 ], [ 1, %1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store i64 0, ptr %2, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i64 0, ptr %2, align 8
ffffffflowwl succ pushed:   %11 = getelementptr inbounds [8 x i8], ptr %2, i64 0, i64 7
visiting inst:   %11 = getelementptr inbounds [8 x i8], ptr %2, i64 0, i64 7
NONONONO NONOMONO return bottom
visiting inst:   store i8 -128, ptr %11, align 1
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i8 -128, ptr %11, align 1
ffffffflowwl succ pushed:   %12 = load i64, ptr %2, align 8
visiting inst:   %12 = load i64, ptr %2, align 8
NONONONO NONOMONO return bottom
visiting inst:   %13 = icmp slt i64 %12, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %13, label %16, label %14
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %13, label %16, label %14
ffffffflowwl succ pushed:   %15 = call i32 @assert_fail(ptr noundef @.str.1, i32 noundef 24)
ffffffflowwl inst pushed:   br i1 %13, label %16, label %14
ffffffflowwl succ pushed:   %17 = phi i32 [ %15, %14 ], [ 1, %8 ]
visit phi inst:   %17 = phi i32 [ %15, %14 ], [ 1, %8 ]
0,incoming:   %15 = call i32 @assert_fail(ptr noundef @.str.1, i32 noundef 24)
edge not in execflag!!
1,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %18 = and i32 %10, %17
opInstr2:   %17 = phi i32 [ %15, %14 ], [ 1, %8 ]
const phi 2 found to be a const!!
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %18
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %18
ffffffflowwl succ pushed: null!
visiting inst:   %15 = call i32 @assert_fail(ptr noundef @.str.1, i32 noundef 24)
NONONONO NONOMONO return bottom
visiting inst:   br label %16
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %16
ffffffflowwl succ pushed:   %17 = phi i32 [ %15, %14 ], [ 1, %8 ]
visit phi inst:   %17 = phi i32 [ %15, %14 ], [ 1, %8 ]
0,incoming:   %15 = call i32 @assert_fail(ptr noundef @.str.1, i32 noundef 24)
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
visit phi inst:   %9 = phi i32 [ %7, %6 ], [ 1, %1 ]
0,incoming:   %7 = call i32 @assert_fail(ptr noundef @.str, i32 noundef 22)
MMMMMMMMMMnewtype = 1
no constant
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %10 = and i32 %0, %9
opInstr2:   %9 = phi i32 [ %7, %6 ], [ 1, %1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %18 = and i32 %10, %17
opInstr2:   %17 = phi i32 [ %15, %14 ], [ 1, %8 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %17 = phi i32 [ %15, %14 ], [ 1, %8 ]
0,incoming:   %15 = call i32 @assert_fail(ptr noundef @.str.1, i32 noundef 24)
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %18 = and i32 %10, %17
opInstr2:   %17 = phi i32 [ %15, %14 ], [ 1, %8 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %18 = and i32 %10, %17
opInstr2:   %17 = phi i32 [ %15, %14 ], [ 1, %8 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %18
NONONONO NONOMONO return bottom
visiting inst:   %18 = and i32 %10, %17
opInstr2:   %17 = phi i32 [ %15, %14 ], [ 1, %8 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %13, label %16, label %14
NONONONO NONOMONO return bottom
visiting inst:   %13 = icmp slt i64 %12, 0
NONONONO NONOMONO return bottom
visiting inst:   store i8 -128, ptr %11, align 1
NONONONO NONOMONO return bottom
visiting inst:   %18 = and i32 %10, %17
opInstr2:   %17 = phi i32 [ %15, %14 ], [ 1, %8 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = and i32 %0, %9
opInstr2:   %9 = phi i32 [ %7, %6 ], [ 1, %1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %9 = phi i32 [ %7, %6 ], [ 1, %1 ]
0,incoming:   %7 = call i32 @assert_fail(ptr noundef @.str, i32 noundef 22)
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %10 = and i32 %0, %9
opInstr2:   %9 = phi i32 [ %7, %6 ], [ 1, %1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = and i32 %0, %9
opInstr2:   %9 = phi i32 [ %7, %6 ], [ 1, %1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %5, label %8, label %6
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp eq i64 %4, 128
NONONONO NONOMONO return bottom
visiting inst:   store i8 -128, ptr %3, align 8
NONONONO NONOMONO return bottom
visiting inst:   store i64 0, ptr %2, align 8
NONONONO NONOMONO return bottom
visiting inst:   %3 = getelementptr inbounds [8 x i8], ptr %2, i64 0, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %4 = load i64, ptr %2, align 8
NONONONO NONOMONO return bottom
visiting inst:   store i64 0, ptr %2, align 8
NONONONO NONOMONO return bottom
visiting inst:   %11 = getelementptr inbounds [8 x i8], ptr %2, i64 0, i64 7
NONONONO NONOMONO return bottom
visiting inst:   %12 = load i64, ptr %2, align 8
NONONONO NONOMONO return bottom
visiting inst:   %3 = load ptr, ptr @stderr, align 8
NONONONO NONOMONO return bottom
visiting inst:   %4 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %3, ptr noundef @.str.2, i32 noundef %1, ptr noundef %0)
NONONONO NONOMONO return bottom
visiting inst:   ret i32 0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 0
ffffffflowwl succ pushed: null!
visiting inst:   %4 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %3, ptr noundef @.str.2, i32 noundef %1, ptr noundef %0)
NONONONO NONOMONO return bottom
visiting inst:   %1 = call i32 @test(i32 noundef 1)
NONONONO NONOMONO return bottom
visiting inst:   %2 = icmp ne i32 %1, 1
NONONONO NONOMONO return bottom
visiting inst:   %3 = zext i1 %2 to i32
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %3
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %3
ffffffflowwl succ pushed: null!
visiting inst:   ret i32 %3
NONONONO NONOMONO return bottom
visiting inst:   %3 = zext i1 %2 to i32
NONONONO NONOMONO return bottom
visiting inst:   %2 = icmp ne i32 %1, 1
NONONONO NONOMONO return bottom

Running nesting...
[100%] Built target UnitProject
visiting inst:   br label %2
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %2
ffffffflowwl succ pushed:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
visit phi inst:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
edge not in execflag!!
visit phi inst:   %.0 = phi i32 [ %0, %1 ], [ %9, %16 ]
0,incoming: i32 %0
edge not in execflag!!
1,incoming:   %9 = add nsw i32 %.0, %8
edge not in execflag!!
visiting inst:   %3 = icmp slt i32 0, %.0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %3, label %4, label %17
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %3, label %4, label %17
ffffffflowwl succ pushed:   %5 = call i32 @rand() #2
ffffffflowwl inst pushed:   br i1 %3, label %4, label %17
ffffffflowwl succ pushed:   ret i32 %.01
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %.01
ffffffflowwl succ pushed: null!
visiting inst:   %5 = call i32 @rand() #2
NONONONO NONOMONO return bottom
visiting inst:   %6 = srem i32 %5, 7
NONONONO NONOMONO return bottom
visiting inst:   %7 = add nsw i32 3, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
const phi 2 found to be a const!!
binaryOp const!!
visiting inst:   %8 = sub nsw i32 %6, %7
not in latcell, latcell:
8
  %3 = icmp slt i32 0, %.0, type: 1, name = , v =   %3 = icmp slt i32 0, %.0
  %6 = srem i32 %5, 7, type: 1, name = , v =   %6 = srem i32 %5, 7
  %7 = add nsw i32 3, %.01, type: 2, name = , v = i32 4
  br label %2, type: 1, name = , v =   br label %2
  %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ], type: 2, name = .01, v = i32 1
  br i1 %3, label %4, label %17, type: 1, name = , v =   br i1 %3, label %4, label %17
  %5 = call i32 @rand() #2, type: 1, name = , v =   %5 = call i32 @rand() #2
  ret i32 %.01, type: 1, name = , v =   ret i32 %.01
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.0, %8
opInstr1:   %.0 = phi i32 [ %0, %1 ], [ %9, %16 ]
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %10, label %16, label %.preheader
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %10, label %16, label %.preheader
ffffffflowwl succ pushed:   br label %11
ffffffflowwl inst pushed:   br i1 %10, label %16, label %.preheader
ffffffflowwl succ pushed:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
visit phi inst:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
edge not in execflag!!
visiting inst:   br label %2, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %2, !llvm.loop !8
ffffffflowwl succ pushed:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
visit phi inst:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   br label %11
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %11
ffffffflowwl succ pushed:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
visit phi inst:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
0,incoming:   %14 = mul nsw i32 %.02, 3
edge not in execflag!!
1,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visit phi inst:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
0,incoming:   %15 = mul nsw i32 %.1, 4
edge not in execflag!!
1,incoming:   %8 = sub nsw i32 %6, %7
edge not in execflag!!
visiting inst:   %12 = icmp slt i32 %.1, %.02
NONONONO NONOMONO return bottom
visiting inst:   br i1 %12, label %13, label %.loopexit
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %12, label %13, label %.loopexit
ffffffflowwl succ pushed:   br label %16
ffffffflowwl inst pushed:   br i1 %12, label %13, label %.loopexit
ffffffflowwl succ pushed:   %14 = mul nsw i32 %.02, 3
visiting inst:   %14 = mul nsw i32 %.02, 3
opInstr1:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %15 = mul nsw i32 %.1, 4
opInstr1:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
NONONONO NONOMONO return bottom
visiting inst:   br label %11, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %11, !llvm.loop !6
ffffffflowwl succ pushed:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
visit phi inst:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
0,incoming:   %14 = mul nsw i32 %.02, 3
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br label %16
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %16
ffffffflowwl succ pushed:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
visit phi inst:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visit phi inst:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %7 = add nsw i32 3, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %8 = sub nsw i32 %6, %7
not in latcell, latcell:
22
  %3 = icmp slt i32 0, %.0, type: 1, name = , v =   %3 = icmp slt i32 0, %.0
  %6 = srem i32 %5, 7, type: 1, name = , v =   %6 = srem i32 %5, 7
  %7 = add nsw i32 3, %.01, type: 1, name = , v =   %7 = add nsw i32 3, %.01
  %8 = sub nsw i32 %6, %7, type: 1, name = , v =   %8 = sub nsw i32 %6, %7
  %15 = mul nsw i32 %.1, 4, type: 1, name = , v =   %15 = mul nsw i32 %.1, 4
  %9 = add nsw i32 %.0, %8, type: 1, name = , v =   %9 = add nsw i32 %.0, %8
  br label %2, type: 1, name = , v =   br label %2
  %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ], type: 1, name = .01, v =   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
  br i1 %3, label %4, label %17, type: 1, name = , v =   br i1 %3, label %4, label %17
  %5 = call i32 @rand() #2, type: 1, name = , v =   %5 = call i32 @rand() #2
  %10 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %10 = icmp sgt i32 %.01, 0
  br i1 %10, label %16, label %.preheader, type: 1, name = , v =   br i1 %10, label %16, label %.preheader
  br label %16, type: 1, name = , v =   br label %16
  %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ], type: 1, name = .02, v =   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
  %12 = icmp slt i32 %.1, %.02, type: 1, name = , v =   %12 = icmp slt i32 %.1, %.02
  br i1 %12, label %13, label %.loopexit, type: 1, name = , v =   br i1 %12, label %13, label %.loopexit
  %14 = mul nsw i32 %.02, 3, type: 1, name = , v =   %14 = mul nsw i32 %.02, 3
  br label %11, !llvm.loop !6, type: 1, name = , v =   br label %11, !llvm.loop !6
  br label %11, type: 1, name = , v =   br label %11
  %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ], type: 1, name = .2, v =   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
  br label %2, !llvm.loop !8, type: 1, name = , v =   br label %2, !llvm.loop !8
  ret i32 %.01, type: 1, name = , v =   ret i32 %.01
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
0,incoming:   %14 = mul nsw i32 %.02, 3
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %7 = add nsw i32 3, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
0,incoming:   %14 = mul nsw i32 %.02, 3
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %7 = add nsw i32 3, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
0,incoming:   %14 = mul nsw i32 %.02, 3
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
0,incoming:   %15 = mul nsw i32 %.1, 4
edge not in execflag!!
1,incoming:   %8 = sub nsw i32 %6, %7
edge not in execflag!!
visit phi inst:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
0,incoming:   %14 = mul nsw i32 %.02, 3
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br i1 %12, label %13, label %.loopexit
NONONONO NONOMONO return bottom
visiting inst:   %12 = icmp slt i32 %.1, %.02
NONONONO NONOMONO return bottom
visiting inst:   %14 = mul nsw i32 %.02, 3
opInstr1:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %7 = add nsw i32 3, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
0,incoming:   %14 = mul nsw i32 %.02, 3
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %7 = add nsw i32 3, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
0,incoming:   %14 = mul nsw i32 %.02, 3
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %7 = add nsw i32 3, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
0,incoming:   %14 = mul nsw i32 %.02, 3
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br i1 %10, label %16, label %.preheader
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ %0, %1 ], [ %9, %16 ]
0,incoming: i32 %0
edge not in execflag!!
1,incoming:   %9 = add nsw i32 %.0, %8
edge not in execflag!!
visiting inst:   %9 = add nsw i32 %.0, %8
opInstr1:   %.0 = phi i32 [ %0, %1 ], [ %9, %16 ]
NONONONO NONOMONO return bottom
visit phi inst:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
0,incoming:   %15 = mul nsw i32 %.1, 4
edge not in execflag!!
1,incoming:   %8 = sub nsw i32 %6, %7
edge not in execflag!!
visiting inst:   %8 = sub nsw i32 %6, %7
not in latcell, latcell:
22
  %3 = icmp slt i32 0, %.0, type: 1, name = , v =   %3 = icmp slt i32 0, %.0
  %6 = srem i32 %5, 7, type: 1, name = , v =   %6 = srem i32 %5, 7
  %7 = add nsw i32 3, %.01, type: 1, name = , v =   %7 = add nsw i32 3, %.01
  %8 = sub nsw i32 %6, %7, type: 1, name = , v =   %8 = sub nsw i32 %6, %7
  %15 = mul nsw i32 %.1, 4, type: 1, name = , v =   %15 = mul nsw i32 %.1, 4
  %9 = add nsw i32 %.0, %8, type: 1, name = , v =   %9 = add nsw i32 %.0, %8
  br label %2, type: 1, name = , v =   br label %2
  %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ], type: 1, name = .01, v =   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
  br i1 %3, label %4, label %17, type: 1, name = , v =   br i1 %3, label %4, label %17
  %5 = call i32 @rand() #2, type: 1, name = , v =   %5 = call i32 @rand() #2
  %10 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %10 = icmp sgt i32 %.01, 0
  br i1 %10, label %16, label %.preheader, type: 1, name = , v =   br i1 %10, label %16, label %.preheader
  br label %16, type: 1, name = , v =   br label %16
  %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ], type: 1, name = .02, v =   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
  %12 = icmp slt i32 %.1, %.02, type: 1, name = , v =   %12 = icmp slt i32 %.1, %.02
  br i1 %12, label %13, label %.loopexit, type: 1, name = , v =   br i1 %12, label %13, label %.loopexit
  %14 = mul nsw i32 %.02, 3, type: 1, name = , v =   %14 = mul nsw i32 %.02, 3
  br label %11, !llvm.loop !6, type: 1, name = , v =   br label %11, !llvm.loop !6
  br label %11, type: 1, name = , v =   br label %11
  %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ], type: 1, name = .2, v =   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
  br label %2, !llvm.loop !8, type: 1, name = , v =   br label %2, !llvm.loop !8
  ret i32 %.01, type: 1, name = , v =   ret i32 %.01
NONONONO NONOMONO return bottom
visiting inst:   %8 = sub nsw i32 %6, %7
not in latcell, latcell:
22
  %3 = icmp slt i32 0, %.0, type: 1, name = , v =   %3 = icmp slt i32 0, %.0
  %6 = srem i32 %5, 7, type: 1, name = , v =   %6 = srem i32 %5, 7
  %7 = add nsw i32 3, %.01, type: 1, name = , v =   %7 = add nsw i32 3, %.01
  %8 = sub nsw i32 %6, %7, type: 1, name = , v =   %8 = sub nsw i32 %6, %7
  %15 = mul nsw i32 %.1, 4, type: 1, name = , v =   %15 = mul nsw i32 %.1, 4
  %9 = add nsw i32 %.0, %8, type: 1, name = , v =   %9 = add nsw i32 %.0, %8
  br label %2, type: 1, name = , v =   br label %2
  %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ], type: 1, name = .01, v =   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
  br i1 %3, label %4, label %17, type: 1, name = , v =   br i1 %3, label %4, label %17
  %5 = call i32 @rand() #2, type: 1, name = , v =   %5 = call i32 @rand() #2
  %10 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %10 = icmp sgt i32 %.01, 0
  br i1 %10, label %16, label %.preheader, type: 1, name = , v =   br i1 %10, label %16, label %.preheader
  br label %16, type: 1, name = , v =   br label %16
  %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ], type: 1, name = .02, v =   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
  %12 = icmp slt i32 %.1, %.02, type: 1, name = , v =   %12 = icmp slt i32 %.1, %.02
  br i1 %12, label %13, label %.loopexit, type: 1, name = , v =   br i1 %12, label %13, label %.loopexit
  %14 = mul nsw i32 %.02, 3, type: 1, name = , v =   %14 = mul nsw i32 %.02, 3
  br label %11, !llvm.loop !6, type: 1, name = , v =   br label %11, !llvm.loop !6
  br label %11, type: 1, name = , v =   br label %11
  %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ], type: 1, name = .2, v =   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
  br label %2, !llvm.loop !8, type: 1, name = , v =   br label %2, !llvm.loop !8
  ret i32 %.01, type: 1, name = , v =   ret i32 %.01
NONONONO NONOMONO return bottom
visiting inst:   %6 = srem i32 %5, 7
NONONONO NONOMONO return bottom
visiting inst:   br i1 %3, label %4, label %17
NONONONO NONOMONO return bottom
visiting inst:   %7 = add nsw i32 3, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %.01, %4 ], [ %.1, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.1 = phi i32 [ %15, %13 ], [ %8, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.02 = phi i32 [ %14, %13 ], [ %.01, %.preheader ]
0,incoming:   %14 = mul nsw i32 %.02, 3
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.01 = phi i32 [ 1, %1 ], [ %.2, %16 ]
MMMMMMMMMMnewtype = 1
no constant

Running nsieve-bits...
[100%] Built target UnitProject
visiting inst:   %3 = udiv i32 40960000, 8
binaryOp const!!
visiting inst:   %4 = zext i32 %3 to i64
NONONONO NONOMONO return bottom
visiting inst:   %5 = add i64 %4, 4
NONONONO NONOMONO return bottom
visiting inst:   %6 = call noalias ptr @malloc(i64 noundef %5) #5
NONONONO NONOMONO return bottom
visiting inst:   %7 = icmp ne ptr %6, null
NONONONO NONOMONO return bottom
visiting inst:   br i1 %7, label %.preheader, label %62
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %7, label %.preheader, label %62
ffffffflowwl succ pushed:   br label %8
ffffffflowwl inst pushed:   br i1 %7, label %.preheader, label %62
ffffffflowwl succ pushed:   %.0 = phi i32 [ 0, %61 ], [ 1, %2 ]
visit phi inst:   %.0 = phi i32 [ 0, %61 ], [ 1, %2 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %.0
ffffffflowwl succ pushed: null!
visiting inst:   br label %8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %8
ffffffflowwl succ pushed:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
visit phi inst:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
0,incoming:   %60 = add i32 %.03, 1
edge not in execflag!!
1,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %9 = icmp ule i32 %.03, 2
NONONONO NONOMONO return bottom
visiting inst:   br i1 %9, label %10, label %61
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %9, label %10, label %61
ffffffflowwl succ pushed:   %11 = lshr i32 40960000, %.03
ffffffflowwl inst pushed:   br i1 %9, label %10, label %61
ffffffflowwl succ pushed:   call void @free(ptr noundef %6) #6
visiting inst:   call void @free(ptr noundef %6) #6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @free(ptr noundef %6) #6
ffffffflowwl succ pushed:   br label %62
visiting inst:   br label %62
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %62
ffffffflowwl succ pushed:   %.0 = phi i32 [ 0, %61 ], [ 1, %2 ]
visit phi inst:   %.0 = phi i32 [ 0, %61 ], [ 1, %2 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   %11 = lshr i32 40960000, %.03
opInstr2:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
const phi 2 found to be a const!!
binaryOp const!!
visiting inst:   %12 = udiv i32 %11, 8
not in latcell, latcell:
15
  %3 = udiv i32 40960000, 8, type: 2, name = , v = i32 5120000
  %5 = add i64 %4, 4, type: 1, name = , v =   %5 = add i64 %4, 4
  %7 = icmp ne ptr %6, null, type: 1, name = , v =   %7 = icmp ne ptr %6, null
  %9 = icmp ule i32 %.03, 2, type: 1, name = , v =   %9 = icmp ule i32 %.03, 2
  %11 = lshr i32 40960000, %.03, type: 2, name = , v = i32 40960000
  %4 = zext i32 %3 to i64, type: 1, name = , v =   %4 = zext i32 %3 to i64
  %6 = call noalias ptr @malloc(i64 noundef %5) #5, type: 1, name = , v =   %6 = call noalias ptr @malloc(i64 noundef %5) #5
  br i1 %7, label %.preheader, label %62, type: 1, name = , v =   br i1 %7, label %.preheader, label %62
  %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ], type: 2, name = .03, v = i32 0
  br i1 %9, label %10, label %61, type: 1, name = , v =   br i1 %9, label %10, label %61
  br label %8, type: 1, name = , v =   br label %8
  call void @free(ptr noundef %6) #6, type: 1, name = , v =   call void @free(ptr noundef %6) #6
  br label %62, type: 1, name = , v =   br label %62
  %.0 = phi i32 [ 0, %61 ], [ 1, %2 ], type: 1, name = .0, v = i32 1
  ret i32 %.0, type: 1, name = , v =   ret i32 %.0
binaryOp const!!
visiting inst:   %13 = zext i32 %12 to i64
NONONONO NONOMONO return bottom
visiting inst:   %14 = add i64 %13, 4
NONONONO NONOMONO return bottom
visiting inst:   call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -1, i64 %14, i1 false)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -1, i64 %14, i1 false)
ffffffflowwl succ pushed:   br label %15
visiting inst:   br label %15
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %15
ffffffflowwl succ pushed:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
visit phi inst:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
0,incoming: i32 2
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %57 = add i32 %.04, 1
edge not in execflag!!
visit phi inst:   %.01 = phi i32 [ 0, %10 ], [ %.1, %56 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming:   %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ]
edge not in execflag!!
visiting inst:   %16 = icmp ule i32 %.04, %11
NONONONO NONOMONO return bottom
visiting inst:   br i1 %16, label %17, label %58
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %16, label %17, label %58
ffffffflowwl succ pushed:   %59 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %11, i32 noundef %.01)
ffffffflowwl inst pushed:   br i1 %16, label %17, label %58
ffffffflowwl succ pushed:   %18 = zext i32 %.04 to i64
visiting inst:   %18 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %19 = udiv i64 %18, 32
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds i32, ptr %6, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   %21 = load i32, ptr %20, align 4
NONONONO NONOMONO return bottom
visiting inst:   %22 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %23 = urem i64 %22, 32
NONONONO NONOMONO return bottom
visiting inst:   %24 = trunc i64 %23 to i32
NONONONO NONOMONO return bottom
visiting inst:   %25 = shl i32 1, %24
NONONONO NONOMONO return bottom
visiting inst:   %26 = and i32 %21, %25
NONONONO NONOMONO return bottom
visiting inst:   %27 = icmp ne i32 %26, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %27, label %28, label %56
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %27, label %28, label %56
ffffffflowwl succ pushed:   %29 = add i32 %.01, 1
ffffffflowwl inst pushed:   br i1 %27, label %28, label %56
ffffffflowwl succ pushed:   %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ]
visit phi inst:   %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 0, %10 ], [ %.1, %56 ]
MMMMMMMMMMnewtype = 0
no constant
!!!!! changed, added here
1,incoming:   %29 = add i32 %.01, 1
edge not in execflag!!
visiting inst:   %57 = add i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %15, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %15, !llvm.loop !8
ffffffflowwl succ pushed:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
visit phi inst:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
0,incoming: i32 2
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %57 = add i32 %.04, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %29 = add i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %10 ], [ %.1, %56 ]
NONONONO NONOMONO return bottom
visiting inst:   %30 = add i32 %.04, %.04
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %31
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %31
ffffffflowwl succ pushed:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
visit phi inst:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
0,incoming:   %30 = add i32 %.04, %.04
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming:   %55 = add i32 %.02, %.04
edge not in execflag!!
visiting inst:   %32 = icmp ule i32 %.02, %11
NONONONO NONOMONO return bottom
visiting inst:   br i1 %32, label %33, label %.loopexit
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %32, label %33, label %.loopexit
ffffffflowwl succ pushed:   %34 = zext i32 %.02 to i64
ffffffflowwl inst pushed:   br i1 %32, label %33, label %.loopexit
ffffffflowwl succ pushed:   br label %56
visiting inst:   br label %56
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %56
ffffffflowwl succ pushed:   %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ]
visit phi inst:   %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 0, %10 ], [ %.1, %56 ]
MMMMMMMMMMnewtype = 0
no constant
1,incoming:   %29 = add i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %34 = zext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = udiv i64 %34, 32
NONONONO NONOMONO return bottom
visiting inst:   %36 = getelementptr inbounds i32, ptr %6, i64 %35
NONONONO NONOMONO return bottom
visiting inst:   %37 = load i32, ptr %36, align 4
NONONONO NONOMONO return bottom
visiting inst:   %38 = zext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %39 = urem i64 %38, 32
NONONONO NONOMONO return bottom
visiting inst:   %40 = trunc i64 %39 to i32
NONONONO NONOMONO return bottom
visiting inst:   %41 = shl i32 1, %40
NONONONO NONOMONO return bottom
visiting inst:   %42 = and i32 %37, %41
NONONONO NONOMONO return bottom
visiting inst:   %43 = icmp ne i32 %42, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %43, label %44, label %54
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %43, label %44, label %54
ffffffflowwl succ pushed:   %45 = zext i32 %.02 to i64
ffffffflowwl inst pushed:   br i1 %43, label %44, label %54
ffffffflowwl succ pushed:   %55 = add i32 %.02, %.04
visiting inst:   %55 = add i32 %.02, %.04
opInstr1:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %31, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %31, !llvm.loop !6
ffffffflowwl succ pushed:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
visit phi inst:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
0,incoming:   %30 = add i32 %.04, %.04
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %55 = add i32 %.02, %.04
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %45 = zext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %46 = urem i64 %45, 32
NONONONO NONOMONO return bottom
visiting inst:   %47 = trunc i64 %46 to i32
NONONONO NONOMONO return bottom
visiting inst:   %48 = shl i32 1, %47
NONONONO NONOMONO return bottom
visiting inst:   %49 = zext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %50 = udiv i64 %49, 32
NONONONO NONOMONO return bottom
visiting inst:   %51 = getelementptr inbounds i32, ptr %6, i64 %50
NONONONO NONOMONO return bottom
visiting inst:   %52 = load i32, ptr %51, align 4
NONONONO NONOMONO return bottom
visiting inst:   %53 = xor i32 %52, %48
NONONONO NONOMONO return bottom
visiting inst:   store i32 %53, ptr %51, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %53, ptr %51, align 4
ffffffflowwl succ pushed:   br label %54
visiting inst:   br label %54
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %54
ffffffflowwl succ pushed:   %55 = add i32 %.02, %.04
visiting inst:   %59 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %11, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %60 = add i32 %.03, 1
opInstr1:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %8, !llvm.loop !9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %8, !llvm.loop !9
ffffffflowwl succ pushed:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
visit phi inst:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
0,incoming:   %60 = add i32 %.03, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   %9 = icmp ule i32 %.03, 2
NONONONO NONOMONO return bottom
visiting inst:   %11 = lshr i32 40960000, %.03
opInstr2:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %12 = udiv i32 %11, 8
not in latcell, latcell:
71
  %3 = udiv i32 40960000, 8, type: 2, name = , v = i32 5120000
  %5 = add i64 %4, 4, type: 1, name = , v =   %5 = add i64 %4, 4
  %7 = icmp ne ptr %6, null, type: 1, name = , v =   %7 = icmp ne ptr %6, null
  %16 = icmp ule i32 %.04, %11, type: 1, name = , v =   %16 = icmp ule i32 %.04, %11
  %9 = icmp ule i32 %.03, 2, type: 1, name = , v =   %9 = icmp ule i32 %.03, 2
  %11 = lshr i32 40960000, %.03, type: 1, name = , v =   %11 = lshr i32 40960000, %.03
  %59 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %11, i32 noundef %.01), type: 1, name = , v =   %59 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %11, i32 noundef %.01)
  %4 = zext i32 %3 to i64, type: 1, name = , v =   %4 = zext i32 %3 to i64
  %6 = call noalias ptr @malloc(i64 noundef %5) #5, type: 1, name = , v =   %6 = call noalias ptr @malloc(i64 noundef %5) #5
  br i1 %7, label %.preheader, label %62, type: 1, name = , v =   br i1 %7, label %.preheader, label %62
  %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ], type: 1, name = .03, v = i32 0
  br i1 %9, label %10, label %61, type: 1, name = , v =   br i1 %9, label %10, label %61
  %12 = udiv i32 %11, 8, type: 2, name = , v = i32 5120000
  %13 = zext i32 %12 to i64, type: 1, name = , v =   %13 = zext i32 %12 to i64
  %14 = add i64 %13, 4, type: 1, name = , v =   %14 = add i64 %13, 4
  call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -1, i64 %14, i1 false), type: 1, name = , v =   call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -1, i64 %14, i1 false)
  br label %15, type: 1, name = , v =   br label %15
  %.04 = phi i32 [ 2, %10 ], [ %57, %56 ], type: 1, name = .04, v = i32 2
  br i1 %16, label %17, label %58, type: 1, name = , v =   br i1 %16, label %17, label %58
  %18 = zext i32 %.04 to i64, type: 1, name = , v =   %18 = zext i32 %.04 to i64
  %19 = udiv i64 %18, 32, type: 1, name = , v =   %19 = udiv i64 %18, 32
  %20 = getelementptr inbounds i32, ptr %6, i64 %19, type: 1, name = , v =   %20 = getelementptr inbounds i32, ptr %6, i64 %19
  %21 = load i32, ptr %20, align 4, type: 1, name = , v =   %21 = load i32, ptr %20, align 4
  %22 = zext i32 %.04 to i64, type: 1, name = , v =   %22 = zext i32 %.04 to i64
  %23 = urem i64 %22, 32, type: 1, name = , v =   %23 = urem i64 %22, 32
  %24 = trunc i64 %23 to i32, type: 1, name = , v =   %24 = trunc i64 %23 to i32
  %25 = shl i32 1, %24, type: 1, name = , v =   %25 = shl i32 1, %24
  %26 = and i32 %21, %25, type: 1, name = , v =   %26 = and i32 %21, %25
  %27 = icmp ne i32 %26, 0, type: 1, name = , v =   %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %56, type: 1, name = , v =   br i1 %27, label %28, label %56
  %29 = add i32 %.01, 1, type: 1, name = , v =   %29 = add i32 %.01, 1
  %30 = add i32 %.04, %.04, type: 1, name = , v =   %30 = add i32 %.04, %.04
  br label %31, type: 1, name = , v =   br label %31
  %.02 = phi i32 [ %30, %28 ], [ %55, %54 ], type: 1, name = .02, v =   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
  %32 = icmp ule i32 %.02, %11, type: 1, name = , v =   %32 = icmp ule i32 %.02, %11
  br i1 %32, label %33, label %.loopexit, type: 1, name = , v =   br i1 %32, label %33, label %.loopexit
  %34 = zext i32 %.02 to i64, type: 1, name = , v =   %34 = zext i32 %.02 to i64
  %35 = udiv i64 %34, 32, type: 1, name = , v =   %35 = udiv i64 %34, 32
  %36 = getelementptr inbounds i32, ptr %6, i64 %35, type: 1, name = , v =   %36 = getelementptr inbounds i32, ptr %6, i64 %35
  %37 = load i32, ptr %36, align 4, type: 1, name = , v =   %37 = load i32, ptr %36, align 4
  %38 = zext i32 %.02 to i64, type: 1, name = , v =   %38 = zext i32 %.02 to i64
  %39 = urem i64 %38, 32, type: 1, name = , v =   %39 = urem i64 %38, 32
  %40 = trunc i64 %39 to i32, type: 1, name = , v =   %40 = trunc i64 %39 to i32
  %41 = shl i32 1, %40, type: 1, name = , v =   %41 = shl i32 1, %40
  %42 = and i32 %37, %41, type: 1, name = , v =   %42 = and i32 %37, %41
  %43 = icmp ne i32 %42, 0, type: 1, name = , v =   %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %54, type: 1, name = , v =   br i1 %43, label %44, label %54
  %45 = zext i32 %.02 to i64, type: 1, name = , v =   %45 = zext i32 %.02 to i64
  %46 = urem i64 %45, 32, type: 1, name = , v =   %46 = urem i64 %45, 32
  %47 = trunc i64 %46 to i32, type: 1, name = , v =   %47 = trunc i64 %46 to i32
  %48 = shl i32 1, %47, type: 1, name = , v =   %48 = shl i32 1, %47
  %49 = zext i32 %.02 to i64, type: 1, name = , v =   %49 = zext i32 %.02 to i64
  %50 = udiv i64 %49, 32, type: 1, name = , v =   %50 = udiv i64 %49, 32
  %51 = getelementptr inbounds i32, ptr %6, i64 %50, type: 1, name = , v =   %51 = getelementptr inbounds i32, ptr %6, i64 %50
  %52 = load i32, ptr %51, align 4, type: 1, name = , v =   %52 = load i32, ptr %51, align 4
  %53 = xor i32 %52, %48, type: 1, name = , v =   %53 = xor i32 %52, %48
  store i32 %53, ptr %51, align 4, type: 1, name = , v =   store i32 %53, ptr %51, align 4
  br label %54, type: 1, name = , v =   br label %54
  %55 = add i32 %.02, %.04, type: 1, name = , v =   %55 = add i32 %.02, %.04
  br label %31, !llvm.loop !6, type: 1, name = , v =   br label %31, !llvm.loop !6
  %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ], type: 1, name = .1, v =   %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ]
  br label %8, type: 1, name = , v =   br label %8
  %57 = add i32 %.04, 1, type: 2, name = , v = i32 3
  br label %15, !llvm.loop !8, type: 1, name = , v =   br label %15, !llvm.loop !8
  br label %56, type: 1, name = , v =   br label %56
  %60 = add i32 %.03, 1, type: 2, name = , v = i32 1
  br label %8, !llvm.loop !9, type: 1, name = , v =   br label %8, !llvm.loop !9
  call void @free(ptr noundef %6) #6, type: 1, name = , v =   call void @free(ptr noundef %6) #6
  br label %62, type: 1, name = , v =   br label %62
  %.0 = phi i32 [ 0, %61 ], [ 1, %2 ], type: 1, name = .0, v = i32 1
  ret i32 %.0, type: 1, name = , v =   ret i32 %.0
binaryOp const!!
visiting inst:   %16 = icmp ule i32 %.04, %11
NONONONO NONOMONO return bottom
visiting inst:   %32 = icmp ule i32 %.02, %11
NONONONO NONOMONO return bottom
visiting inst:   %59 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %11, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %60 = add i32 %.03, 1
opInstr1:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
0,incoming:   %60 = add i32 %.03, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %9 = icmp ule i32 %.03, 2
NONONONO NONOMONO return bottom
visiting inst:   %11 = lshr i32 40960000, %.03
opInstr2:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %60 = add i32 %.03, 1
opInstr1:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %9 = icmp ule i32 %.03, 2
NONONONO NONOMONO return bottom
visiting inst:   %11 = lshr i32 40960000, %.03
opInstr2:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %60 = add i32 %.03, 1
opInstr1:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
0,incoming:   %60 = add i32 %.03, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %9 = icmp ule i32 %.03, 2
NONONONO NONOMONO return bottom
visiting inst:   %11 = lshr i32 40960000, %.03
opInstr2:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %60 = add i32 %.03, 1
opInstr1:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %9 = icmp ule i32 %.03, 2
NONONONO NONOMONO return bottom
visiting inst:   %11 = lshr i32 40960000, %.03
opInstr2:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %60 = add i32 %.03, 1
opInstr1:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store i32 %53, ptr %51, align 4
NONONONO NONOMONO return bottom
visiting inst:   %53 = xor i32 %52, %48
NONONONO NONOMONO return bottom
visiting inst:   %52 = load i32, ptr %51, align 4
NONONONO NONOMONO return bottom
visiting inst:   store i32 %53, ptr %51, align 4
NONONONO NONOMONO return bottom
visiting inst:   %51 = getelementptr inbounds i32, ptr %6, i64 %50
NONONONO NONOMONO return bottom
visiting inst:   %50 = udiv i64 %49, 32
NONONONO NONOMONO return bottom
visiting inst:   %53 = xor i32 %52, %48
NONONONO NONOMONO return bottom
visiting inst:   %48 = shl i32 1, %47
NONONONO NONOMONO return bottom
visiting inst:   %47 = trunc i64 %46 to i32
NONONONO NONOMONO return bottom
visiting inst:   %46 = urem i64 %45, 32
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
0,incoming:   %30 = add i32 %.04, %.04
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %55 = add i32 %.02, %.04
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br i1 %43, label %44, label %54
NONONONO NONOMONO return bottom
visiting inst:   %43 = icmp ne i32 %42, 0
NONONONO NONOMONO return bottom
visiting inst:   %42 = and i32 %37, %41
NONONONO NONOMONO return bottom
visiting inst:   %41 = shl i32 1, %40
NONONONO NONOMONO return bottom
visiting inst:   %40 = trunc i64 %39 to i32
NONONONO NONOMONO return bottom
visiting inst:   %39 = urem i64 %38, 32
NONONONO NONOMONO return bottom
visiting inst:   %42 = and i32 %37, %41
NONONONO NONOMONO return bottom
visiting inst:   %37 = load i32, ptr %36, align 4
NONONONO NONOMONO return bottom
visiting inst:   %36 = getelementptr inbounds i32, ptr %6, i64 %35
NONONONO NONOMONO return bottom
visiting inst:   %35 = udiv i64 %34, 32
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %10 ], [ %.1, %56 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming:   %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ]
edge not in execflag!!
visiting inst:   br i1 %32, label %33, label %.loopexit
NONONONO NONOMONO return bottom
visiting inst:   %32 = icmp ule i32 %.02, %11
NONONONO NONOMONO return bottom
visiting inst:   %34 = zext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %38 = zext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %45 = zext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %49 = zext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %55 = add i32 %.02, %.04
opInstr1:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
0,incoming:   %30 = add i32 %.04, %.04
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %55 = add i32 %.02, %.04
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ]
0,incoming:   %.01 = phi i32 [ 0, %10 ], [ %.1, %56 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %29 = add i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %16 = icmp ule i32 %.04, %11
NONONONO NONOMONO return bottom
visiting inst:   %18 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %30 = add i32 %.04, %.04
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %30 = add i32 %.04, %.04
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %55 = add i32 %.02, %.04
opInstr1:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %57 = add i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
0,incoming: i32 2
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %57 = add i32 %.04, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %16 = icmp ule i32 %.04, %11
NONONONO NONOMONO return bottom
visiting inst:   %18 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %30 = add i32 %.04, %.04
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %30 = add i32 %.04, %.04
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %55 = add i32 %.02, %.04
opInstr1:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %57 = add i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
0,incoming: i32 2
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %57 = add i32 %.04, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %16 = icmp ule i32 %.04, %11
NONONONO NONOMONO return bottom
visiting inst:   %18 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %30 = add i32 %.04, %.04
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %30 = add i32 %.04, %.04
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %55 = add i32 %.02, %.04
opInstr1:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %57 = add i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp ule i32 %.04, %11
NONONONO NONOMONO return bottom
visiting inst:   %18 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %30 = add i32 %.04, %.04
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %30 = add i32 %.04, %.04
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %55 = add i32 %.02, %.04
opInstr1:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %57 = add i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %10 ], [ %.1, %56 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming:   %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ]
edge not in execflag!!
visiting inst:   br i1 %27, label %28, label %56
NONONONO NONOMONO return bottom
visiting inst:   %27 = icmp ne i32 %26, 0
NONONONO NONOMONO return bottom
visiting inst:   %26 = and i32 %21, %25
NONONONO NONOMONO return bottom
visiting inst:   %25 = shl i32 1, %24
NONONONO NONOMONO return bottom
visiting inst:   %24 = trunc i64 %23 to i32
NONONONO NONOMONO return bottom
visiting inst:   %23 = urem i64 %22, 32
NONONONO NONOMONO return bottom
visiting inst:   %26 = and i32 %21, %25
NONONONO NONOMONO return bottom
visiting inst:   %21 = load i32, ptr %20, align 4
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds i32, ptr %6, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   %19 = udiv i64 %18, 32
NONONONO NONOMONO return bottom
visiting inst:   br i1 %16, label %17, label %58
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp ule i32 %.04, %11
NONONONO NONOMONO return bottom
visiting inst:   %18 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = zext i32 %.04 to i64
NONONONO NONOMONO return bottom
visiting inst:   %30 = add i32 %.04, %.04
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %30 = add i32 %.04, %.04
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %55 = add i32 %.02, %.04
opInstr1:   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %57 = add i32 %.04, 1
opInstr1:   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -1, i64 %14, i1 false)
NONONONO NONOMONO return bottom
visiting inst:   %14 = add i64 %13, 4
NONONONO NONOMONO return bottom
visiting inst:   %13 = zext i32 %12 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = udiv i32 %11, 8
not in latcell, latcell:
71
  %3 = udiv i32 40960000, 8, type: 2, name = , v = i32 5120000
  %5 = add i64 %4, 4, type: 1, name = , v =   %5 = add i64 %4, 4
  %7 = icmp ne ptr %6, null, type: 1, name = , v =   %7 = icmp ne ptr %6, null
  %16 = icmp ule i32 %.04, %11, type: 1, name = , v =   %16 = icmp ule i32 %.04, %11
  %9 = icmp ule i32 %.03, 2, type: 1, name = , v =   %9 = icmp ule i32 %.03, 2
  %11 = lshr i32 40960000, %.03, type: 1, name = , v =   %11 = lshr i32 40960000, %.03
  %59 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %11, i32 noundef %.01), type: 1, name = , v =   %59 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %11, i32 noundef %.01)
  %4 = zext i32 %3 to i64, type: 1, name = , v =   %4 = zext i32 %3 to i64
  %6 = call noalias ptr @malloc(i64 noundef %5) #5, type: 1, name = , v =   %6 = call noalias ptr @malloc(i64 noundef %5) #5
  br i1 %7, label %.preheader, label %62, type: 1, name = , v =   br i1 %7, label %.preheader, label %62
  %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ], type: 1, name = .03, v = i32 0
  br i1 %9, label %10, label %61, type: 1, name = , v =   br i1 %9, label %10, label %61
  %12 = udiv i32 %11, 8, type: 2, name = , v = i32 5120000
  %13 = zext i32 %12 to i64, type: 1, name = , v =   %13 = zext i32 %12 to i64
  %14 = add i64 %13, 4, type: 1, name = , v =   %14 = add i64 %13, 4
  call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -1, i64 %14, i1 false), type: 1, name = , v =   call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -1, i64 %14, i1 false)
  br label %15, type: 1, name = , v =   br label %15
  %.04 = phi i32 [ 2, %10 ], [ %57, %56 ], type: 1, name = .04, v =   %.04 = phi i32 [ 2, %10 ], [ %57, %56 ]
  br i1 %16, label %17, label %58, type: 1, name = , v =   br i1 %16, label %17, label %58
  %18 = zext i32 %.04 to i64, type: 1, name = , v =   %18 = zext i32 %.04 to i64
  %19 = udiv i64 %18, 32, type: 1, name = , v =   %19 = udiv i64 %18, 32
  %20 = getelementptr inbounds i32, ptr %6, i64 %19, type: 1, name = , v =   %20 = getelementptr inbounds i32, ptr %6, i64 %19
  %21 = load i32, ptr %20, align 4, type: 1, name = , v =   %21 = load i32, ptr %20, align 4
  %22 = zext i32 %.04 to i64, type: 1, name = , v =   %22 = zext i32 %.04 to i64
  %23 = urem i64 %22, 32, type: 1, name = , v =   %23 = urem i64 %22, 32
  %24 = trunc i64 %23 to i32, type: 1, name = , v =   %24 = trunc i64 %23 to i32
  %25 = shl i32 1, %24, type: 1, name = , v =   %25 = shl i32 1, %24
  %26 = and i32 %21, %25, type: 1, name = , v =   %26 = and i32 %21, %25
  %27 = icmp ne i32 %26, 0, type: 1, name = , v =   %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %56, type: 1, name = , v =   br i1 %27, label %28, label %56
  %29 = add i32 %.01, 1, type: 1, name = , v =   %29 = add i32 %.01, 1
  %30 = add i32 %.04, %.04, type: 1, name = , v =   %30 = add i32 %.04, %.04
  br label %31, type: 1, name = , v =   br label %31
  %.02 = phi i32 [ %30, %28 ], [ %55, %54 ], type: 1, name = .02, v =   %.02 = phi i32 [ %30, %28 ], [ %55, %54 ]
  %32 = icmp ule i32 %.02, %11, type: 1, name = , v =   %32 = icmp ule i32 %.02, %11
  br i1 %32, label %33, label %.loopexit, type: 1, name = , v =   br i1 %32, label %33, label %.loopexit
  %34 = zext i32 %.02 to i64, type: 1, name = , v =   %34 = zext i32 %.02 to i64
  %35 = udiv i64 %34, 32, type: 1, name = , v =   %35 = udiv i64 %34, 32
  %36 = getelementptr inbounds i32, ptr %6, i64 %35, type: 1, name = , v =   %36 = getelementptr inbounds i32, ptr %6, i64 %35
  %37 = load i32, ptr %36, align 4, type: 1, name = , v =   %37 = load i32, ptr %36, align 4
  %38 = zext i32 %.02 to i64, type: 1, name = , v =   %38 = zext i32 %.02 to i64
  %39 = urem i64 %38, 32, type: 1, name = , v =   %39 = urem i64 %38, 32
  %40 = trunc i64 %39 to i32, type: 1, name = , v =   %40 = trunc i64 %39 to i32
  %41 = shl i32 1, %40, type: 1, name = , v =   %41 = shl i32 1, %40
  %42 = and i32 %37, %41, type: 1, name = , v =   %42 = and i32 %37, %41
  %43 = icmp ne i32 %42, 0, type: 1, name = , v =   %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %54, type: 1, name = , v =   br i1 %43, label %44, label %54
  %45 = zext i32 %.02 to i64, type: 1, name = , v =   %45 = zext i32 %.02 to i64
  %46 = urem i64 %45, 32, type: 1, name = , v =   %46 = urem i64 %45, 32
  %47 = trunc i64 %46 to i32, type: 1, name = , v =   %47 = trunc i64 %46 to i32
  %48 = shl i32 1, %47, type: 1, name = , v =   %48 = shl i32 1, %47
  %49 = zext i32 %.02 to i64, type: 1, name = , v =   %49 = zext i32 %.02 to i64
  %50 = udiv i64 %49, 32, type: 1, name = , v =   %50 = udiv i64 %49, 32
  %51 = getelementptr inbounds i32, ptr %6, i64 %50, type: 1, name = , v =   %51 = getelementptr inbounds i32, ptr %6, i64 %50
  %52 = load i32, ptr %51, align 4, type: 1, name = , v =   %52 = load i32, ptr %51, align 4
  %53 = xor i32 %52, %48, type: 1, name = , v =   %53 = xor i32 %52, %48
  store i32 %53, ptr %51, align 4, type: 1, name = , v =   store i32 %53, ptr %51, align 4
  br label %54, type: 1, name = , v =   br label %54
  %55 = add i32 %.02, %.04, type: 1, name = , v =   %55 = add i32 %.02, %.04
  br label %31, !llvm.loop !6, type: 1, name = , v =   br label %31, !llvm.loop !6
  %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ], type: 1, name = .1, v =   %.1 = phi i32 [ %.01, %17 ], [ %29, %.loopexit ]
  br label %8, type: 1, name = , v =   br label %8
  %57 = add i32 %.04, 1, type: 1, name = , v =   %57 = add i32 %.04, 1
  br label %15, !llvm.loop !8, type: 1, name = , v =   br label %15, !llvm.loop !8
  br label %56, type: 1, name = , v =   br label %56
  %60 = add i32 %.03, 1, type: 1, name = , v =   %60 = add i32 %.03, 1
  br label %8, !llvm.loop !9, type: 1, name = , v =   br label %8, !llvm.loop !9
  call void @free(ptr noundef %6) #6, type: 1, name = , v =   call void @free(ptr noundef %6) #6
  br label %62, type: 1, name = , v =   br label %62
  %.0 = phi i32 [ 0, %61 ], [ 1, %2 ], type: 1, name = .0, v = i32 1
  ret i32 %.0, type: 1, name = , v =   ret i32 %.0
binaryOp const!!
visiting inst:   %16 = icmp ule i32 %.04, %11
NONONONO NONOMONO return bottom
visiting inst:   %32 = icmp ule i32 %.02, %11
NONONONO NONOMONO return bottom
visiting inst:   %59 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %11, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %9, label %10, label %61
NONONONO NONOMONO return bottom
visiting inst:   %9 = icmp ule i32 %.03, 2
NONONONO NONOMONO return bottom
visiting inst:   %11 = lshr i32 40960000, %.03
opInstr2:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %60 = add i32 %.03, 1
opInstr1:   %.03 = phi i32 [ %60, %58 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %7, label %.preheader, label %62
NONONONO NONOMONO return bottom
visiting inst:   %7 = icmp ne ptr %6, null
NONONONO NONOMONO return bottom
visiting inst:   call void @llvm.memset.p0.i64(ptr align 4 %6, i8 -1, i64 %14, i1 false)
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds i32, ptr %6, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   %36 = getelementptr inbounds i32, ptr %6, i64 %35
NONONONO NONOMONO return bottom
visiting inst:   %51 = getelementptr inbounds i32, ptr %6, i64 %50
NONONONO NONOMONO return bottom
visiting inst:   call void @free(ptr noundef %6) #6
NONONONO NONOMONO return bottom
visiting inst:   %6 = call noalias ptr @malloc(i64 noundef %5) #5
NONONONO NONOMONO return bottom
visiting inst:   %5 = add i64 %4, 4
NONONONO NONOMONO return bottom
visiting inst:   %4 = zext i32 %3 to i64
NONONONO NONOMONO return bottom
in replacing, inst   %3 = udiv i32 40960000, 8 is const and replaced
in replacing, inst   %12 = udiv i32 %11, 8 is const and replaced

Running spectral-norm...
[100%] Built target UnitProject
visiting inst:   %3 = add nsw i32 %0, %1
NONONONO NONOMONO return bottom
visiting inst:   %4 = add nsw i32 %0, %1
NONONONO NONOMONO return bottom
visiting inst:   %5 = add nsw i32 %4, 1
NONONONO NONOMONO return bottom
visiting inst:   %6 = mul nsw i32 %3, %5
NONONONO NONOMONO return bottom
visiting inst:   %7 = sdiv i32 %6, 2
NONONONO NONOMONO return bottom
visiting inst:   %8 = add nsw i32 %7, %0
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %8, 1
NONONONO NONOMONO return bottom
visiting inst:   %10 = sitofp i32 %9 to double
NONONONO NONOMONO return bottom
visiting inst:   %11 = fdiv double 1.000000e+00, %10
NONONONO NONOMONO return bottom
visiting inst:   ret double %11
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret double %11
ffffffflowwl succ pushed: null!
visiting inst:   ret double %11
NONONONO NONOMONO return bottom
visiting inst:   %11 = fdiv double 1.000000e+00, %10
NONONONO NONOMONO return bottom
visiting inst:   %10 = sitofp i32 %9 to double
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %8, 1
NONONONO NONOMONO return bottom
visiting inst:   %8 = add nsw i32 %7, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sdiv i32 %6, 2
NONONONO NONOMONO return bottom
visiting inst:   %6 = mul nsw i32 %3, %5
NONONONO NONOMONO return bottom
visiting inst:   %5 = add nsw i32 %4, 1
NONONONO NONOMONO return bottom
visiting inst:   %6 = mul nsw i32 %3, %5
NONONONO NONOMONO return bottom
visiting inst:   br label %4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %4
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %22 = add nsw i32 %.01, 1
edge not in execflag!!
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %5, label %6, label %23
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %5, label %6, label %23
ffffffflowwl succ pushed:   %7 = sext i32 %.01 to i64
ffffffflowwl inst pushed:   br i1 %5, label %6, label %23
ffffffflowwl succ pushed:   ret void
visiting inst:   ret void
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret void
ffffffflowwl succ pushed: null!
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %8 = getelementptr inbounds double, ptr %2, i64 %7
NONONONO NONOMONO return bottom
visiting inst:   store double 0.000000e+00, ptr %8, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double 0.000000e+00, ptr %8, align 8
ffffffflowwl succ pushed:   br label %9
visiting inst:   br label %9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %9
ffffffflowwl succ pushed:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
visit phi inst:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %20 = add nsw i32 %.0, 1
edge not in execflag!!
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %10, label %11, label %21
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %10, label %11, label %21
ffffffflowwl succ pushed:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
ffffffflowwl inst pushed:   br i1 %10, label %11, label %21
ffffffflowwl succ pushed:   %22 = add nsw i32 %.01, 1
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %4, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %4, !llvm.loop !8
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %22 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %14 = getelementptr inbounds double, ptr %1, i64 %13
NONONONO NONOMONO return bottom
visiting inst:   %15 = load double, ptr %14, align 8
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds double, ptr %2, i64 %16
NONONONO NONOMONO return bottom
visiting inst:   %18 = load double, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = call double @llvm.fmuladd.f64(double %12, double %15, double %18)
NONONONO NONOMONO return bottom
visiting inst:   store double %19, ptr %17, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %19, ptr %17, align 8
ffffffflowwl succ pushed:   %20 = add nsw i32 %.0, 1
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %9, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %9, !llvm.loop !6
ffffffflowwl succ pushed:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
visit phi inst:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %20 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %20 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %20 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store double %19, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = call double @llvm.fmuladd.f64(double %12, double %15, double %18)
NONONONO NONOMONO return bottom
visiting inst:   %18 = load double, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %19, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds double, ptr %2, i64 %16
NONONONO NONOMONO return bottom
visiting inst:   %19 = call double @llvm.fmuladd.f64(double %12, double %15, double %18)
NONONONO NONOMONO return bottom
visiting inst:   %15 = load double, ptr %14, align 8
NONONONO NONOMONO return bottom
visiting inst:   %14 = getelementptr inbounds double, ptr %1, i64 %13
NONONONO NONOMONO return bottom
visiting inst:   %19 = call double @llvm.fmuladd.f64(double %12, double %15, double %18)
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %22 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %22 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %10, label %11, label %21
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store double 0.000000e+00, ptr %8, align 8
NONONONO NONOMONO return bottom
visiting inst:   %8 = getelementptr inbounds double, ptr %2, i64 %7
NONONONO NONOMONO return bottom
visiting inst:   br i1 %5, label %6, label %23
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.01, i32 noundef %.0)
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %4
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %22 = add nsw i32 %.01, 1
edge not in execflag!!
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %5, label %6, label %23
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %5, label %6, label %23
ffffffflowwl succ pushed:   %7 = sext i32 %.01 to i64
ffffffflowwl inst pushed:   br i1 %5, label %6, label %23
ffffffflowwl succ pushed:   ret void
visiting inst:   ret void
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret void
ffffffflowwl succ pushed: null!
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %8 = getelementptr inbounds double, ptr %2, i64 %7
NONONONO NONOMONO return bottom
visiting inst:   store double 0.000000e+00, ptr %8, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double 0.000000e+00, ptr %8, align 8
ffffffflowwl succ pushed:   br label %9
visiting inst:   br label %9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %9
ffffffflowwl succ pushed:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
visit phi inst:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %20 = add nsw i32 %.0, 1
edge not in execflag!!
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %10, label %11, label %21
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %10, label %11, label %21
ffffffflowwl succ pushed:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
ffffffflowwl inst pushed:   br i1 %10, label %11, label %21
ffffffflowwl succ pushed:   %22 = add nsw i32 %.01, 1
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %4, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %4, !llvm.loop !8
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %22 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %14 = getelementptr inbounds double, ptr %1, i64 %13
NONONONO NONOMONO return bottom
visiting inst:   %15 = load double, ptr %14, align 8
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds double, ptr %2, i64 %16
NONONONO NONOMONO return bottom
visiting inst:   %18 = load double, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = call double @llvm.fmuladd.f64(double %12, double %15, double %18)
NONONONO NONOMONO return bottom
visiting inst:   store double %19, ptr %17, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %19, ptr %17, align 8
ffffffflowwl succ pushed:   %20 = add nsw i32 %.0, 1
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %9, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %9, !llvm.loop !6
ffffffflowwl succ pushed:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
visit phi inst:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %20 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %20 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %20 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store double %19, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = call double @llvm.fmuladd.f64(double %12, double %15, double %18)
NONONONO NONOMONO return bottom
visiting inst:   %18 = load double, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %19, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds double, ptr %2, i64 %16
NONONONO NONOMONO return bottom
visiting inst:   %19 = call double @llvm.fmuladd.f64(double %12, double %15, double %18)
NONONONO NONOMONO return bottom
visiting inst:   %15 = load double, ptr %14, align 8
NONONONO NONOMONO return bottom
visiting inst:   %14 = getelementptr inbounds double, ptr %1, i64 %13
NONONONO NONOMONO return bottom
visiting inst:   %19 = call double @llvm.fmuladd.f64(double %12, double %15, double %18)
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %22 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %22 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %10, label %11, label %21
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %6 ], [ %20, %11 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store double 0.000000e+00, ptr %8, align 8
NONONONO NONOMONO return bottom
visiting inst:   %8 = getelementptr inbounds double, ptr %2, i64 %7
NONONONO NONOMONO return bottom
visiting inst:   br i1 %5, label %6, label %23
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @eval_A(i32 noundef %.0, i32 noundef %.01)
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %22, %21 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %4 = zext i32 %0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %5 = call ptr @llvm.stacksave()
NONONONO NONOMONO return bottom
visiting inst:   %6 = alloca double, i64 %4, align 16
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_A_times_u(i32 noundef %0, ptr noundef %1, ptr noundef %6)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @eval_A_times_u(i32 noundef %0, ptr noundef %1, ptr noundef %6)
ffffffflowwl succ pushed:   call void @eval_At_times_u(i32 noundef %0, ptr noundef %6, ptr noundef %2)
visiting inst:   call void @eval_At_times_u(i32 noundef %0, ptr noundef %6, ptr noundef %2)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @eval_At_times_u(i32 noundef %0, ptr noundef %6, ptr noundef %2)
ffffffflowwl succ pushed:   call void @llvm.stackrestore(ptr %5)
visiting inst:   call void @llvm.stackrestore(ptr %5)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @llvm.stackrestore(ptr %5)
ffffffflowwl succ pushed:   ret void
visiting inst:   ret void
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret void
ffffffflowwl succ pushed: null!
visiting inst:   call void @eval_A_times_u(i32 noundef %0, ptr noundef %1, ptr noundef %6)
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_At_times_u(i32 noundef %0, ptr noundef %6, ptr noundef %2)
NONONONO NONOMONO return bottom
visiting inst:   call void @llvm.stackrestore(ptr %5)
NONONONO NONOMONO return bottom
visiting inst:   %6 = alloca double, i64 %4, align 16
NONONONO NONOMONO return bottom
visiting inst:   %3 = icmp eq i32 %0, 2
NONONONO NONOMONO return bottom
visiting inst:   br i1 %3, label %4, label %8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %3, label %4, label %8
ffffffflowwl succ pushed:   %9 = phi i32 [ %7, %4 ], [ 2000, %2 ]
ffffffflowwl inst pushed:   br i1 %3, label %4, label %8
ffffffflowwl succ pushed:   %5 = getelementptr inbounds ptr, ptr %1, i64 1
visiting inst:   %5 = getelementptr inbounds ptr, ptr %1, i64 1
NONONONO NONOMONO return bottom
visiting inst:   %6 = load ptr, ptr %5, align 8
NONONONO NONOMONO return bottom
visiting inst:   %7 = call i32 @atoi(ptr noundef %6) #6
NONONONO NONOMONO return bottom
visiting inst:   br label %8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %8
ffffffflowwl succ pushed:   %9 = phi i32 [ %7, %4 ], [ 2000, %2 ]
visit phi inst:   %9 = phi i32 [ %7, %4 ], [ 2000, %2 ]
0,incoming:   %7 = call i32 @atoi(ptr noundef %6) #6
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 2000
edge not in execflag!!
visiting inst:   %10 = zext i32 %9 to i64
NONONONO NONOMONO return bottom
visiting inst:   %11 = call ptr @llvm.stacksave()
NONONONO NONOMONO return bottom
visiting inst:   %12 = alloca double, i64 %10, align 16
NONONONO NONOMONO return bottom
visiting inst:   %13 = zext i32 %9 to i64
NONONONO NONOMONO return bottom
visiting inst:   %14 = alloca double, i64 %13, align 16
NONONONO NONOMONO return bottom
visiting inst:   br label %15
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %15
ffffffflowwl succ pushed:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
visit phi inst:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %20 = add nsw i32 %.02, 1
edge not in execflag!!
visiting inst:   %16 = icmp slt i32 %.02, %9
NONONONO NONOMONO return bottom
visiting inst:   br i1 %16, label %17, label %.preheader1
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %16, label %17, label %.preheader1
ffffffflowwl succ pushed:   %18 = sext i32 %.02 to i64
ffffffflowwl inst pushed:   br i1 %16, label %17, label %.preheader1
ffffffflowwl succ pushed:   br label %21
visiting inst:   br label %21
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %21
ffffffflowwl succ pushed:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
visit phi inst:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
0,incoming:   %24 = add nsw i32 %.1, 1
edge not in execflag!!
1,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %22 = icmp slt i32 %.1, 10
NONONONO NONOMONO return bottom
visiting inst:   br i1 %22, label %23, label %.preheader
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %22, label %23, label %.preheader
ffffffflowwl succ pushed:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %12, ptr noundef %14)
ffffffflowwl inst pushed:   br i1 %22, label %23, label %.preheader
ffffffflowwl succ pushed:   br label %25
visiting inst:   br label %25
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %25
ffffffflowwl succ pushed:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
visit phi inst:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
0,incoming:   %42 = add nsw i32 %.2, 1
edge not in execflag!!
1,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visit phi inst:   %.01 = phi double [ %34, %27 ], [ 0.000000e+00, %.preheader ]
0,incoming:   %34 = call double @llvm.fmuladd.f64(double %30, double %33, double %.01)
edge not in execflag!!
1,incoming: double 0.000000e+00
edge not in execflag!!
visit phi inst:   %.0 = phi double [ %41, %27 ], [ 0.000000e+00, %.preheader ]
0,incoming:   %41 = call double @llvm.fmuladd.f64(double %37, double %40, double %.0)
edge not in execflag!!
1,incoming: double 0.000000e+00
edge not in execflag!!
visiting inst:   %26 = icmp slt i32 %.2, %9
NONONONO NONOMONO return bottom
visiting inst:   br i1 %26, label %27, label %43
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %26, label %27, label %43
ffffffflowwl succ pushed:   %28 = sext i32 %.2 to i64
ffffffflowwl inst pushed:   br i1 %26, label %27, label %43
ffffffflowwl succ pushed:   %44 = fdiv double %.01, %.0
visiting inst:   %44 = fdiv double %.01, %.0
opInstr1:   %.01 = phi double [ %34, %27 ], [ 0.000000e+00, %.preheader ]
opInstr2:   %.0 = phi double [ %41, %27 ], [ 0.000000e+00, %.preheader ]
NONONONO NONOMONO return bottom
visiting inst:   %45 = call double @sqrt(double noundef %44) #7
NONONONO NONOMONO return bottom
visiting inst:   %46 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %45)
NONONONO NONOMONO return bottom
visiting inst:   call void @llvm.stackrestore(ptr %11)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @llvm.stackrestore(ptr %11)
ffffffflowwl succ pushed:   ret i32 0
visiting inst:   ret i32 0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 0
ffffffflowwl succ pushed: null!
visiting inst:   %28 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %29 = getelementptr inbounds double, ptr %12, i64 %28
NONONONO NONOMONO return bottom
visiting inst:   %30 = load double, ptr %29, align 8
NONONONO NONOMONO return bottom
visiting inst:   %31 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %32 = getelementptr inbounds double, ptr %14, i64 %31
NONONONO NONOMONO return bottom
visiting inst:   %33 = load double, ptr %32, align 8
NONONONO NONOMONO return bottom
visiting inst:   %34 = call double @llvm.fmuladd.f64(double %30, double %33, double %.01)
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %36 = getelementptr inbounds double, ptr %14, i64 %35
NONONONO NONOMONO return bottom
visiting inst:   %37 = load double, ptr %36, align 8
NONONONO NONOMONO return bottom
visiting inst:   %38 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %39 = getelementptr inbounds double, ptr %14, i64 %38
NONONONO NONOMONO return bottom
visiting inst:   %40 = load double, ptr %39, align 8
NONONONO NONOMONO return bottom
visiting inst:   %41 = call double @llvm.fmuladd.f64(double %37, double %40, double %.0)
NONONONO NONOMONO return bottom
visiting inst:   %42 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %25, !llvm.loop !9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %25, !llvm.loop !9
ffffffflowwl succ pushed:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
visit phi inst:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
0,incoming:   %42 = add nsw i32 %.2, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %12, ptr noundef %14)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %12, ptr noundef %14)
ffffffflowwl succ pushed:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %14, ptr noundef %12)
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %14, ptr noundef %12)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %14, ptr noundef %12)
ffffffflowwl succ pushed:   %24 = add nsw i32 %.1, 1
visiting inst:   %24 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %21, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %21, !llvm.loop !8
ffffffflowwl succ pushed:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
visit phi inst:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
0,incoming:   %24 = add nsw i32 %.1, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %19 = getelementptr inbounds double, ptr %12, i64 %18
NONONONO NONOMONO return bottom
visiting inst:   store double 1.000000e+00, ptr %19, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double 1.000000e+00, ptr %19, align 8
ffffffflowwl succ pushed:   %20 = add nsw i32 %.02, 1
visiting inst:   %20 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %15, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %15, !llvm.loop !6
ffffffflowwl succ pushed:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
visit phi inst:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %20 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visit phi inst:   %9 = phi i32 [ %7, %4 ], [ 2000, %2 ]
0,incoming:   %7 = call i32 @atoi(ptr noundef %6) #6
MMMMMMMMMMnewtype = 1
no constant
1,incoming: i32 2000
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %10 = zext i32 %9 to i64
NONONONO NONOMONO return bottom
visiting inst:   %13 = zext i32 %9 to i64
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp slt i32 %.02, %9
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %12, ptr noundef %14)
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %14, ptr noundef %12)
NONONONO NONOMONO return bottom
visiting inst:   %26 = icmp slt i32 %.2, %9
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp slt i32 %.02, %9
NONONONO NONOMONO return bottom
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %20 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %16 = icmp slt i32 %.02, %9
NONONONO NONOMONO return bottom
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %20 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %16 = icmp slt i32 %.02, %9
NONONONO NONOMONO return bottom
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp slt i32 %.02, %9
NONONONO NONOMONO return bottom
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store double 1.000000e+00, ptr %19, align 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = getelementptr inbounds double, ptr %12, i64 %18
NONONONO NONOMONO return bottom
visiting inst:   %22 = icmp slt i32 %.1, 10
NONONONO NONOMONO return bottom
visiting inst:   %24 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
0,incoming:   %24 = add nsw i32 %.1, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %22 = icmp slt i32 %.1, 10
NONONONO NONOMONO return bottom
visiting inst:   %24 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %22 = icmp slt i32 %.1, 10
NONONONO NONOMONO return bottom
visiting inst:   %24 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
0,incoming:   %24 = add nsw i32 %.1, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %22 = icmp slt i32 %.1, 10
NONONONO NONOMONO return bottom
visiting inst:   %24 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %22 = icmp slt i32 %.1, 10
NONONONO NONOMONO return bottom
visiting inst:   %24 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %26 = icmp slt i32 %.2, %9
NONONONO NONOMONO return bottom
visiting inst:   %28 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %31 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %38 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
0,incoming:   %42 = add nsw i32 %.2, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %26 = icmp slt i32 %.2, %9
NONONONO NONOMONO return bottom
visiting inst:   %28 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %31 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %38 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %26 = icmp slt i32 %.2, %9
NONONONO NONOMONO return bottom
visiting inst:   %28 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %31 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %38 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
0,incoming:   %42 = add nsw i32 %.2, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %26 = icmp slt i32 %.2, %9
NONONONO NONOMONO return bottom
visiting inst:   %28 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %31 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %38 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %26 = icmp slt i32 %.2, %9
NONONONO NONOMONO return bottom
visiting inst:   %28 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %31 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %38 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi double [ %41, %27 ], [ 0.000000e+00, %.preheader ]
0,incoming:   %41 = call double @llvm.fmuladd.f64(double %37, double %40, double %.0)
edge not in execflag!!
1,incoming: double 0.000000e+00
edge not in execflag!!
visiting inst:   %41 = call double @llvm.fmuladd.f64(double %37, double %40, double %.0)
NONONONO NONOMONO return bottom
visiting inst:   %40 = load double, ptr %39, align 8
NONONONO NONOMONO return bottom
visiting inst:   %39 = getelementptr inbounds double, ptr %14, i64 %38
NONONONO NONOMONO return bottom
visiting inst:   %41 = call double @llvm.fmuladd.f64(double %37, double %40, double %.0)
NONONONO NONOMONO return bottom
visiting inst:   %37 = load double, ptr %36, align 8
NONONONO NONOMONO return bottom
visiting inst:   %36 = getelementptr inbounds double, ptr %14, i64 %35
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi double [ %34, %27 ], [ 0.000000e+00, %.preheader ]
0,incoming:   %34 = call double @llvm.fmuladd.f64(double %30, double %33, double %.01)
edge not in execflag!!
1,incoming: double 0.000000e+00
edge not in execflag!!
visiting inst:   %34 = call double @llvm.fmuladd.f64(double %30, double %33, double %.01)
NONONONO NONOMONO return bottom
visiting inst:   %33 = load double, ptr %32, align 8
NONONONO NONOMONO return bottom
visiting inst:   %32 = getelementptr inbounds double, ptr %14, i64 %31
NONONONO NONOMONO return bottom
visiting inst:   %34 = call double @llvm.fmuladd.f64(double %30, double %33, double %.01)
NONONONO NONOMONO return bottom
visiting inst:   %30 = load double, ptr %29, align 8
NONONONO NONOMONO return bottom
visiting inst:   %29 = getelementptr inbounds double, ptr %12, i64 %28
NONONONO NONOMONO return bottom
visiting inst:   %46 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %45)
NONONONO NONOMONO return bottom
visiting inst:   %45 = call double @sqrt(double noundef %44) #7
NONONONO NONOMONO return bottom
visiting inst:   br i1 %26, label %27, label %43
NONONONO NONOMONO return bottom
visiting inst:   %26 = icmp slt i32 %.2, %9
NONONONO NONOMONO return bottom
visiting inst:   %28 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %31 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %38 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %42, %27 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %22, label %23, label %.preheader
NONONONO NONOMONO return bottom
visiting inst:   %22 = icmp slt i32 %.1, 10
NONONONO NONOMONO return bottom
visiting inst:   %24 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %24, %23 ], [ 0, %.preheader1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %16, label %17, label %.preheader1
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp slt i32 %.02, %9
NONONONO NONOMONO return bottom
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %8 ], [ %20, %17 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %12, ptr noundef %14)
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %14, ptr noundef %12)
NONONONO NONOMONO return bottom
visiting inst:   %32 = getelementptr inbounds double, ptr %14, i64 %31
NONONONO NONOMONO return bottom
visiting inst:   %36 = getelementptr inbounds double, ptr %14, i64 %35
NONONONO NONOMONO return bottom
visiting inst:   %39 = getelementptr inbounds double, ptr %14, i64 %38
NONONONO NONOMONO return bottom
visiting inst:   %14 = alloca double, i64 %13, align 16
NONONONO NONOMONO return bottom
visiting inst:   %19 = getelementptr inbounds double, ptr %12, i64 %18
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %12, ptr noundef %14)
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %14, ptr noundef %12)
NONONONO NONOMONO return bottom
visiting inst:   %29 = getelementptr inbounds double, ptr %12, i64 %28
NONONONO NONOMONO return bottom
visiting inst:   call void @llvm.stackrestore(ptr %11)
NONONONO NONOMONO return bottom
visiting inst:   %12 = alloca double, i64 %10, align 16
NONONONO NONOMONO return bottom
visiting inst:   %10 = zext i32 %9 to i64
NONONONO NONOMONO return bottom
visiting inst:   %13 = zext i32 %9 to i64
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp slt i32 %.02, %9
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %12, ptr noundef %14)
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %14, ptr noundef %12)
NONONONO NONOMONO return bottom
visiting inst:   %26 = icmp slt i32 %.2, %9
NONONONO NONOMONO return bottom
visit phi inst:   %9 = phi i32 [ %7, %4 ], [ 2000, %2 ]
0,incoming:   %7 = call i32 @atoi(ptr noundef %6) #6
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 2000
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %10 = zext i32 %9 to i64
NONONONO NONOMONO return bottom
visiting inst:   %13 = zext i32 %9 to i64
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp slt i32 %.02, %9
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %12, ptr noundef %14)
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %14, ptr noundef %12)
NONONONO NONOMONO return bottom
visiting inst:   %26 = icmp slt i32 %.2, %9
NONONONO NONOMONO return bottom
visiting inst:   %10 = zext i32 %9 to i64
NONONONO NONOMONO return bottom
visiting inst:   %13 = zext i32 %9 to i64
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp slt i32 %.02, %9
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %12, ptr noundef %14)
NONONONO NONOMONO return bottom
visiting inst:   call void @eval_AtA_times_u(i32 noundef %9, ptr noundef %14, ptr noundef %12)
NONONONO NONOMONO return bottom
visiting inst:   %26 = icmp slt i32 %.2, %9
NONONONO NONOMONO return bottom
visiting inst:   %7 = call i32 @atoi(ptr noundef %6) #6
NONONONO NONOMONO return bottom
visiting inst:   %6 = load ptr, ptr %5, align 8
NONONONO NONOMONO return bottom
visiting inst:   br i1 %3, label %4, label %8
NONONONO NONOMONO return bottom

Running matmul...
[100%] Built target UnitProject
visiting inst:   %7 = zext i32 %0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %8 = zext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %9 = zext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %10 = zext i32 %2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %11 = zext i32 %0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = zext i32 %2 to i64
NONONONO NONOMONO return bottom
visiting inst:   br label %13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %13
ffffffflowwl succ pushed:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
visit phi inst:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %50 = add nsw i32 %.02, 1
edge not in execflag!!
visiting inst:   %14 = icmp slt i32 %.02, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %14, label %.preheader, label %51
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %14, label %.preheader, label %51
ffffffflowwl succ pushed:   br label %15
ffffffflowwl inst pushed:   br i1 %14, label %.preheader, label %51
ffffffflowwl succ pushed:   ret void
visiting inst:   ret void
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret void
ffffffflowwl succ pushed: null!
visiting inst:   br label %15
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %15
ffffffflowwl succ pushed:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
visit phi inst:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
0,incoming:   %48 = add nsw i32 %.01, 1
edge not in execflag!!
1,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %16 = icmp slt i32 %.01, %2
NONONONO NONOMONO return bottom
visiting inst:   br i1 %16, label %17, label %49
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %16, label %17, label %49
ffffffflowwl succ pushed:   %18 = sext i32 %.02 to i64
ffffffflowwl inst pushed:   br i1 %16, label %17, label %49
ffffffflowwl succ pushed:   %50 = add nsw i32 %.02, 1
visiting inst:   %50 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %13, !llvm.loop !9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %13, !llvm.loop !9
ffffffflowwl succ pushed:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
visit phi inst:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %50 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %19 = mul nsw i64 %18, %12
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds i32, ptr %5, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   %21 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %22 = getelementptr inbounds i32, ptr %20, i64 %21
NONONONO NONOMONO return bottom
visiting inst:   store i32 0, ptr %22, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 0, ptr %22, align 4
ffffffflowwl succ pushed:   br label %23
visiting inst:   br label %23
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %23
ffffffflowwl succ pushed:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
visit phi inst:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %46 = add nsw i32 %.0, 1
edge not in execflag!!
visiting inst:   %24 = icmp slt i32 %.0, %1
NONONONO NONOMONO return bottom
visiting inst:   br i1 %24, label %25, label %47
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %24, label %25, label %47
ffffffflowwl succ pushed:   %26 = sext i32 %.02 to i64
ffffffflowwl inst pushed:   br i1 %24, label %25, label %47
ffffffflowwl succ pushed:   %48 = add nsw i32 %.01, 1
visiting inst:   %48 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %15, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %15, !llvm.loop !8
ffffffflowwl succ pushed:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
visit phi inst:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
0,incoming:   %48 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   %26 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %27 = mul nsw i64 %26, %8
NONONONO NONOMONO return bottom
visiting inst:   %28 = getelementptr inbounds i32, ptr %3, i64 %27
NONONONO NONOMONO return bottom
visiting inst:   %29 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %30 = getelementptr inbounds i32, ptr %28, i64 %29
NONONONO NONOMONO return bottom
visiting inst:   %31 = load i32, ptr %30, align 4
NONONONO NONOMONO return bottom
visiting inst:   %32 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %33 = mul nsw i64 %32, %10
NONONONO NONOMONO return bottom
visiting inst:   %34 = getelementptr inbounds i32, ptr %4, i64 %33
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %36 = getelementptr inbounds i32, ptr %34, i64 %35
NONONONO NONOMONO return bottom
visiting inst:   %37 = load i32, ptr %36, align 4
NONONONO NONOMONO return bottom
visiting inst:   %38 = mul nsw i32 %31, %37
NONONONO NONOMONO return bottom
visiting inst:   %39 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %40 = mul nsw i64 %39, %12
NONONONO NONOMONO return bottom
visiting inst:   %41 = getelementptr inbounds i32, ptr %5, i64 %40
NONONONO NONOMONO return bottom
visiting inst:   %42 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %43 = getelementptr inbounds i32, ptr %41, i64 %42
NONONONO NONOMONO return bottom
visiting inst:   %44 = load i32, ptr %43, align 4
NONONONO NONOMONO return bottom
visiting inst:   %45 = add nsw i32 %44, %38
NONONONO NONOMONO return bottom
visiting inst:   store i32 %45, ptr %43, align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 %45, ptr %43, align 4
ffffffflowwl succ pushed:   %46 = add nsw i32 %.0, 1
visiting inst:   %46 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %23, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %23, !llvm.loop !6
ffffffflowwl succ pushed:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
visit phi inst:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %46 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %24 = icmp slt i32 %.0, %1
NONONONO NONOMONO return bottom
visiting inst:   %29 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %32 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %46 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %46 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %24 = icmp slt i32 %.0, %1
NONONONO NONOMONO return bottom
visiting inst:   %29 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %32 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %46 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %46 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %24 = icmp slt i32 %.0, %1
NONONONO NONOMONO return bottom
visiting inst:   %29 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %32 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %46 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %24 = icmp slt i32 %.0, %1
NONONONO NONOMONO return bottom
visiting inst:   %29 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %32 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %46 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store i32 %45, ptr %43, align 4
NONONONO NONOMONO return bottom
visiting inst:   %45 = add nsw i32 %44, %38
NONONONO NONOMONO return bottom
visiting inst:   %44 = load i32, ptr %43, align 4
NONONONO NONOMONO return bottom
visiting inst:   store i32 %45, ptr %43, align 4
NONONONO NONOMONO return bottom
visiting inst:   %43 = getelementptr inbounds i32, ptr %41, i64 %42
NONONONO NONOMONO return bottom
visiting inst:   %43 = getelementptr inbounds i32, ptr %41, i64 %42
NONONONO NONOMONO return bottom
visiting inst:   %41 = getelementptr inbounds i32, ptr %5, i64 %40
NONONONO NONOMONO return bottom
visiting inst:   %40 = mul nsw i64 %39, %12
NONONONO NONOMONO return bottom
visiting inst:   %45 = add nsw i32 %44, %38
NONONONO NONOMONO return bottom
visiting inst:   %38 = mul nsw i32 %31, %37
NONONONO NONOMONO return bottom
visiting inst:   %37 = load i32, ptr %36, align 4
NONONONO NONOMONO return bottom
visiting inst:   %36 = getelementptr inbounds i32, ptr %34, i64 %35
NONONONO NONOMONO return bottom
visiting inst:   %36 = getelementptr inbounds i32, ptr %34, i64 %35
NONONONO NONOMONO return bottom
visiting inst:   %34 = getelementptr inbounds i32, ptr %4, i64 %33
NONONONO NONOMONO return bottom
visiting inst:   %33 = mul nsw i64 %32, %10
NONONONO NONOMONO return bottom
visiting inst:   %38 = mul nsw i32 %31, %37
NONONONO NONOMONO return bottom
visiting inst:   %31 = load i32, ptr %30, align 4
NONONONO NONOMONO return bottom
visiting inst:   %30 = getelementptr inbounds i32, ptr %28, i64 %29
NONONONO NONOMONO return bottom
visiting inst:   %30 = getelementptr inbounds i32, ptr %28, i64 %29
NONONONO NONOMONO return bottom
visiting inst:   %28 = getelementptr inbounds i32, ptr %3, i64 %27
NONONONO NONOMONO return bottom
visiting inst:   %27 = mul nsw i64 %26, %8
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp slt i32 %.01, %2
NONONONO NONOMONO return bottom
visiting inst:   %21 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %48 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
0,incoming:   %48 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %16 = icmp slt i32 %.01, %2
NONONONO NONOMONO return bottom
visiting inst:   %21 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %48 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp slt i32 %.01, %2
NONONONO NONOMONO return bottom
visiting inst:   %21 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %48 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
0,incoming:   %48 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %16 = icmp slt i32 %.01, %2
NONONONO NONOMONO return bottom
visiting inst:   %21 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %48 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp slt i32 %.01, %2
NONONONO NONOMONO return bottom
visiting inst:   %21 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %48 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %24, label %25, label %47
NONONONO NONOMONO return bottom
visiting inst:   %24 = icmp slt i32 %.0, %1
NONONONO NONOMONO return bottom
visiting inst:   %29 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %32 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %46 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %17 ], [ %46, %25 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store i32 0, ptr %22, align 4
NONONONO NONOMONO return bottom
visiting inst:   %22 = getelementptr inbounds i32, ptr %20, i64 %21
NONONONO NONOMONO return bottom
visiting inst:   %22 = getelementptr inbounds i32, ptr %20, i64 %21
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds i32, ptr %5, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   %19 = mul nsw i64 %18, %12
NONONONO NONOMONO return bottom
visiting inst:   %14 = icmp slt i32 %.02, %0
NONONONO NONOMONO return bottom
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %26 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %39 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %50 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %50 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %14 = icmp slt i32 %.02, %0
NONONONO NONOMONO return bottom
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %26 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %39 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %50 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %50 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %14 = icmp slt i32 %.02, %0
NONONONO NONOMONO return bottom
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %26 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %39 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %50 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %14 = icmp slt i32 %.02, %0
NONONONO NONOMONO return bottom
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %26 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %39 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %50 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %16, label %17, label %49
NONONONO NONOMONO return bottom
visiting inst:   %16 = icmp slt i32 %.01, %2
NONONONO NONOMONO return bottom
visiting inst:   %21 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %35 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %42 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %48 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ %48, %47 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %14, label %.preheader, label %51
NONONONO NONOMONO return bottom
visiting inst:   %14 = icmp slt i32 %.02, %0
NONONONO NONOMONO return bottom
visiting inst:   %18 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %26 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %39 = sext i32 %.02 to i64
NONONONO NONOMONO return bottom
visiting inst:   %50 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ 0, %6 ], [ %50, %49 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %19 = mul nsw i64 %18, %12
NONONONO NONOMONO return bottom
visiting inst:   %40 = mul nsw i64 %39, %12
NONONONO NONOMONO return bottom
visiting inst:   %33 = mul nsw i64 %32, %10
NONONONO NONOMONO return bottom
visiting inst:   %27 = mul nsw i64 %26, %8
NONONONO NONOMONO return bottom

Running random...
[100%] Built target UnitProject
visiting inst:   br label %2
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %2
ffffffflowwl succ pushed:   %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ]
visit phi inst:   %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %spec.select = select i1 %10, i32 %.01, i32 %8
edge not in execflag!!
visit phi inst:   %.0 = phi i32 [ %0, %1 ], [ %9, %4 ]
0,incoming: i32 %0
edge not in execflag!!
1,incoming:   %9 = add nsw i32 %.0, %8
edge not in execflag!!
visiting inst:   %3 = icmp slt i32 0, %.0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %3, label %4, label %11
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %3, label %4, label %11
ffffffflowwl succ pushed:   %5 = call i32 @rand() #2
ffffffflowwl inst pushed:   br i1 %3, label %4, label %11
ffffffflowwl succ pushed:   ret i32 %.01
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %.01
ffffffflowwl succ pushed: null!
visiting inst:   %5 = call i32 @rand() #2
NONONONO NONOMONO return bottom
visiting inst:   %6 = srem i32 %5, 4
NONONONO NONOMONO return bottom
visiting inst:   %7 = add nsw i32 1, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ]
const phi 2 found to be a const!!
binaryOp const!!
visiting inst:   %8 = sub nsw i32 %6, %7
not in latcell, latcell:
8
  %3 = icmp slt i32 0, %.0, type: 1, name = , v =   %3 = icmp slt i32 0, %.0
  %6 = srem i32 %5, 4, type: 1, name = , v =   %6 = srem i32 %5, 4
  %7 = add nsw i32 1, %.01, type: 2, name = , v = i32 2
  br label %2, type: 1, name = , v =   br label %2
  %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ], type: 2, name = .01, v = i32 1
  br i1 %3, label %4, label %11, type: 1, name = , v =   br i1 %3, label %4, label %11
  %5 = call i32 @rand() #2, type: 1, name = , v =   %5 = call i32 @rand() #2
  ret i32 %.01, type: 1, name = , v =   ret i32 %.01
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.0, %8
opInstr1:   %.0 = phi i32 [ %0, %1 ], [ %9, %4 ]
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %10, i32 %.01, i32 %8
NONONONO NONOMONO return bottom
visiting inst:   br label %2, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %2, !llvm.loop !6
ffffffflowwl succ pushed:   %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ]
visit phi inst:   %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %spec.select = select i1 %10, i32 %.01, i32 %8
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %7 = add nsw i32 1, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %8 = sub nsw i32 %6, %7
not in latcell, latcell:
13
  %3 = icmp slt i32 0, %.0, type: 1, name = , v =   %3 = icmp slt i32 0, %.0
  %6 = srem i32 %5, 4, type: 1, name = , v =   %6 = srem i32 %5, 4
  %7 = add nsw i32 1, %.01, type: 1, name = , v =   %7 = add nsw i32 1, %.01
  %8 = sub nsw i32 %6, %7, type: 1, name = , v =   %8 = sub nsw i32 %6, %7
  %9 = add nsw i32 %.0, %8, type: 1, name = , v =   %9 = add nsw i32 %.0, %8
  %spec.select = select i1 %10, i32 %.01, i32 %8, type: 1, name = spec.select, v =   %spec.select = select i1 %10, i32 %.01, i32 %8
  br label %2, type: 1, name = , v =   br label %2
  %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ], type: 1, name = .01, v = i32 1
  br i1 %3, label %4, label %11, type: 1, name = , v =   br i1 %3, label %4, label %11
  %5 = call i32 @rand() #2, type: 1, name = , v =   %5 = call i32 @rand() #2
  %10 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %10 = icmp sgt i32 %.01, 0
  br label %2, !llvm.loop !6, type: 1, name = , v =   br label %2, !llvm.loop !6
  ret i32 %.01, type: 1, name = , v =   ret i32 %.01
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %10, i32 %.01, i32 %8
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %spec.select = select i1 %10, i32 %.01, i32 %8
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %7 = add nsw i32 1, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %10, i32 %.01, i32 %8
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %10, i32 %.01, i32 %8
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ %0, %1 ], [ %9, %4 ]
0,incoming: i32 %0
edge not in execflag!!
1,incoming:   %9 = add nsw i32 %.0, %8
edge not in execflag!!
visiting inst:   %9 = add nsw i32 %.0, %8
opInstr1:   %.0 = phi i32 [ %0, %1 ], [ %9, %4 ]
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %10, i32 %.01, i32 %8
NONONONO NONOMONO return bottom
visiting inst:   %8 = sub nsw i32 %6, %7
not in latcell, latcell:
13
  %3 = icmp slt i32 0, %.0, type: 1, name = , v =   %3 = icmp slt i32 0, %.0
  %6 = srem i32 %5, 4, type: 1, name = , v =   %6 = srem i32 %5, 4
  %7 = add nsw i32 1, %.01, type: 1, name = , v =   %7 = add nsw i32 1, %.01
  %8 = sub nsw i32 %6, %7, type: 1, name = , v =   %8 = sub nsw i32 %6, %7
  %9 = add nsw i32 %.0, %8, type: 1, name = , v =   %9 = add nsw i32 %.0, %8
  %spec.select = select i1 %10, i32 %.01, i32 %8, type: 1, name = spec.select, v =   %spec.select = select i1 %10, i32 %.01, i32 %8
  br label %2, type: 1, name = , v =   br label %2
  %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ], type: 1, name = .01, v =   %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ]
  br i1 %3, label %4, label %11, type: 1, name = , v =   br i1 %3, label %4, label %11
  %5 = call i32 @rand() #2, type: 1, name = , v =   %5 = call i32 @rand() #2
  %10 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %10 = icmp sgt i32 %.01, 0
  br label %2, !llvm.loop !6, type: 1, name = , v =   br label %2, !llvm.loop !6
  ret i32 %.01, type: 1, name = , v =   ret i32 %.01
NONONONO NONOMONO return bottom
visiting inst:   %8 = sub nsw i32 %6, %7
not in latcell, latcell:
13
  %3 = icmp slt i32 0, %.0, type: 1, name = , v =   %3 = icmp slt i32 0, %.0
  %6 = srem i32 %5, 4, type: 1, name = , v =   %6 = srem i32 %5, 4
  %7 = add nsw i32 1, %.01, type: 1, name = , v =   %7 = add nsw i32 1, %.01
  %8 = sub nsw i32 %6, %7, type: 1, name = , v =   %8 = sub nsw i32 %6, %7
  %9 = add nsw i32 %.0, %8, type: 1, name = , v =   %9 = add nsw i32 %.0, %8
  %spec.select = select i1 %10, i32 %.01, i32 %8, type: 1, name = spec.select, v =   %spec.select = select i1 %10, i32 %.01, i32 %8
  br label %2, type: 1, name = , v =   br label %2
  %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ], type: 1, name = .01, v =   %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ]
  br i1 %3, label %4, label %11, type: 1, name = , v =   br i1 %3, label %4, label %11
  %5 = call i32 @rand() #2, type: 1, name = , v =   %5 = call i32 @rand() #2
  %10 = icmp sgt i32 %.01, 0, type: 1, name = , v =   %10 = icmp sgt i32 %.01, 0
  br label %2, !llvm.loop !6, type: 1, name = , v =   br label %2, !llvm.loop !6
  ret i32 %.01, type: 1, name = , v =   ret i32 %.01
NONONONO NONOMONO return bottom
visiting inst:   %6 = srem i32 %5, 4
NONONONO NONOMONO return bottom
visiting inst:   br i1 %3, label %4, label %11
NONONONO NONOMONO return bottom
visiting inst:   %7 = add nsw i32 1, %.01
opInstr2:   %.01 = phi i32 [ 1, %1 ], [ %spec.select, %4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %10 = icmp sgt i32 %.01, 0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.01
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %10, i32 %.01, i32 %8
NONONONO NONOMONO return bottom

Running n-body...
[100%] Built target UnitProject
visiting inst:   br label %4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %4
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %78 = add nsw i32 %.01, 1
edge not in execflag!!
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %5, label %6, label %.preheader
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %5, label %6, label %.preheader
ffffffflowwl succ pushed:   %7 = sext i32 %.01 to i64
ffffffflowwl inst pushed:   br i1 %5, label %6, label %.preheader
ffffffflowwl succ pushed:   br label %79
visiting inst:   br label %79
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %79
ffffffflowwl succ pushed:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
visit phi inst:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
0,incoming:   %99 = add nsw i32 %.1, 1
edge not in execflag!!
1,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %80 = icmp slt i32 %.1, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %80, label %81, label %100
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %80, label %81, label %100
ffffffflowwl succ pushed:   %82 = sext i32 %.1 to i64
ffffffflowwl inst pushed:   br i1 %80, label %81, label %100
ffffffflowwl succ pushed:   ret void
visiting inst:   ret void
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret void
ffffffflowwl succ pushed: null!
visiting inst:   %82 = sext i32 %.1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %83 = getelementptr inbounds %struct.planet, ptr %1, i64 %82
NONONONO NONOMONO return bottom
visiting inst:   %84 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %85 = load double, ptr %84, align 8
NONONONO NONOMONO return bottom
visiting inst:   %86 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 0
NONONONO NONOMONO return bottom
visiting inst:   %87 = load double, ptr %86, align 8
NONONONO NONOMONO return bottom
visiting inst:   %88 = call double @llvm.fmuladd.f64(double %2, double %85, double %87)
NONONONO NONOMONO return bottom
visiting inst:   store double %88, ptr %86, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %88, ptr %86, align 8
ffffffflowwl succ pushed:   %89 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 4
visiting inst:   %89 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %90 = load double, ptr %89, align 8
NONONONO NONOMONO return bottom
visiting inst:   %91 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 1
NONONONO NONOMONO return bottom
visiting inst:   %92 = load double, ptr %91, align 8
NONONONO NONOMONO return bottom
visiting inst:   %93 = call double @llvm.fmuladd.f64(double %2, double %90, double %92)
NONONONO NONOMONO return bottom
visiting inst:   store double %93, ptr %91, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %93, ptr %91, align 8
ffffffflowwl succ pushed:   %94 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 5
visiting inst:   %94 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %95 = load double, ptr %94, align 8
NONONONO NONOMONO return bottom
visiting inst:   %96 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 2
NONONONO NONOMONO return bottom
visiting inst:   %97 = load double, ptr %96, align 8
NONONONO NONOMONO return bottom
visiting inst:   %98 = call double @llvm.fmuladd.f64(double %2, double %95, double %97)
NONONONO NONOMONO return bottom
visiting inst:   store double %98, ptr %96, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %98, ptr %96, align 8
ffffffflowwl succ pushed:   %99 = add nsw i32 %.1, 1
visiting inst:   %99 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %79, !llvm.loop !9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %79, !llvm.loop !9
ffffffflowwl succ pushed:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
visit phi inst:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
0,incoming:   %99 = add nsw i32 %.1, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %8 = getelementptr inbounds %struct.planet, ptr %1, i64 %7
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %10
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %10
ffffffflowwl succ pushed:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
visit phi inst:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
0,incoming:   %9 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %76 = add nsw i32 %.0, 1
edge not in execflag!!
visiting inst:   %11 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %11, label %12, label %77
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %11, label %12, label %77
ffffffflowwl succ pushed:   %13 = sext i32 %.0 to i64
ffffffflowwl inst pushed:   br i1 %11, label %12, label %77
ffffffflowwl succ pushed:   %78 = add nsw i32 %.01, 1
visiting inst:   %78 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %4, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %4, !llvm.loop !8
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %78 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %14 = getelementptr inbounds %struct.planet, ptr %1, i64 %13
NONONONO NONOMONO return bottom
visiting inst:   %15 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 0
NONONONO NONOMONO return bottom
visiting inst:   %16 = load double, ptr %15, align 8
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 0
NONONONO NONOMONO return bottom
visiting inst:   %18 = load double, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = fsub double %16, %18
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 1
NONONONO NONOMONO return bottom
visiting inst:   %21 = load double, ptr %20, align 8
NONONONO NONOMONO return bottom
visiting inst:   %22 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 1
NONONONO NONOMONO return bottom
visiting inst:   %23 = load double, ptr %22, align 8
NONONONO NONOMONO return bottom
visiting inst:   %24 = fsub double %21, %23
NONONONO NONOMONO return bottom
visiting inst:   %25 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 2
NONONONO NONOMONO return bottom
visiting inst:   %26 = load double, ptr %25, align 8
NONONONO NONOMONO return bottom
visiting inst:   %27 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 2
NONONONO NONOMONO return bottom
visiting inst:   %28 = load double, ptr %27, align 8
NONONONO NONOMONO return bottom
visiting inst:   %29 = fsub double %26, %28
NONONONO NONOMONO return bottom
visiting inst:   %30 = fmul double %24, %24
NONONONO NONOMONO return bottom
visiting inst:   %31 = call double @llvm.fmuladd.f64(double %19, double %19, double %30)
NONONONO NONOMONO return bottom
visiting inst:   %32 = call double @llvm.fmuladd.f64(double %29, double %29, double %31)
NONONONO NONOMONO return bottom
visiting inst:   %33 = call double @sqrt(double noundef %32) #4
NONONONO NONOMONO return bottom
visiting inst:   %34 = fmul double %33, %33
NONONONO NONOMONO return bottom
visiting inst:   %35 = fmul double %34, %33
NONONONO NONOMONO return bottom
visiting inst:   %36 = fdiv double %2, %35
NONONONO NONOMONO return bottom
visiting inst:   %37 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %38 = load double, ptr %37, align 8
NONONONO NONOMONO return bottom
visiting inst:   %39 = fmul double %19, %38
NONONONO NONOMONO return bottom
visiting inst:   %40 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %41 = load double, ptr %40, align 8
NONONONO NONOMONO return bottom
visiting inst:   %42 = fneg double %39
NONONONO NONOMONO return bottom
visiting inst:   %43 = call double @llvm.fmuladd.f64(double %42, double %36, double %41)
NONONONO NONOMONO return bottom
visiting inst:   store double %43, ptr %40, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %43, ptr %40, align 8
ffffffflowwl succ pushed:   %44 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 6
visiting inst:   %44 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %45 = load double, ptr %44, align 8
NONONONO NONOMONO return bottom
visiting inst:   %46 = fmul double %24, %45
NONONONO NONOMONO return bottom
visiting inst:   %47 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %48 = load double, ptr %47, align 8
NONONONO NONOMONO return bottom
visiting inst:   %49 = fneg double %46
NONONONO NONOMONO return bottom
visiting inst:   %50 = call double @llvm.fmuladd.f64(double %49, double %36, double %48)
NONONONO NONOMONO return bottom
visiting inst:   store double %50, ptr %47, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %50, ptr %47, align 8
ffffffflowwl succ pushed:   %51 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 6
visiting inst:   %51 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %52 = load double, ptr %51, align 8
NONONONO NONOMONO return bottom
visiting inst:   %53 = fmul double %29, %52
NONONONO NONOMONO return bottom
visiting inst:   %54 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %55 = load double, ptr %54, align 8
NONONONO NONOMONO return bottom
visiting inst:   %56 = fneg double %53
NONONONO NONOMONO return bottom
visiting inst:   %57 = call double @llvm.fmuladd.f64(double %56, double %36, double %55)
NONONONO NONOMONO return bottom
visiting inst:   store double %57, ptr %54, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %57, ptr %54, align 8
ffffffflowwl succ pushed:   %58 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 6
visiting inst:   %58 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %59 = load double, ptr %58, align 8
NONONONO NONOMONO return bottom
visiting inst:   %60 = fmul double %19, %59
NONONONO NONOMONO return bottom
visiting inst:   %61 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %62 = load double, ptr %61, align 8
NONONONO NONOMONO return bottom
visiting inst:   %63 = call double @llvm.fmuladd.f64(double %60, double %36, double %62)
NONONONO NONOMONO return bottom
visiting inst:   store double %63, ptr %61, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %63, ptr %61, align 8
ffffffflowwl succ pushed:   %64 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 6
visiting inst:   %64 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %65 = load double, ptr %64, align 8
NONONONO NONOMONO return bottom
visiting inst:   %66 = fmul double %24, %65
NONONONO NONOMONO return bottom
visiting inst:   %67 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %68 = load double, ptr %67, align 8
NONONONO NONOMONO return bottom
visiting inst:   %69 = call double @llvm.fmuladd.f64(double %66, double %36, double %68)
NONONONO NONOMONO return bottom
visiting inst:   store double %69, ptr %67, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %69, ptr %67, align 8
ffffffflowwl succ pushed:   %70 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 6
visiting inst:   %70 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %71 = load double, ptr %70, align 8
NONONONO NONOMONO return bottom
visiting inst:   %72 = fmul double %29, %71
NONONONO NONOMONO return bottom
visiting inst:   %73 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %74 = load double, ptr %73, align 8
NONONONO NONOMONO return bottom
visiting inst:   %75 = call double @llvm.fmuladd.f64(double %72, double %36, double %74)
NONONONO NONOMONO return bottom
visiting inst:   store double %75, ptr %73, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %75, ptr %73, align 8
ffffffflowwl succ pushed:   %76 = add nsw i32 %.0, 1
visiting inst:   %76 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %10, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %10, !llvm.loop !6
ffffffflowwl succ pushed:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
visit phi inst:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
0,incoming:   %9 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming:   %76 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %11 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %76 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %11 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %76 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
0,incoming:   %9 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %76 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %11 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %76 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %11 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %76 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store double %75, ptr %73, align 8
NONONONO NONOMONO return bottom
visiting inst:   %75 = call double @llvm.fmuladd.f64(double %72, double %36, double %74)
NONONONO NONOMONO return bottom
visiting inst:   %74 = load double, ptr %73, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %75, ptr %73, align 8
NONONONO NONOMONO return bottom
visiting inst:   %75 = call double @llvm.fmuladd.f64(double %72, double %36, double %74)
NONONONO NONOMONO return bottom
visiting inst:   %72 = fmul double %29, %71
NONONONO NONOMONO return bottom
visiting inst:   %71 = load double, ptr %70, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %69, ptr %67, align 8
NONONONO NONOMONO return bottom
visiting inst:   %69 = call double @llvm.fmuladd.f64(double %66, double %36, double %68)
NONONONO NONOMONO return bottom
visiting inst:   %68 = load double, ptr %67, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %69, ptr %67, align 8
NONONONO NONOMONO return bottom
visiting inst:   %69 = call double @llvm.fmuladd.f64(double %66, double %36, double %68)
NONONONO NONOMONO return bottom
visiting inst:   %66 = fmul double %24, %65
NONONONO NONOMONO return bottom
visiting inst:   %65 = load double, ptr %64, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %63, ptr %61, align 8
NONONONO NONOMONO return bottom
visiting inst:   %63 = call double @llvm.fmuladd.f64(double %60, double %36, double %62)
NONONONO NONOMONO return bottom
visiting inst:   %62 = load double, ptr %61, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %63, ptr %61, align 8
NONONONO NONOMONO return bottom
visiting inst:   %63 = call double @llvm.fmuladd.f64(double %60, double %36, double %62)
NONONONO NONOMONO return bottom
visiting inst:   %60 = fmul double %19, %59
NONONONO NONOMONO return bottom
visiting inst:   %59 = load double, ptr %58, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %57, ptr %54, align 8
NONONONO NONOMONO return bottom
visiting inst:   %57 = call double @llvm.fmuladd.f64(double %56, double %36, double %55)
NONONONO NONOMONO return bottom
visiting inst:   %57 = call double @llvm.fmuladd.f64(double %56, double %36, double %55)
NONONONO NONOMONO return bottom
visiting inst:   %55 = load double, ptr %54, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %57, ptr %54, align 8
NONONONO NONOMONO return bottom
visiting inst:   %56 = fneg double %53
NONONONO NONOMONO return bottom
visiting inst:   %53 = fmul double %29, %52
NONONONO NONOMONO return bottom
visiting inst:   %52 = load double, ptr %51, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %50, ptr %47, align 8
NONONONO NONOMONO return bottom
visiting inst:   %50 = call double @llvm.fmuladd.f64(double %49, double %36, double %48)
NONONONO NONOMONO return bottom
visiting inst:   %50 = call double @llvm.fmuladd.f64(double %49, double %36, double %48)
NONONONO NONOMONO return bottom
visiting inst:   %48 = load double, ptr %47, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %50, ptr %47, align 8
NONONONO NONOMONO return bottom
visiting inst:   %49 = fneg double %46
NONONONO NONOMONO return bottom
visiting inst:   %46 = fmul double %24, %45
NONONONO NONOMONO return bottom
visiting inst:   %45 = load double, ptr %44, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %43, ptr %40, align 8
NONONONO NONOMONO return bottom
visiting inst:   %43 = call double @llvm.fmuladd.f64(double %42, double %36, double %41)
NONONONO NONOMONO return bottom
visiting inst:   %43 = call double @llvm.fmuladd.f64(double %42, double %36, double %41)
NONONONO NONOMONO return bottom
visiting inst:   %41 = load double, ptr %40, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %43, ptr %40, align 8
NONONONO NONOMONO return bottom
visiting inst:   %42 = fneg double %39
NONONONO NONOMONO return bottom
visiting inst:   %39 = fmul double %19, %38
NONONONO NONOMONO return bottom
visiting inst:   %38 = load double, ptr %37, align 8
NONONONO NONOMONO return bottom
visiting inst:   %43 = call double @llvm.fmuladd.f64(double %42, double %36, double %41)
NONONONO NONOMONO return bottom
visiting inst:   %50 = call double @llvm.fmuladd.f64(double %49, double %36, double %48)
NONONONO NONOMONO return bottom
visiting inst:   %57 = call double @llvm.fmuladd.f64(double %56, double %36, double %55)
NONONONO NONOMONO return bottom
visiting inst:   %63 = call double @llvm.fmuladd.f64(double %60, double %36, double %62)
NONONONO NONOMONO return bottom
visiting inst:   %69 = call double @llvm.fmuladd.f64(double %66, double %36, double %68)
NONONONO NONOMONO return bottom
visiting inst:   %75 = call double @llvm.fmuladd.f64(double %72, double %36, double %74)
NONONONO NONOMONO return bottom
visiting inst:   %36 = fdiv double %2, %35
NONONONO NONOMONO return bottom
visiting inst:   %35 = fmul double %34, %33
NONONONO NONOMONO return bottom
visiting inst:   %34 = fmul double %33, %33
NONONONO NONOMONO return bottom
visiting inst:   %34 = fmul double %33, %33
NONONONO NONOMONO return bottom
visiting inst:   %35 = fmul double %34, %33
NONONONO NONOMONO return bottom
visiting inst:   %33 = call double @sqrt(double noundef %32) #4
NONONONO NONOMONO return bottom
visiting inst:   %32 = call double @llvm.fmuladd.f64(double %29, double %29, double %31)
NONONONO NONOMONO return bottom
visiting inst:   %31 = call double @llvm.fmuladd.f64(double %19, double %19, double %30)
NONONONO NONOMONO return bottom
visiting inst:   %32 = call double @llvm.fmuladd.f64(double %29, double %29, double %31)
NONONONO NONOMONO return bottom
visiting inst:   %32 = call double @llvm.fmuladd.f64(double %29, double %29, double %31)
NONONONO NONOMONO return bottom
visiting inst:   %53 = fmul double %29, %52
NONONONO NONOMONO return bottom
visiting inst:   %72 = fmul double %29, %71
NONONONO NONOMONO return bottom
visiting inst:   %29 = fsub double %26, %28
NONONONO NONOMONO return bottom
visiting inst:   %28 = load double, ptr %27, align 8
NONONONO NONOMONO return bottom
visiting inst:   %29 = fsub double %26, %28
NONONONO NONOMONO return bottom
visiting inst:   %26 = load double, ptr %25, align 8
NONONONO NONOMONO return bottom
visiting inst:   %30 = fmul double %24, %24
NONONONO NONOMONO return bottom
visiting inst:   %30 = fmul double %24, %24
NONONONO NONOMONO return bottom
visiting inst:   %46 = fmul double %24, %45
NONONONO NONOMONO return bottom
visiting inst:   %66 = fmul double %24, %65
NONONONO NONOMONO return bottom
visiting inst:   %24 = fsub double %21, %23
NONONONO NONOMONO return bottom
visiting inst:   %23 = load double, ptr %22, align 8
NONONONO NONOMONO return bottom
visiting inst:   %24 = fsub double %21, %23
NONONONO NONOMONO return bottom
visiting inst:   %21 = load double, ptr %20, align 8
NONONONO NONOMONO return bottom
visiting inst:   %31 = call double @llvm.fmuladd.f64(double %19, double %19, double %30)
NONONONO NONOMONO return bottom
visiting inst:   %31 = call double @llvm.fmuladd.f64(double %19, double %19, double %30)
NONONONO NONOMONO return bottom
visiting inst:   %39 = fmul double %19, %38
NONONONO NONOMONO return bottom
visiting inst:   %60 = fmul double %19, %59
NONONONO NONOMONO return bottom
visiting inst:   %19 = fsub double %16, %18
NONONONO NONOMONO return bottom
visiting inst:   %18 = load double, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = fsub double %16, %18
NONONONO NONOMONO return bottom
visiting inst:   %16 = load double, ptr %15, align 8
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 0
NONONONO NONOMONO return bottom
visiting inst:   %22 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 1
NONONONO NONOMONO return bottom
visiting inst:   %27 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 2
NONONONO NONOMONO return bottom
visiting inst:   %37 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %44 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %51 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %61 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %67 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %73 = getelementptr inbounds %struct.planet, ptr %14, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %14 = getelementptr inbounds %struct.planet, ptr %1, i64 %13
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
0,incoming:   %9 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %76 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %78 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %78 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %78 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %78 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %78 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %78 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %11, label %12, label %77
NONONONO NONOMONO return bottom
visiting inst:   %11 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   %13 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %76 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ %9, %6 ], [ %76, %12 ]
0,incoming:   %9 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %76 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %15 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 0
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 1
NONONONO NONOMONO return bottom
visiting inst:   %25 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 2
NONONONO NONOMONO return bottom
visiting inst:   %40 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %47 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %54 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %58 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %64 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %70 = getelementptr inbounds %struct.planet, ptr %8, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %8 = getelementptr inbounds %struct.planet, ptr %1, i64 %7
NONONONO NONOMONO return bottom
visiting inst:   %80 = icmp slt i32 %.1, %0
NONONONO NONOMONO return bottom
visiting inst:   %82 = sext i32 %.1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %99 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
0,incoming:   %99 = add nsw i32 %.1, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %80 = icmp slt i32 %.1, %0
NONONONO NONOMONO return bottom
visiting inst:   %82 = sext i32 %.1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %99 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %80 = icmp slt i32 %.1, %0
NONONONO NONOMONO return bottom
visiting inst:   %82 = sext i32 %.1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %99 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
0,incoming:   %99 = add nsw i32 %.1, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %80 = icmp slt i32 %.1, %0
NONONONO NONOMONO return bottom
visiting inst:   %82 = sext i32 %.1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %99 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %80 = icmp slt i32 %.1, %0
NONONONO NONOMONO return bottom
visiting inst:   %82 = sext i32 %.1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %99 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   store double %98, ptr %96, align 8
NONONONO NONOMONO return bottom
visiting inst:   %98 = call double @llvm.fmuladd.f64(double %2, double %95, double %97)
NONONONO NONOMONO return bottom
visiting inst:   %97 = load double, ptr %96, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %98, ptr %96, align 8
NONONONO NONOMONO return bottom
visiting inst:   %98 = call double @llvm.fmuladd.f64(double %2, double %95, double %97)
NONONONO NONOMONO return bottom
visiting inst:   %95 = load double, ptr %94, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %93, ptr %91, align 8
NONONONO NONOMONO return bottom
visiting inst:   %93 = call double @llvm.fmuladd.f64(double %2, double %90, double %92)
NONONONO NONOMONO return bottom
visiting inst:   %92 = load double, ptr %91, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %93, ptr %91, align 8
NONONONO NONOMONO return bottom
visiting inst:   %93 = call double @llvm.fmuladd.f64(double %2, double %90, double %92)
NONONONO NONOMONO return bottom
visiting inst:   %90 = load double, ptr %89, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %88, ptr %86, align 8
NONONONO NONOMONO return bottom
visiting inst:   %88 = call double @llvm.fmuladd.f64(double %2, double %85, double %87)
NONONONO NONOMONO return bottom
visiting inst:   %87 = load double, ptr %86, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %88, ptr %86, align 8
NONONONO NONOMONO return bottom
visiting inst:   %88 = call double @llvm.fmuladd.f64(double %2, double %85, double %87)
NONONONO NONOMONO return bottom
visiting inst:   %85 = load double, ptr %84, align 8
NONONONO NONOMONO return bottom
visiting inst:   %84 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %86 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 0
NONONONO NONOMONO return bottom
visiting inst:   %89 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %91 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 1
NONONONO NONOMONO return bottom
visiting inst:   %94 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %96 = getelementptr inbounds %struct.planet, ptr %83, i32 0, i32 2
NONONONO NONOMONO return bottom
visiting inst:   %83 = getelementptr inbounds %struct.planet, ptr %1, i64 %82
NONONONO NONOMONO return bottom
visiting inst:   br i1 %80, label %81, label %100
NONONONO NONOMONO return bottom
visiting inst:   %80 = icmp slt i32 %.1, %0
NONONONO NONOMONO return bottom
visiting inst:   %82 = sext i32 %.1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %99 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %99, %81 ], [ 0, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %5, label %6, label %.preheader
NONONONO NONOMONO return bottom
visiting inst:   %5 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %9 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %78 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %3 ], [ %78, %77 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %3
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %3
ffffffflowwl succ pushed:   %.02 = phi double [ 0.000000e+00, %2 ], [ %.1, %60 ]
visit phi inst:   %.02 = phi double [ 0.000000e+00, %2 ], [ %.1, %60 ]
0,incoming: double 0.000000e+00
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
edge not in execflag!!
visit phi inst:   %.01 = phi i32 [ 0, %2 ], [ %61, %60 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming:   %61 = add nsw i32 %.01, 1
edge not in execflag!!
visiting inst:   %4 = icmp slt i32 %.01, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %62
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %4, label %5, label %62
ffffffflowwl succ pushed:   %6 = sext i32 %.01 to i64
ffffffflowwl inst pushed:   br i1 %4, label %5, label %62
ffffffflowwl succ pushed:   ret double %.02
visiting inst:   ret double %.02
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret double %.02
ffffffflowwl succ pushed: null!
visiting inst:   %6 = sext i32 %.01 to i64
NONONONO NONOMONO return bottom
visiting inst:   %7 = getelementptr inbounds %struct.planet, ptr %1, i64 %6
NONONONO NONOMONO return bottom
visiting inst:   %8 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %9 = load double, ptr %8, align 8
NONONONO NONOMONO return bottom
visiting inst:   %10 = fmul double 5.000000e-01, %9
NONONONO NONOMONO return bottom
visiting inst:   %11 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %12 = load double, ptr %11, align 8
NONONONO NONOMONO return bottom
visiting inst:   %13 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %14 = load double, ptr %13, align 8
NONONONO NONOMONO return bottom
visiting inst:   %15 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %16 = load double, ptr %15, align 8
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %18 = load double, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = fmul double %16, %18
NONONONO NONOMONO return bottom
visiting inst:   %20 = call double @llvm.fmuladd.f64(double %12, double %14, double %19)
NONONONO NONOMONO return bottom
visiting inst:   %21 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %22 = load double, ptr %21, align 8
NONONONO NONOMONO return bottom
visiting inst:   %23 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %24 = load double, ptr %23, align 8
NONONONO NONOMONO return bottom
visiting inst:   %25 = call double @llvm.fmuladd.f64(double %22, double %24, double %20)
NONONONO NONOMONO return bottom
visiting inst:   %26 = call double @llvm.fmuladd.f64(double %10, double %25, double %.02)
NONONONO NONOMONO return bottom
visiting inst:   %27 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %61, %60 ]
NONONONO NONOMONO return bottom
visiting inst:   br label %28
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %28
ffffffflowwl succ pushed:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
visit phi inst:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
0,incoming:   %26 = call double @llvm.fmuladd.f64(double %10, double %25, double %.02)
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming:   %58 = fsub double %.1, %57
edge not in execflag!!
visit phi inst:   %.0 = phi i32 [ %27, %5 ], [ %59, %30 ]
0,incoming:   %27 = add nsw i32 %.01, 1
edge not in execflag!!
1,incoming:   %59 = add nsw i32 %.0, 1
edge not in execflag!!
visiting inst:   %29 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %29, label %30, label %60
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %29, label %30, label %60
ffffffflowwl succ pushed:   %31 = sext i32 %.0 to i64
ffffffflowwl inst pushed:   br i1 %29, label %30, label %60
ffffffflowwl succ pushed:   %61 = add nsw i32 %.01, 1
visiting inst:   %61 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %2 ], [ %61, %60 ]
NONONONO NONOMONO return bottom
visiting inst:   br label %3, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %3, !llvm.loop !8
ffffffflowwl succ pushed:   %.02 = phi double [ 0.000000e+00, %2 ], [ %.1, %60 ]
visit phi inst:   %.02 = phi double [ 0.000000e+00, %2 ], [ %.1, %60 ]
0,incoming: double 0.000000e+00
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %31 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %32 = getelementptr inbounds %struct.planet, ptr %1, i64 %31
NONONONO NONOMONO return bottom
visiting inst:   %33 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 0
NONONONO NONOMONO return bottom
visiting inst:   %34 = load double, ptr %33, align 8
NONONONO NONOMONO return bottom
visiting inst:   %35 = getelementptr inbounds %struct.planet, ptr %32, i32 0, i32 0
NONONONO NONOMONO return bottom
visiting inst:   %36 = load double, ptr %35, align 8
NONONONO NONOMONO return bottom
visiting inst:   %37 = fsub double %34, %36
NONONONO NONOMONO return bottom
visiting inst:   %38 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 1
NONONONO NONOMONO return bottom
visiting inst:   %39 = load double, ptr %38, align 8
NONONONO NONOMONO return bottom
visiting inst:   %40 = getelementptr inbounds %struct.planet, ptr %32, i32 0, i32 1
NONONONO NONOMONO return bottom
visiting inst:   %41 = load double, ptr %40, align 8
NONONONO NONOMONO return bottom
visiting inst:   %42 = fsub double %39, %41
NONONONO NONOMONO return bottom
visiting inst:   %43 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 2
NONONONO NONOMONO return bottom
visiting inst:   %44 = load double, ptr %43, align 8
NONONONO NONOMONO return bottom
visiting inst:   %45 = getelementptr inbounds %struct.planet, ptr %32, i32 0, i32 2
NONONONO NONOMONO return bottom
visiting inst:   %46 = load double, ptr %45, align 8
NONONONO NONOMONO return bottom
visiting inst:   %47 = fsub double %44, %46
NONONONO NONOMONO return bottom
visiting inst:   %48 = fmul double %42, %42
NONONONO NONOMONO return bottom
visiting inst:   %49 = call double @llvm.fmuladd.f64(double %37, double %37, double %48)
NONONONO NONOMONO return bottom
visiting inst:   %50 = call double @llvm.fmuladd.f64(double %47, double %47, double %49)
NONONONO NONOMONO return bottom
visiting inst:   %51 = call double @sqrt(double noundef %50) #4
NONONONO NONOMONO return bottom
visiting inst:   %52 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %53 = load double, ptr %52, align 8
NONONONO NONOMONO return bottom
visiting inst:   %54 = getelementptr inbounds %struct.planet, ptr %32, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %55 = load double, ptr %54, align 8
NONONONO NONOMONO return bottom
visiting inst:   %56 = fmul double %53, %55
NONONONO NONOMONO return bottom
visiting inst:   %57 = fdiv double %56, %51
NONONONO NONOMONO return bottom
visiting inst:   %58 = fsub double %.1, %57
opInstr1:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %59 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ %27, %5 ], [ %59, %30 ]
NONONONO NONOMONO return bottom
visiting inst:   br label %28, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %28, !llvm.loop !6
ffffffflowwl succ pushed:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
visit phi inst:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
0,incoming:   %26 = call double @llvm.fmuladd.f64(double %10, double %25, double %.02)
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %58 = fsub double %.1, %57
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.0 = phi i32 [ %27, %5 ], [ %59, %30 ]
0,incoming:   %27 = add nsw i32 %.01, 1
edge not in execflag!!
1,incoming:   %59 = add nsw i32 %.0, 1
edge not in execflag!!
visit phi inst:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
0,incoming:   %26 = call double @llvm.fmuladd.f64(double %10, double %25, double %.02)
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %58 = fsub double %.1, %57
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %58 = fsub double %.1, %57
opInstr1:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %57 = fdiv double %56, %51
NONONONO NONOMONO return bottom
visiting inst:   %56 = fmul double %53, %55
NONONONO NONOMONO return bottom
visiting inst:   %55 = load double, ptr %54, align 8
NONONONO NONOMONO return bottom
visiting inst:   %56 = fmul double %53, %55
NONONONO NONOMONO return bottom
visiting inst:   %53 = load double, ptr %52, align 8
NONONONO NONOMONO return bottom
visiting inst:   %57 = fdiv double %56, %51
NONONONO NONOMONO return bottom
visiting inst:   %51 = call double @sqrt(double noundef %50) #4
NONONONO NONOMONO return bottom
visiting inst:   %50 = call double @llvm.fmuladd.f64(double %47, double %47, double %49)
NONONONO NONOMONO return bottom
visiting inst:   %49 = call double @llvm.fmuladd.f64(double %37, double %37, double %48)
NONONONO NONOMONO return bottom
visiting inst:   %50 = call double @llvm.fmuladd.f64(double %47, double %47, double %49)
NONONONO NONOMONO return bottom
visiting inst:   %50 = call double @llvm.fmuladd.f64(double %47, double %47, double %49)
NONONONO NONOMONO return bottom
visiting inst:   %47 = fsub double %44, %46
NONONONO NONOMONO return bottom
visiting inst:   %46 = load double, ptr %45, align 8
NONONONO NONOMONO return bottom
visiting inst:   %47 = fsub double %44, %46
NONONONO NONOMONO return bottom
visiting inst:   %44 = load double, ptr %43, align 8
NONONONO NONOMONO return bottom
visiting inst:   %48 = fmul double %42, %42
NONONONO NONOMONO return bottom
visiting inst:   %48 = fmul double %42, %42
NONONONO NONOMONO return bottom
visiting inst:   %42 = fsub double %39, %41
NONONONO NONOMONO return bottom
visiting inst:   %41 = load double, ptr %40, align 8
NONONONO NONOMONO return bottom
visiting inst:   %42 = fsub double %39, %41
NONONONO NONOMONO return bottom
visiting inst:   %39 = load double, ptr %38, align 8
NONONONO NONOMONO return bottom
visiting inst:   %49 = call double @llvm.fmuladd.f64(double %37, double %37, double %48)
NONONONO NONOMONO return bottom
visiting inst:   %49 = call double @llvm.fmuladd.f64(double %37, double %37, double %48)
NONONONO NONOMONO return bottom
visiting inst:   %37 = fsub double %34, %36
NONONONO NONOMONO return bottom
visiting inst:   %36 = load double, ptr %35, align 8
NONONONO NONOMONO return bottom
visiting inst:   %37 = fsub double %34, %36
NONONONO NONOMONO return bottom
visiting inst:   %34 = load double, ptr %33, align 8
NONONONO NONOMONO return bottom
visiting inst:   %35 = getelementptr inbounds %struct.planet, ptr %32, i32 0, i32 0
NONONONO NONOMONO return bottom
visiting inst:   %40 = getelementptr inbounds %struct.planet, ptr %32, i32 0, i32 1
NONONONO NONOMONO return bottom
visiting inst:   %45 = getelementptr inbounds %struct.planet, ptr %32, i32 0, i32 2
NONONONO NONOMONO return bottom
visiting inst:   %54 = getelementptr inbounds %struct.planet, ptr %32, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %32 = getelementptr inbounds %struct.planet, ptr %1, i64 %31
NONONONO NONOMONO return bottom
visiting inst:   %26 = call double @llvm.fmuladd.f64(double %10, double %25, double %.02)
NONONONO NONOMONO return bottom
visiting inst:   ret double %.02
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %2 ], [ %61, %60 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming:   %61 = add nsw i32 %.01, 1
edge not in execflag!!
visiting inst:   br i1 %29, label %30, label %60
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi double [ 0.000000e+00, %2 ], [ %.1, %60 ]
0,incoming: double 0.000000e+00
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %26 = call double @llvm.fmuladd.f64(double %10, double %25, double %.02)
NONONONO NONOMONO return bottom
visiting inst:   ret double %.02
NONONONO NONOMONO return bottom
visiting inst:   %58 = fsub double %.1, %57
opInstr1:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ %27, %5 ], [ %59, %30 ]
0,incoming:   %27 = add nsw i32 %.01, 1
edge not in execflag!!
1,incoming:   %59 = add nsw i32 %.0, 1
edge not in execflag!!
visit phi inst:   %.1 = phi double [ %26, %5 ], [ %58, %30 ]
0,incoming:   %26 = call double @llvm.fmuladd.f64(double %10, double %25, double %.02)
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %58 = fsub double %.1, %57
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %26 = call double @llvm.fmuladd.f64(double %10, double %25, double %.02)
NONONONO NONOMONO return bottom
visiting inst:   %25 = call double @llvm.fmuladd.f64(double %22, double %24, double %20)
NONONONO NONOMONO return bottom
visiting inst:   %24 = load double, ptr %23, align 8
NONONONO NONOMONO return bottom
visiting inst:   %25 = call double @llvm.fmuladd.f64(double %22, double %24, double %20)
NONONONO NONOMONO return bottom
visiting inst:   %22 = load double, ptr %21, align 8
NONONONO NONOMONO return bottom
visiting inst:   %25 = call double @llvm.fmuladd.f64(double %22, double %24, double %20)
NONONONO NONOMONO return bottom
visiting inst:   %20 = call double @llvm.fmuladd.f64(double %12, double %14, double %19)
NONONONO NONOMONO return bottom
visiting inst:   %19 = fmul double %16, %18
NONONONO NONOMONO return bottom
visiting inst:   %18 = load double, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = fmul double %16, %18
NONONONO NONOMONO return bottom
visiting inst:   %16 = load double, ptr %15, align 8
NONONONO NONOMONO return bottom
visiting inst:   %20 = call double @llvm.fmuladd.f64(double %12, double %14, double %19)
NONONONO NONOMONO return bottom
visiting inst:   %14 = load double, ptr %13, align 8
NONONONO NONOMONO return bottom
visiting inst:   %20 = call double @llvm.fmuladd.f64(double %12, double %14, double %19)
NONONONO NONOMONO return bottom
visiting inst:   %12 = load double, ptr %11, align 8
NONONONO NONOMONO return bottom
visiting inst:   %26 = call double @llvm.fmuladd.f64(double %10, double %25, double %.02)
NONONONO NONOMONO return bottom
visiting inst:   %10 = fmul double 5.000000e-01, %9
NONONONO NONOMONO return bottom
visiting inst:   %9 = load double, ptr %8, align 8
NONONONO NONOMONO return bottom
visiting inst:   %8 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %11 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %13 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %15 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %21 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %23 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %33 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 0
NONONONO NONOMONO return bottom
visiting inst:   %38 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 1
NONONONO NONOMONO return bottom
visiting inst:   %43 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 2
NONONONO NONOMONO return bottom
visiting inst:   %52 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %7 = getelementptr inbounds %struct.planet, ptr %1, i64 %6
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %62
NONONONO NONOMONO return bottom
visiting inst:   %26 = call double @llvm.fmuladd.f64(double %10, double %25, double %.02)
NONONONO NONOMONO return bottom
visiting inst:   ret double %.02
NONONONO NONOMONO return bottom
visiting inst:   br label %3
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %3
ffffffflowwl succ pushed:   %.03 = phi double [ 0.000000e+00, %2 ], [ %23, %5 ]
visit phi inst:   %.03 = phi double [ 0.000000e+00, %2 ], [ %23, %5 ]
0,incoming: double 0.000000e+00
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %23 = call double @llvm.fmuladd.f64(double %18, double %22, double %.03)
edge not in execflag!!
visit phi inst:   %.02 = phi double [ 0.000000e+00, %2 ], [ %14, %5 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %14 = call double @llvm.fmuladd.f64(double %9, double %13, double %.02)
edge not in execflag!!
visit phi inst:   %.01 = phi double [ 0.000000e+00, %2 ], [ %32, %5 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %32 = call double @llvm.fmuladd.f64(double %27, double %31, double %.01)
edge not in execflag!!
visit phi inst:   %.0 = phi i32 [ 0, %2 ], [ %33, %5 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming:   %33 = add nsw i32 %.0, 1
edge not in execflag!!
visiting inst:   %4 = icmp slt i32 %.0, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %34
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %4, label %5, label %34
ffffffflowwl succ pushed:   %6 = sext i32 %.0 to i64
ffffffflowwl inst pushed:   br i1 %4, label %5, label %34
ffffffflowwl succ pushed:   %35 = fneg double %.02
visiting inst:   %35 = fneg double %.02
NONONONO NONOMONO return bottom
visiting inst:   %36 = fdiv double %35, 0x4043BD3CC9BE45DE
NONONONO NONOMONO return bottom
visiting inst:   %37 = getelementptr inbounds %struct.planet, ptr %1, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %38 = getelementptr inbounds %struct.planet, ptr %37, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   store double %36, ptr %38, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %36, ptr %38, align 8
ffffffflowwl succ pushed:   %39 = fneg double %.03
visiting inst:   %39 = fneg double %.03
NONONONO NONOMONO return bottom
visiting inst:   %40 = fdiv double %39, 0x4043BD3CC9BE45DE
NONONONO NONOMONO return bottom
visiting inst:   %41 = getelementptr inbounds %struct.planet, ptr %1, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %42 = getelementptr inbounds %struct.planet, ptr %41, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   store double %40, ptr %42, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %40, ptr %42, align 8
ffffffflowwl succ pushed:   %43 = fneg double %.01
visiting inst:   %43 = fneg double %.01
NONONONO NONOMONO return bottom
visiting inst:   %44 = fdiv double %43, 0x4043BD3CC9BE45DE
NONONONO NONOMONO return bottom
visiting inst:   %45 = getelementptr inbounds %struct.planet, ptr %1, i64 0
NONONONO NONOMONO return bottom
visiting inst:   %46 = getelementptr inbounds %struct.planet, ptr %45, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   store double %44, ptr %46, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %44, ptr %46, align 8
ffffffflowwl succ pushed:   ret void
visiting inst:   ret void
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret void
ffffffflowwl succ pushed: null!
visiting inst:   %6 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %7 = getelementptr inbounds %struct.planet, ptr %1, i64 %6
NONONONO NONOMONO return bottom
visiting inst:   %8 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %9 = load double, ptr %8, align 8
NONONONO NONOMONO return bottom
visiting inst:   %10 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %11 = getelementptr inbounds %struct.planet, ptr %1, i64 %10
NONONONO NONOMONO return bottom
visiting inst:   %12 = getelementptr inbounds %struct.planet, ptr %11, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %13 = load double, ptr %12, align 8
NONONONO NONOMONO return bottom
visiting inst:   %14 = call double @llvm.fmuladd.f64(double %9, double %13, double %.02)
NONONONO NONOMONO return bottom
visiting inst:   %15 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %16 = getelementptr inbounds %struct.planet, ptr %1, i64 %15
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds %struct.planet, ptr %16, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %18 = load double, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds %struct.planet, ptr %1, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   %21 = getelementptr inbounds %struct.planet, ptr %20, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %22 = load double, ptr %21, align 8
NONONONO NONOMONO return bottom
visiting inst:   %23 = call double @llvm.fmuladd.f64(double %18, double %22, double %.03)
NONONONO NONOMONO return bottom
visiting inst:   %24 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %25 = getelementptr inbounds %struct.planet, ptr %1, i64 %24
NONONONO NONOMONO return bottom
visiting inst:   %26 = getelementptr inbounds %struct.planet, ptr %25, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %27 = load double, ptr %26, align 8
NONONONO NONOMONO return bottom
visiting inst:   %28 = sext i32 %.0 to i64
NONONONO NONOMONO return bottom
visiting inst:   %29 = getelementptr inbounds %struct.planet, ptr %1, i64 %28
NONONONO NONOMONO return bottom
visiting inst:   %30 = getelementptr inbounds %struct.planet, ptr %29, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %31 = load double, ptr %30, align 8
NONONONO NONOMONO return bottom
visiting inst:   %32 = call double @llvm.fmuladd.f64(double %27, double %31, double %.01)
NONONONO NONOMONO return bottom
visiting inst:   %33 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 0, %2 ], [ %33, %5 ]
NONONONO NONOMONO return bottom
visiting inst:   br label %3, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %3, !llvm.loop !6
ffffffflowwl succ pushed:   %.03 = phi double [ 0.000000e+00, %2 ], [ %23, %5 ]
visit phi inst:   %.03 = phi double [ 0.000000e+00, %2 ], [ %23, %5 ]
0,incoming: double 0.000000e+00
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %23 = call double @llvm.fmuladd.f64(double %18, double %22, double %.03)
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %23 = call double @llvm.fmuladd.f64(double %18, double %22, double %.03)
NONONONO NONOMONO return bottom
visiting inst:   %39 = fneg double %.03
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 0, %2 ], [ %33, %5 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming:   %33 = add nsw i32 %.0, 1
edge not in execflag!!
visit phi inst:   %.01 = phi double [ 0.000000e+00, %2 ], [ %32, %5 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %32 = call double @llvm.fmuladd.f64(double %27, double %31, double %.01)
edge not in execflag!!
visiting inst:   %32 = call double @llvm.fmuladd.f64(double %27, double %31, double %.01)
NONONONO NONOMONO return bottom
visiting inst:   %31 = load double, ptr %30, align 8
NONONONO NONOMONO return bottom
visiting inst:   %30 = getelementptr inbounds %struct.planet, ptr %29, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %29 = getelementptr inbounds %struct.planet, ptr %1, i64 %28
NONONONO NONOMONO return bottom
visiting inst:   %32 = call double @llvm.fmuladd.f64(double %27, double %31, double %.01)
NONONONO NONOMONO return bottom
visiting inst:   %27 = load double, ptr %26, align 8
NONONONO NONOMONO return bottom
visiting inst:   %26 = getelementptr inbounds %struct.planet, ptr %25, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   %25 = getelementptr inbounds %struct.planet, ptr %1, i64 %24
NONONONO NONOMONO return bottom
visit phi inst:   %.03 = phi double [ 0.000000e+00, %2 ], [ %23, %5 ]
0,incoming: double 0.000000e+00
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %23 = call double @llvm.fmuladd.f64(double %18, double %22, double %.03)
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %23 = call double @llvm.fmuladd.f64(double %18, double %22, double %.03)
NONONONO NONOMONO return bottom
visiting inst:   %39 = fneg double %.03
NONONONO NONOMONO return bottom
visiting inst:   %23 = call double @llvm.fmuladd.f64(double %18, double %22, double %.03)
NONONONO NONOMONO return bottom
visiting inst:   %22 = load double, ptr %21, align 8
NONONONO NONOMONO return bottom
visiting inst:   %21 = getelementptr inbounds %struct.planet, ptr %20, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %20 = getelementptr inbounds %struct.planet, ptr %1, i64 %19
NONONONO NONOMONO return bottom
visiting inst:   %23 = call double @llvm.fmuladd.f64(double %18, double %22, double %.03)
NONONONO NONOMONO return bottom
visiting inst:   %18 = load double, ptr %17, align 8
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds %struct.planet, ptr %16, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   %16 = getelementptr inbounds %struct.planet, ptr %1, i64 %15
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi double [ 0.000000e+00, %2 ], [ %14, %5 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %14 = call double @llvm.fmuladd.f64(double %9, double %13, double %.02)
edge not in execflag!!
visiting inst:   %14 = call double @llvm.fmuladd.f64(double %9, double %13, double %.02)
NONONONO NONOMONO return bottom
visiting inst:   %13 = load double, ptr %12, align 8
NONONONO NONOMONO return bottom
visiting inst:   %12 = getelementptr inbounds %struct.planet, ptr %11, i32 0, i32 6
NONONONO NONOMONO return bottom
visiting inst:   %11 = getelementptr inbounds %struct.planet, ptr %1, i64 %10
NONONONO NONOMONO return bottom
visiting inst:   %14 = call double @llvm.fmuladd.f64(double %9, double %13, double %.02)
NONONONO NONOMONO return bottom
visiting inst:   %9 = load double, ptr %8, align 8
NONONONO NONOMONO return bottom
visiting inst:   %8 = getelementptr inbounds %struct.planet, ptr %7, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   %7 = getelementptr inbounds %struct.planet, ptr %1, i64 %6
NONONONO NONOMONO return bottom
visiting inst:   store double %44, ptr %46, align 8
NONONONO NONOMONO return bottom
visiting inst:   %46 = getelementptr inbounds %struct.planet, ptr %45, i32 0, i32 5
NONONONO NONOMONO return bottom
visiting inst:   store double %44, ptr %46, align 8
NONONONO NONOMONO return bottom
visiting inst:   %44 = fdiv double %43, 0x4043BD3CC9BE45DE
NONONONO NONOMONO return bottom
visiting inst:   store double %40, ptr %42, align 8
NONONONO NONOMONO return bottom
visiting inst:   %42 = getelementptr inbounds %struct.planet, ptr %41, i32 0, i32 4
NONONONO NONOMONO return bottom
visiting inst:   store double %40, ptr %42, align 8
NONONONO NONOMONO return bottom
visiting inst:   %40 = fdiv double %39, 0x4043BD3CC9BE45DE
NONONONO NONOMONO return bottom
visiting inst:   store double %36, ptr %38, align 8
NONONONO NONOMONO return bottom
visiting inst:   %38 = getelementptr inbounds %struct.planet, ptr %37, i32 0, i32 3
NONONONO NONOMONO return bottom
visiting inst:   store double %36, ptr %38, align 8
NONONONO NONOMONO return bottom
visiting inst:   %36 = fdiv double %35, 0x4043BD3CC9BE45DE
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %34
NONONONO NONOMONO return bottom
visiting inst:   %23 = call double @llvm.fmuladd.f64(double %18, double %22, double %.03)
NONONONO NONOMONO return bottom
visiting inst:   %39 = fneg double %.03
NONONONO NONOMONO return bottom
visiting inst:   call void @offset_momentum(i32 noundef 5, ptr noundef @bodies)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @offset_momentum(i32 noundef 5, ptr noundef @bodies)
ffffffflowwl succ pushed:   %3 = call double @energy(i32 noundef 5, ptr noundef @bodies)
visiting inst:   %3 = call double @energy(i32 noundef 5, ptr noundef @bodies)
NONONONO NONOMONO return bottom
visiting inst:   %4 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %3)
NONONONO NONOMONO return bottom
visiting inst:   br label %5
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %5
ffffffflowwl succ pushed:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
visit phi inst:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %8 = add nsw i32 %.0, 1
edge not in execflag!!
visiting inst:   %6 = icmp sle i32 %.0, 5000000
NONONONO NONOMONO return bottom
visiting inst:   br i1 %6, label %7, label %9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %6, label %7, label %9
ffffffflowwl succ pushed:   call void @advance(i32 noundef 5, ptr noundef @bodies, double noundef 1.000000e-02)
ffffffflowwl inst pushed:   br i1 %6, label %7, label %9
ffffffflowwl succ pushed:   %10 = call double @energy(i32 noundef 5, ptr noundef @bodies)
visiting inst:   %10 = call double @energy(i32 noundef 5, ptr noundef @bodies)
NONONONO NONOMONO return bottom
visiting inst:   %11 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %10)
NONONONO NONOMONO return bottom
visiting inst:   ret i32 0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 0
ffffffflowwl succ pushed: null!
visiting inst:   call void @advance(i32 noundef 5, ptr noundef @bodies, double noundef 1.000000e-02)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @advance(i32 noundef 5, ptr noundef @bodies, double noundef 1.000000e-02)
ffffffflowwl succ pushed:   %8 = add nsw i32 %.0, 1
visiting inst:   %8 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %5, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %5, !llvm.loop !6
ffffffflowwl succ pushed:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
visit phi inst:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %8 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %6 = icmp sle i32 %.0, 5000000
NONONONO NONOMONO return bottom
visiting inst:   %8 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %8 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %6 = icmp sle i32 %.0, 5000000
NONONONO NONOMONO return bottom
visiting inst:   %8 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %8 = add nsw i32 %.0, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %6 = icmp sle i32 %.0, 5000000
NONONONO NONOMONO return bottom
visiting inst:   %8 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %6 = icmp sle i32 %.0, 5000000
NONONONO NONOMONO return bottom
visiting inst:   %8 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %11 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %10)
NONONONO NONOMONO return bottom
visiting inst:   br i1 %6, label %7, label %9
NONONONO NONOMONO return bottom
visiting inst:   %6 = icmp sle i32 %.0, 5000000
NONONONO NONOMONO return bottom
visiting inst:   %8 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 1, %2 ], [ %8, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %4 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %3)
NONONONO NONOMONO return bottom

Running ffbench...
[100%] Built target UnitProject
visiting inst:   %1 = mul nsw i32 256, 256
binaryOp const!!
visiting inst:   %2 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
visiting inst:   %3 = add nsw i64 %2, 1
NONONONO NONOMONO return bottom
visiting inst:   %4 = mul nsw i64 %3, 2
NONONONO NONOMONO return bottom
visiting inst:   %5 = mul i64 %4, 8
NONONONO NONOMONO return bottom
visiting inst:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 2), align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 2), align 4
ffffffflowwl succ pushed:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4
visiting inst:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4
ffffffflowwl succ pushed:   %6 = call noalias ptr @malloc(i64 noundef %5) #7
visiting inst:   %6 = call noalias ptr @malloc(i64 noundef %5) #7
NONONONO NONOMONO return bottom
visiting inst:   %7 = icmp eq ptr %6, null
NONONONO NONOMONO return bottom
visiting inst:   br i1 %7, label %8, label %11
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %7, label %8, label %11
ffffffflowwl succ pushed:   %9 = load ptr, ptr @stderr, align 8
ffffffflowwl inst pushed:   br i1 %7, label %8, label %11
ffffffflowwl succ pushed:   call void @llvm.memset.p0.i64(ptr align 8 %6, i8 0, i64 %5, i1 false)
visiting inst:   call void @llvm.memset.p0.i64(ptr align 8 %6, i8 0, i64 %5, i1 false)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @llvm.memset.p0.i64(ptr align 8 %6, i8 0, i64 %5, i1 false)
ffffffflowwl succ pushed:   br label %12
visiting inst:   br label %12
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %12
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
visit phi inst:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %31 = add nsw i32 %.01, 1
edge not in execflag!!
visiting inst:   %13 = icmp slt i32 %.01, 256
NONONONO NONOMONO return bottom
visiting inst:   br i1 %13, label %.preheader4, label %.preheader3
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %13, label %.preheader4, label %.preheader3
ffffffflowwl succ pushed:   br label %14
ffffffflowwl inst pushed:   br i1 %13, label %.preheader4, label %.preheader3
ffffffflowwl succ pushed:   br label %32
visiting inst:   br label %32
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %32
ffffffflowwl succ pushed:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
visit phi inst:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
0,incoming:   %35 = add nsw i32 %.1, 1
edge not in execflag!!
1,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %33 = icmp slt i32 %.1, 63
NONONONO NONOMONO return bottom
visiting inst:   br i1 %33, label %34, label %.preheader2
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %33, label %34, label %.preheader2
ffffffflowwl succ pushed:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef 1)
ffffffflowwl inst pushed:   br i1 %33, label %34, label %.preheader2
ffffffflowwl succ pushed:   br label %36
visiting inst:   br label %36
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %36
ffffffflowwl succ pushed:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
visit phi inst:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
0,incoming:   %..011 = select i1 %49, double %42, double %.011
edge not in execflag!!
1,incoming: double 1.000000e+10
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visit phi inst:   %.010 = phi double [ %51, %39 ], [ -1.000000e+10, %.preheader2 ]
0,incoming:   %51 = select i1 %50, double %42, double %.010
edge not in execflag!!
1,incoming: double -1.000000e+10
edge not in execflag!!
visit phi inst:   %.09 = phi double [ %53, %39 ], [ 1.000000e+10, %.preheader2 ]
0,incoming:   %53 = select i1 %52, double %46, double %.09
edge not in execflag!!
1,incoming: double 1.000000e+10
edge not in execflag!!
visit phi inst:   %.05 = phi double [ %55, %39 ], [ -1.000000e+10, %.preheader2 ]
0,incoming:   %55 = select i1 %54, double %46, double %.05
edge not in execflag!!
1,incoming: double -1.000000e+10
edge not in execflag!!
visit phi inst:   %.04 = phi double [ %47, %39 ], [ 0.000000e+00, %.preheader2 ]
0,incoming:   %47 = fadd double %.04, %42
edge not in execflag!!
1,incoming: double 0.000000e+00
edge not in execflag!!
visit phi inst:   %.2 = phi i32 [ %56, %39 ], [ 1, %.preheader2 ]
0,incoming:   %56 = add nsw i32 %.2, 2
edge not in execflag!!
1,incoming: i32 1
edge not in execflag!!
visit phi inst:   %.0 = phi double [ %48, %39 ], [ 0.000000e+00, %.preheader2 ]
0,incoming:   %48 = fadd double %.0, %46
edge not in execflag!!
1,incoming: double 0.000000e+00
edge not in execflag!!
visiting inst:   %37 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %38 = icmp sle i64 %37, %2
NONONONO NONOMONO return bottom
visiting inst:   br i1 %38, label %39, label %57
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %38, label %39, label %57
ffffffflowwl succ pushed:   %40 = sext i32 %.2 to i64
ffffffflowwl inst pushed:   br i1 %38, label %39, label %57
ffffffflowwl succ pushed:   %58 = fsub double %.010, %.011
visiting inst:   %58 = fsub double %.010, %.011
opInstr1:   %.010 = phi double [ %51, %39 ], [ -1.000000e+10, %.preheader2 ]
opInstr2:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
const phi 2 found to be a const!!
NONONONO NONOMONO return bottom
visiting inst:   %59 = fdiv double 2.550000e+02, %58
NONONONO NONOMONO return bottom
visiting inst:   br label %60
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %60
ffffffflowwl succ pushed:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
visit phi inst:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
edge not in execflag!!
visit phi inst:   %.3 = phi i32 [ 0, %57 ], [ %90, %89 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming:   %90 = add nsw i32 %.3, 1
edge not in execflag!!
visiting inst:   %61 = icmp slt i32 %.3, 256
NONONONO NONOMONO return bottom
visiting inst:   br i1 %61, label %.preheader, label %91
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %61, label %.preheader, label %91
ffffffflowwl succ pushed:   br label %62
ffffffflowwl inst pushed:   br i1 %61, label %.preheader, label %91
ffffffflowwl succ pushed:   %92 = icmp eq i32 %.06, 0
visiting inst:   %92 = icmp eq i32 %.06, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %92, label %93, label %96
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %92, label %93, label %96
ffffffflowwl succ pushed:   %94 = load ptr, ptr @stderr, align 8
ffffffflowwl inst pushed:   br i1 %92, label %93, label %96
ffffffflowwl succ pushed:   %97 = load ptr, ptr @stderr, align 8
visiting inst:   %97 = load ptr, ptr @stderr, align 8
NONONONO NONOMONO return bottom
visiting inst:   %98 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %97, ptr noundef @.str.3, i32 noundef 63, i32 noundef %.06)
NONONONO NONOMONO return bottom
visiting inst:   br label %99
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %99
ffffffflowwl succ pushed:   ret i32 0
visiting inst:   ret i32 0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 0
ffffffflowwl succ pushed: null!
visiting inst:   %94 = load ptr, ptr @stderr, align 8
NONONONO NONOMONO return bottom
visiting inst:   %95 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %94, ptr noundef @.str.2, i32 noundef 63)
NONONONO NONOMONO return bottom
visiting inst:   br label %99
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %99
ffffffflowwl succ pushed:   ret i32 0
visiting inst:   br label %62
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %62
ffffffflowwl succ pushed:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
edge not in execflag!!
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visit phi inst:   %.13 = phi i32 [ %88, %87 ], [ 0, %.preheader ]
0,incoming:   %88 = add nsw i32 %.13, 1
edge not in execflag!!
1,incoming: i32 0
edge not in execflag!!
visiting inst:   %63 = icmp slt i32 %.13, 256
NONONONO NONOMONO return bottom
visiting inst:   br i1 %63, label %64, label %89
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %63, label %64, label %89
ffffffflowwl succ pushed:   %65 = mul nsw i32 256, %.3
ffffffflowwl inst pushed:   br i1 %63, label %64, label %89
ffffffflowwl succ pushed:   %90 = add nsw i32 %.3, 1
visiting inst:   %90 = add nsw i32 %.3, 1
opInstr1:   %.3 = phi i32 [ 0, %57 ], [ %90, %89 ]
NONONONO NONOMONO return bottom
visiting inst:   br label %60, !llvm.loop !12
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %60, !llvm.loop !12
ffffffflowwl succ pushed:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
visit phi inst:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %65 = mul nsw i32 256, %.3
opInstr2:   %.3 = phi i32 [ 0, %57 ], [ %90, %89 ]
NONONONO NONOMONO return bottom
visiting inst:   %66 = add nsw i32 %65, %.13
opInstr2:   %.13 = phi i32 [ %88, %87 ], [ 0, %.preheader ]
NONONONO NONOMONO return bottom
visiting inst:   %67 = mul nsw i32 %66, 2
NONONONO NONOMONO return bottom
visiting inst:   %68 = add nsw i32 1, %67
NONONONO NONOMONO return bottom
visiting inst:   %69 = sext i32 %68 to i64
NONONONO NONOMONO return bottom
visiting inst:   %70 = getelementptr inbounds double, ptr %6, i64 %69
NONONONO NONOMONO return bottom
visiting inst:   %71 = load double, ptr %70, align 8
NONONONO NONOMONO return bottom
visiting inst:   %72 = fsub double %71, %.011
opInstr2:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
const phi 2 found to be a const!!
NONONONO NONOMONO return bottom
visiting inst:   %73 = fmul double %72, %59
NONONONO NONOMONO return bottom
visiting inst:   %74 = fptosi double %73 to i32
NONONONO NONOMONO return bottom
visiting inst:   %75 = and i32 %.3, 15
opInstr1:   %.3 = phi i32 [ 0, %57 ], [ %90, %89 ]
NONONONO NONOMONO return bottom
visiting inst:   %76 = icmp eq i32 %75, 8
NONONONO NONOMONO return bottom
visiting inst:   %77 = and i32 %.13, 15
opInstr1:   %.13 = phi i32 [ %88, %87 ], [ 0, %.preheader ]
NONONONO NONOMONO return bottom
visiting inst:   %78 = icmp eq i32 %77, 8
NONONONO NONOMONO return bottom
visiting inst:   %79 = select i1 %76, i1 true, i1 %78
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   %80 = zext i1 %79 to i64
NONONONO NONOMONO return bottom
visiting inst:   %81 = select i1 %79, i32 255, i32 0
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   %82 = icmp ne i32 %74, %81
NONONONO NONOMONO return bottom
visiting inst:   br i1 %82, label %83, label %87
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %82, label %83, label %87
ffffffflowwl succ pushed:   %84 = add nsw i32 %.17, 1
ffffffflowwl inst pushed:   br i1 %82, label %83, label %87
ffffffflowwl succ pushed:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
visit phi inst:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
0,incoming:   %84 = add nsw i32 %.17, 1
edge not in execflag!!
1,incoming:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %88 = add nsw i32 %.13, 1
opInstr1:   %.13 = phi i32 [ %88, %87 ], [ 0, %.preheader ]
NONONONO NONOMONO return bottom
visiting inst:   br label %62, !llvm.loop !11
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %62, !llvm.loop !11
ffffffflowwl succ pushed:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %84 = add nsw i32 %.17, 1
opInstr1:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %85 = load ptr, ptr @stderr, align 8
NONONONO NONOMONO return bottom
visiting inst:   %86 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %85, ptr noundef @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %81, i32 noundef %74)
NONONONO NONOMONO return bottom
visiting inst:   br label %87
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %87
ffffffflowwl succ pushed:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
visit phi inst:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
0,incoming:   %84 = add nsw i32 %.17, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %40 = sext i32 %.2 to i64
NONONONO NONOMONO return bottom
visiting inst:   %41 = getelementptr inbounds double, ptr %6, i64 %40
NONONONO NONOMONO return bottom
visiting inst:   %42 = load double, ptr %41, align 8
NONONONO NONOMONO return bottom
visiting inst:   %43 = add nsw i32 %.2, 1
opInstr1:   %.2 = phi i32 [ %56, %39 ], [ 1, %.preheader2 ]
NONONONO NONOMONO return bottom
visiting inst:   %44 = sext i32 %43 to i64
NONONONO NONOMONO return bottom
visiting inst:   %45 = getelementptr inbounds double, ptr %6, i64 %44
NONONONO NONOMONO return bottom
visiting inst:   %46 = load double, ptr %45, align 8
NONONONO NONOMONO return bottom
visiting inst:   %47 = fadd double %.04, %42
opInstr1:   %.04 = phi double [ %47, %39 ], [ 0.000000e+00, %.preheader2 ]
NONONONO NONOMONO return bottom
visiting inst:   %48 = fadd double %.0, %46
opInstr1:   %.0 = phi double [ %48, %39 ], [ 0.000000e+00, %.preheader2 ]
NONONONO NONOMONO return bottom
visiting inst:   %49 = fcmp ole double %42, %.011
NONONONO NONOMONO return bottom
visiting inst:   %..011 = select i1 %49, double %42, double %.011
NONONONO NONOMONO return bottom
visiting inst:   %50 = fcmp ogt double %42, %.010
NONONONO NONOMONO return bottom
visiting inst:   %51 = select i1 %50, double %42, double %.010
NONONONO NONOMONO return bottom
visiting inst:   %52 = fcmp ole double %46, %.09
NONONONO NONOMONO return bottom
visiting inst:   %53 = select i1 %52, double %46, double %.09
NONONONO NONOMONO return bottom
visiting inst:   %54 = fcmp ogt double %46, %.05
NONONONO NONOMONO return bottom
visiting inst:   %55 = select i1 %54, double %46, double %.05
NONONONO NONOMONO return bottom
visiting inst:   %56 = add nsw i32 %.2, 2
opInstr1:   %.2 = phi i32 [ %56, %39 ], [ 1, %.preheader2 ]
NONONONO NONOMONO return bottom
visiting inst:   br label %36, !llvm.loop !10
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %36, !llvm.loop !10
ffffffflowwl succ pushed:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
visit phi inst:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
0,incoming:   %..011 = select i1 %49, double %42, double %.011
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: double 1.000000e+10
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef 1)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef 1)
ffffffflowwl succ pushed:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef -1)
visiting inst:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef -1)
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef -1)
ffffffflowwl succ pushed:   %35 = add nsw i32 %.1, 1
visiting inst:   %35 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %32, !llvm.loop !9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %32, !llvm.loop !9
ffffffflowwl succ pushed:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
visit phi inst:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
0,incoming:   %35 = add nsw i32 %.1, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   br label %14
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %14
ffffffflowwl succ pushed:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
visit phi inst:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
0,incoming:   %29 = add nsw i32 %.02, 1
edge not in execflag!!
1,incoming: i32 0
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %15 = icmp slt i32 %.02, 256
NONONONO NONOMONO return bottom
visiting inst:   br i1 %15, label %16, label %30
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %15, label %16, label %30
ffffffflowwl succ pushed:   %17 = and i32 %.01, 15
ffffffflowwl inst pushed:   br i1 %15, label %16, label %30
ffffffflowwl succ pushed:   %31 = add nsw i32 %.01, 1
visiting inst:   %31 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %12, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %12, !llvm.loop !8
ffffffflowwl succ pushed:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
visit phi inst:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %31 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %17 = and i32 %.01, 15
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %18 = icmp eq i32 %17, 8
NONONONO NONOMONO return bottom
visiting inst:   %19 = and i32 %.02, 15
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   %20 = icmp eq i32 %19, 8
icmp const!!
visiting inst:   %or.cond = select i1 %18, i1 true, i1 %20
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   br i1 %or.cond, label %21, label %28
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %or.cond, label %21, label %28
ffffffflowwl succ pushed:   %22 = mul nsw i32 256, %.01
ffffffflowwl inst pushed:   br i1 %or.cond, label %21, label %28
ffffffflowwl succ pushed:   %29 = add nsw i32 %.02, 1
visiting inst:   %29 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %14, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %14, !llvm.loop !6
ffffffflowwl succ pushed:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
visit phi inst:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
0,incoming:   %29 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   %22 = mul nsw i32 256, %.01
opInstr2:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %23 = add nsw i32 %22, %.02
opInstr2:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %24 = mul nsw i32 %23, 2
NONONONO NONOMONO return bottom
visiting inst:   %25 = add nsw i32 1, %24
NONONONO NONOMONO return bottom
visiting inst:   %26 = sext i32 %25 to i64
NONONONO NONOMONO return bottom
visiting inst:   %27 = getelementptr inbounds double, ptr %6, i64 %26
NONONONO NONOMONO return bottom
visiting inst:   store double 1.280000e+02, ptr %27, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double 1.280000e+02, ptr %27, align 8
ffffffflowwl succ pushed:   br label %28
visiting inst:   br label %28
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %28
ffffffflowwl succ pushed:   %29 = add nsw i32 %.02, 1
visiting inst:   %9 = load ptr, ptr @stderr, align 8
NONONONO NONOMONO return bottom
visiting inst:   %10 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %9, ptr noundef @.str)
NONONONO NONOMONO return bottom
visiting inst:   call void @exit(i32 noundef 1) #8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   call void @exit(i32 noundef 1) #8
ffffffflowwl succ pushed:   unreachable
visiting inst:   unreachable
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   unreachable
ffffffflowwl succ pushed: null!
visiting inst:   %10 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %9, ptr noundef @.str)
NONONONO NONOMONO return bottom
visiting inst:   store double 1.280000e+02, ptr %27, align 8
NONONONO NONOMONO return bottom
visiting inst:   %27 = getelementptr inbounds double, ptr %6, i64 %26
NONONONO NONOMONO return bottom
visiting inst:   %26 = sext i32 %25 to i64
NONONONO NONOMONO return bottom
visiting inst:   %25 = add nsw i32 1, %24
NONONONO NONOMONO return bottom
visiting inst:   %24 = mul nsw i32 %23, 2
NONONONO NONOMONO return bottom
visiting inst:   %23 = add nsw i32 %22, %.02
opInstr2:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %15 = icmp slt i32 %.02, 256
NONONONO NONOMONO return bottom
visiting inst:   %23 = add nsw i32 %22, %.02
opInstr2:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %29 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
0,incoming:   %29 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %15 = icmp slt i32 %.02, 256
NONONONO NONOMONO return bottom
visiting inst:   %23 = add nsw i32 %22, %.02
opInstr2:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %29 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %19 = and i32 %.02, 15
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %20 = icmp eq i32 %19, 8
icmp const!!
visiting inst:   %15 = icmp slt i32 %.02, 256
NONONONO NONOMONO return bottom
visiting inst:   %23 = add nsw i32 %22, %.02
opInstr2:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %29 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %19 = and i32 %.02, 15
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %19 = and i32 %.02, 15
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
0,incoming:   %29 = add nsw i32 %.02, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %15 = icmp slt i32 %.02, 256
NONONONO NONOMONO return bottom
visiting inst:   %23 = add nsw i32 %22, %.02
opInstr2:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %29 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %19 = and i32 %.02, 15
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %15 = icmp slt i32 %.02, 256
NONONONO NONOMONO return bottom
visiting inst:   %23 = add nsw i32 %22, %.02
opInstr2:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %29 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %19 = and i32 %.02, 15
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %or.cond, label %21, label %28
NONONONO NONOMONO return bottom
visiting inst:   %or.cond = select i1 %18, i1 true, i1 %20
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   %20 = icmp eq i32 %19, 8
icmp const!!
visiting inst:   %or.cond = select i1 %18, i1 true, i1 %20
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   %18 = icmp eq i32 %17, 8
NONONONO NONOMONO return bottom
visiting inst:   %13 = icmp slt i32 %.01, 256
NONONONO NONOMONO return bottom
visiting inst:   %17 = and i32 %.01, 15
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %22 = mul nsw i32 256, %.01
opInstr2:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %31 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %31 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %13 = icmp slt i32 %.01, 256
NONONONO NONOMONO return bottom
visiting inst:   %17 = and i32 %.01, 15
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %22 = mul nsw i32 256, %.01
opInstr2:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %31 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %31 = add nsw i32 %.01, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %13 = icmp slt i32 %.01, 256
NONONONO NONOMONO return bottom
visiting inst:   %17 = and i32 %.01, 15
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %22 = mul nsw i32 256, %.01
opInstr2:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %31 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %13 = icmp slt i32 %.01, 256
NONONONO NONOMONO return bottom
visiting inst:   %17 = and i32 %.01, 15
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %22 = mul nsw i32 256, %.01
opInstr2:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %31 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %15, label %16, label %30
NONONONO NONOMONO return bottom
visiting inst:   %15 = icmp slt i32 %.02, 256
NONONONO NONOMONO return bottom
visiting inst:   %23 = add nsw i32 %22, %.02
opInstr2:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %29 = add nsw i32 %.02, 1
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %19 = and i32 %.02, 15
opInstr1:   %.02 = phi i32 [ %29, %28 ], [ 0, %.preheader4 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %33 = icmp slt i32 %.1, 63
NONONONO NONOMONO return bottom
visiting inst:   %35 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
0,incoming:   %35 = add nsw i32 %.1, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %33 = icmp slt i32 %.1, 63
NONONONO NONOMONO return bottom
visiting inst:   %35 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %33 = icmp slt i32 %.1, 63
NONONONO NONOMONO return bottom
visiting inst:   %35 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
0,incoming:   %35 = add nsw i32 %.1, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %33 = icmp slt i32 %.1, 63
NONONONO NONOMONO return bottom
visiting inst:   %35 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %33 = icmp slt i32 %.1, 63
NONONONO NONOMONO return bottom
visiting inst:   %35 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %49 = fcmp ole double %42, %.011
NONONONO NONOMONO return bottom
visiting inst:   %58 = fsub double %.010, %.011
opInstr1:   %.010 = phi double [ %51, %39 ], [ -1.000000e+10, %.preheader2 ]
opInstr2:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %72 = fsub double %71, %.011
opInstr2:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %..011 = select i1 %49, double %42, double %.011
NONONONO NONOMONO return bottom
visit phi inst:   %.2 = phi i32 [ %56, %39 ], [ 1, %.preheader2 ]
0,incoming:   %56 = add nsw i32 %.2, 2
edge not in execflag!!
1,incoming: i32 1
edge not in execflag!!
visit phi inst:   %.05 = phi double [ %55, %39 ], [ -1.000000e+10, %.preheader2 ]
0,incoming:   %55 = select i1 %54, double %46, double %.05
edge not in execflag!!
1,incoming: double -1.000000e+10
edge not in execflag!!
visiting inst:   %55 = select i1 %54, double %46, double %.05
NONONONO NONOMONO return bottom
visit phi inst:   %.09 = phi double [ %53, %39 ], [ 1.000000e+10, %.preheader2 ]
0,incoming:   %53 = select i1 %52, double %46, double %.09
edge not in execflag!!
1,incoming: double 1.000000e+10
edge not in execflag!!
visiting inst:   %53 = select i1 %52, double %46, double %.09
NONONONO NONOMONO return bottom
visit phi inst:   %.010 = phi double [ %51, %39 ], [ -1.000000e+10, %.preheader2 ]
0,incoming:   %51 = select i1 %50, double %42, double %.010
edge not in execflag!!
1,incoming: double -1.000000e+10
edge not in execflag!!
visiting inst:   %51 = select i1 %50, double %42, double %.010
NONONONO NONOMONO return bottom
visit phi inst:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
0,incoming:   %..011 = select i1 %49, double %42, double %.011
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: double 1.000000e+10
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %49 = fcmp ole double %42, %.011
NONONONO NONOMONO return bottom
visiting inst:   %58 = fsub double %.010, %.011
opInstr1:   %.010 = phi double [ %51, %39 ], [ -1.000000e+10, %.preheader2 ]
opInstr2:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %72 = fsub double %71, %.011
opInstr2:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %..011 = select i1 %49, double %42, double %.011
NONONONO NONOMONO return bottom
visiting inst:   %49 = fcmp ole double %42, %.011
NONONONO NONOMONO return bottom
visiting inst:   %58 = fsub double %.010, %.011
opInstr1:   %.010 = phi double [ %51, %39 ], [ -1.000000e+10, %.preheader2 ]
opInstr2:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %72 = fsub double %71, %.011
opInstr2:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %..011 = select i1 %49, double %42, double %.011
NONONONO NONOMONO return bottom
visiting inst:   %..011 = select i1 %49, double %42, double %.011
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi double [ %48, %39 ], [ 0.000000e+00, %.preheader2 ]
0,incoming:   %48 = fadd double %.0, %46
edge not in execflag!!
1,incoming: double 0.000000e+00
edge not in execflag!!
visit phi inst:   %.04 = phi double [ %47, %39 ], [ 0.000000e+00, %.preheader2 ]
0,incoming:   %47 = fadd double %.04, %42
edge not in execflag!!
1,incoming: double 0.000000e+00
edge not in execflag!!
visiting inst:   %48 = fadd double %.0, %46
opInstr1:   %.0 = phi double [ %48, %39 ], [ 0.000000e+00, %.preheader2 ]
NONONONO NONOMONO return bottom
visiting inst:   %52 = fcmp ole double %46, %.09
NONONONO NONOMONO return bottom
visiting inst:   %54 = fcmp ogt double %46, %.05
NONONONO NONOMONO return bottom
visiting inst:   %53 = select i1 %52, double %46, double %.09
NONONONO NONOMONO return bottom
visiting inst:   %55 = select i1 %54, double %46, double %.05
NONONONO NONOMONO return bottom
visiting inst:   %46 = load double, ptr %45, align 8
NONONONO NONOMONO return bottom
visiting inst:   %45 = getelementptr inbounds double, ptr %6, i64 %44
NONONONO NONOMONO return bottom
visiting inst:   %44 = sext i32 %43 to i64
NONONONO NONOMONO return bottom
visiting inst:   %47 = fadd double %.04, %42
opInstr1:   %.04 = phi double [ %47, %39 ], [ 0.000000e+00, %.preheader2 ]
NONONONO NONOMONO return bottom
visiting inst:   %49 = fcmp ole double %42, %.011
NONONONO NONOMONO return bottom
visiting inst:   %50 = fcmp ogt double %42, %.010
NONONONO NONOMONO return bottom
visiting inst:   %..011 = select i1 %49, double %42, double %.011
NONONONO NONOMONO return bottom
visiting inst:   %51 = select i1 %50, double %42, double %.010
NONONONO NONOMONO return bottom
visiting inst:   %42 = load double, ptr %41, align 8
NONONONO NONOMONO return bottom
visiting inst:   %41 = getelementptr inbounds double, ptr %6, i64 %40
NONONONO NONOMONO return bottom
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %86 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %85, ptr noundef @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %81, i32 noundef %74)
NONONONO NONOMONO return bottom
visit phi inst:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
0,incoming:   %84 = add nsw i32 %.17, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %92 = icmp eq i32 %.06, 0
NONONONO NONOMONO return bottom
visiting inst:   %98 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %97, ptr noundef @.str.3, i32 noundef 63, i32 noundef %.06)
NONONONO NONOMONO return bottom
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %84 = add nsw i32 %.17, 1
opInstr1:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
0,incoming:   %84 = add nsw i32 %.17, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %92 = icmp eq i32 %.06, 0
NONONONO NONOMONO return bottom
visiting inst:   %98 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %97, ptr noundef @.str.3, i32 noundef 63, i32 noundef %.06)
NONONONO NONOMONO return bottom
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %92 = icmp eq i32 %.06, 0
NONONONO NONOMONO return bottom
visiting inst:   %98 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %97, ptr noundef @.str.3, i32 noundef 63, i32 noundef %.06)
NONONONO NONOMONO return bottom
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %84 = add nsw i32 %.17, 1
opInstr1:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
0,incoming:   %84 = add nsw i32 %.17, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.13 = phi i32 [ %88, %87 ], [ 0, %.preheader ]
0,incoming:   %88 = add nsw i32 %.13, 1
edge not in execflag!!
1,incoming: i32 0
edge not in execflag!!
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br i1 %82, label %83, label %87
NONONONO NONOMONO return bottom
visiting inst:   %82 = icmp ne i32 %74, %81
NONONONO NONOMONO return bottom
visiting inst:   %86 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %85, ptr noundef @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %81, i32 noundef %74)
NONONONO NONOMONO return bottom
visiting inst:   %81 = select i1 %79, i32 255, i32 0
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   %80 = zext i1 %79 to i64
NONONONO NONOMONO return bottom
visiting inst:   %79 = select i1 %76, i1 true, i1 %78
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   %78 = icmp eq i32 %77, 8
NONONONO NONOMONO return bottom
visiting inst:   %79 = select i1 %76, i1 true, i1 %78
really const1 yes????
NONONONO NONOMONO return bottom
visiting inst:   %76 = icmp eq i32 %75, 8
NONONONO NONOMONO return bottom
visiting inst:   %82 = icmp ne i32 %74, %81
NONONONO NONOMONO return bottom
visiting inst:   %86 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %85, ptr noundef @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %81, i32 noundef %74)
NONONONO NONOMONO return bottom
visiting inst:   %74 = fptosi double %73 to i32
NONONONO NONOMONO return bottom
visiting inst:   %73 = fmul double %72, %59
NONONONO NONOMONO return bottom
visiting inst:   %72 = fsub double %71, %.011
opInstr2:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %71 = load double, ptr %70, align 8
NONONONO NONOMONO return bottom
visiting inst:   %70 = getelementptr inbounds double, ptr %6, i64 %69
NONONONO NONOMONO return bottom
visiting inst:   %69 = sext i32 %68 to i64
NONONONO NONOMONO return bottom
visiting inst:   %68 = add nsw i32 1, %67
NONONONO NONOMONO return bottom
visiting inst:   %67 = mul nsw i32 %66, 2
NONONONO NONOMONO return bottom
visiting inst:   %66 = add nsw i32 %65, %.13
opInstr2:   %.13 = phi i32 [ %88, %87 ], [ 0, %.preheader ]
NONONONO NONOMONO return bottom
visiting inst:   %92 = icmp eq i32 %.06, 0
NONONONO NONOMONO return bottom
visiting inst:   %98 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %97, ptr noundef @.str.3, i32 noundef 63, i32 noundef %.06)
NONONONO NONOMONO return bottom
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.3 = phi i32 [ 0, %57 ], [ %90, %89 ]
0,incoming: i32 0
edge not in execflag!!
1,incoming:   %90 = add nsw i32 %.3, 1
edge not in execflag!!
visiting inst:   br i1 %63, label %64, label %89
NONONONO NONOMONO return bottom
visit phi inst:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
0,incoming: i32 0
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %92 = icmp eq i32 %.06, 0
NONONONO NONOMONO return bottom
visiting inst:   %98 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %97, ptr noundef @.str.3, i32 noundef 63, i32 noundef %.06)
NONONONO NONOMONO return bottom
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %92 = icmp eq i32 %.06, 0
NONONONO NONOMONO return bottom
visiting inst:   %98 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %97, ptr noundef @.str.3, i32 noundef 63, i32 noundef %.06)
NONONONO NONOMONO return bottom
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %84 = add nsw i32 %.17, 1
opInstr1:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
0,incoming:   %84 = add nsw i32 %.17, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %95 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %94, ptr noundef @.str.2, i32 noundef 63)
NONONONO NONOMONO return bottom
visiting inst:   %98 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %97, ptr noundef @.str.3, i32 noundef 63, i32 noundef %.06)
NONONONO NONOMONO return bottom
visiting inst:   br i1 %92, label %93, label %96
NONONONO NONOMONO return bottom
visiting inst:   br i1 %61, label %.preheader, label %91
NONONONO NONOMONO return bottom
visiting inst:   %92 = icmp eq i32 %.06, 0
NONONONO NONOMONO return bottom
visiting inst:   %98 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %97, ptr noundef @.str.3, i32 noundef 63, i32 noundef %.06)
NONONONO NONOMONO return bottom
visit phi inst:   %.17 = phi i32 [ %.28, %87 ], [ %.06, %.preheader ]
0,incoming:   %.28 = phi i32 [ %84, %83 ], [ %.17, %64 ]
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.06 = phi i32 [ 0, %57 ], [ %.17, %89 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %73 = fmul double %72, %59
NONONONO NONOMONO return bottom
visiting inst:   %59 = fdiv double 2.550000e+02, %58
NONONONO NONOMONO return bottom
visiting inst:   br i1 %38, label %39, label %57
NONONONO NONOMONO return bottom
visiting inst:   %38 = icmp sle i64 %37, %2
NONONONO NONOMONO return bottom
visiting inst:   %49 = fcmp ole double %42, %.011
NONONONO NONOMONO return bottom
visiting inst:   %58 = fsub double %.010, %.011
opInstr1:   %.010 = phi double [ %51, %39 ], [ -1.000000e+10, %.preheader2 ]
opInstr2:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %72 = fsub double %71, %.011
opInstr2:   %.011 = phi double [ %..011, %39 ], [ 1.000000e+10, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %..011 = select i1 %49, double %42, double %.011
NONONONO NONOMONO return bottom
visiting inst:   br i1 %33, label %34, label %.preheader2
NONONONO NONOMONO return bottom
visiting inst:   %33 = icmp slt i32 %.1, 63
NONONONO NONOMONO return bottom
visiting inst:   %35 = add nsw i32 %.1, 1
opInstr1:   %.1 = phi i32 [ %35, %34 ], [ 0, %.preheader3 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %13, label %.preheader4, label %.preheader3
NONONONO NONOMONO return bottom
visiting inst:   %13 = icmp slt i32 %.01, 256
NONONONO NONOMONO return bottom
visiting inst:   %17 = and i32 %.01, 15
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %22 = mul nsw i32 256, %.01
opInstr2:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %31 = add nsw i32 %.01, 1
opInstr1:   %.01 = phi i32 [ 0, %11 ], [ %31, %30 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %7, label %8, label %11
NONONONO NONOMONO return bottom
visiting inst:   %7 = icmp eq ptr %6, null
NONONONO NONOMONO return bottom
visiting inst:   call void @llvm.memset.p0.i64(ptr align 8 %6, i8 0, i64 %5, i1 false)
NONONONO NONOMONO return bottom
visiting inst:   %27 = getelementptr inbounds double, ptr %6, i64 %26
NONONONO NONOMONO return bottom
visiting inst:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef 1)
NONONONO NONOMONO return bottom
visiting inst:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef -1)
NONONONO NONOMONO return bottom
visiting inst:   %41 = getelementptr inbounds double, ptr %6, i64 %40
NONONONO NONOMONO return bottom
visiting inst:   %45 = getelementptr inbounds double, ptr %6, i64 %44
NONONONO NONOMONO return bottom
visiting inst:   %70 = getelementptr inbounds double, ptr %6, i64 %69
NONONONO NONOMONO return bottom
visiting inst:   %6 = call noalias ptr @malloc(i64 noundef %5) #7
NONONONO NONOMONO return bottom
visiting inst:   call void @llvm.memset.p0.i64(ptr align 8 %6, i8 0, i64 %5, i1 false)
NONONONO NONOMONO return bottom
visiting inst:   %5 = mul i64 %4, 8
NONONONO NONOMONO return bottom
visiting inst:   %4 = mul nsw i64 %3, 2
NONONONO NONOMONO return bottom
visiting inst:   %3 = add nsw i64 %2, 1
NONONONO NONOMONO return bottom
visiting inst:   %38 = icmp sle i64 %37, %2
NONONONO NONOMONO return bottom
visiting inst:   %2 = sext i32 %1 to i64
NONONONO NONOMONO return bottom
in replacing, inst   %1 = mul nsw i32 256, 256 is const and replaced
in replacing, inst   %20 = icmp eq i32 %19, 8 is const and replaced
visiting inst:   br label %5
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %5
ffffffflowwl succ pushed:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
visit phi inst:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %12 = add nsw i32 %.011, 1
edge not in execflag!!
visit phi inst:   %.09 = phi i32 [ 1, %4 ], [ %11, %7 ]
0,incoming: i32 1
edge not in execflag!!
1,incoming:   %11 = mul nsw i32 %.09, %10
edge not in execflag!!
visiting inst:   %6 = icmp sle i32 %.011, %2
NONONONO NONOMONO return bottom
visiting inst:   br i1 %6, label %7, label %.preheader6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %6, label %7, label %.preheader6
ffffffflowwl succ pushed:   br label %13
ffffffflowwl inst pushed:   br i1 %6, label %7, label %.preheader6
ffffffflowwl succ pushed:   %8 = sext i32 %.011 to i64
visiting inst:   %8 = sext i32 %.011 to i64
NONONONO NONOMONO return bottom
visiting inst:   %9 = getelementptr inbounds i32, ptr %1, i64 %8
NONONONO NONOMONO return bottom
visiting inst:   %10 = load i32, ptr %9, align 4
NONONONO NONOMONO return bottom
visiting inst:   %11 = mul nsw i32 %.09, %10
opInstr1:   %.09 = phi i32 [ 1, %4 ], [ %11, %7 ]
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.011, 1
opInstr1:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   br label %5, !llvm.loop !6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %5, !llvm.loop !6
ffffffflowwl succ pushed:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
visit phi inst:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %12 = add nsw i32 %.011, 1
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   br label %13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %13
ffffffflowwl succ pushed:   %.112 = phi i32 [ %155, %153 ], [ %2, %.preheader6 ]
visit phi inst:   %.112 = phi i32 [ %155, %153 ], [ %2, %.preheader6 ]
0,incoming:   %155 = add nsw i32 %.112, -1
edge not in execflag!!
1,incoming: i32 %2
MMMMMMMMMMnewtype = 0
no constant
!!!!! changed, added here
visit phi inst:   %.010 = phi i32 [ %154, %153 ], [ 1, %.preheader6 ]
0,incoming:   %154 = mul nsw i32 %.010, %18
edge not in execflag!!
1,incoming: i32 1
edge not in execflag!!
visiting inst:   %14 = icmp sge i32 %.112, 1
NONONONO NONOMONO return bottom
visiting inst:   br i1 %14, label %15, label %156
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %14, label %15, label %156
ffffffflowwl succ pushed:   %16 = sext i32 %.112 to i64
ffffffflowwl inst pushed:   br i1 %14, label %15, label %156
ffffffflowwl succ pushed:   ret void
visiting inst:   ret void
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret void
ffffffflowwl succ pushed: null!
visiting inst:   %16 = sext i32 %.112 to i64
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds i32, ptr %1, i64 %16
NONONONO NONOMONO return bottom
visiting inst:   %18 = load i32, ptr %17, align 4
NONONONO NONOMONO return bottom
visiting inst:   %19 = mul nsw i32 %18, %.010
opInstr2:   %.010 = phi i32 [ %154, %153 ], [ 1, %.preheader6 ]
NONONONO NONOMONO return bottom
visiting inst:   %20 = sdiv i32 %.09, %19
opInstr1:   %.09 = phi i32 [ 1, %4 ], [ %11, %7 ]
NONONONO NONOMONO return bottom
visiting inst:   %21 = shl i32 %.010, 1
opInstr1:   %.010 = phi i32 [ %154, %153 ], [ 1, %.preheader6 ]
NONONONO NONOMONO return bottom
visiting inst:   %22 = mul nsw i32 %21, %18
NONONONO NONOMONO return bottom
visiting inst:   %23 = mul nsw i32 %22, %20
NONONONO NONOMONO return bottom
visiting inst:   br label %24
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %24
ffffffflowwl succ pushed:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
visit phi inst:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %73 = add nsw i32 %.18, %.013
edge not in execflag!!
visit phi inst:   %.03 = phi i32 [ 1, %15 ], [ %74, %72 ]
0,incoming: i32 1
edge not in execflag!!
1,incoming:   %74 = add nsw i32 %.03, %21
edge not in execflag!!
visiting inst:   %25 = icmp sle i32 %.03, %22
NONONONO NONOMONO return bottom
visiting inst:   br i1 %25, label %26, label %.preheader5
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %25, label %26, label %.preheader5
ffffffflowwl succ pushed:   br label %75
ffffffflowwl inst pushed:   br i1 %25, label %26, label %.preheader5
ffffffflowwl succ pushed:   %27 = icmp slt i32 %.03, %.07
visiting inst:   %27 = icmp slt i32 %.03, %.07
NONONONO NONOMONO return bottom
visiting inst:   br i1 %27, label %.preheader3, label %64
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %27, label %.preheader3, label %64
ffffffflowwl succ pushed:   br label %28
ffffffflowwl inst pushed:   br i1 %27, label %.preheader3, label %64
ffffffflowwl succ pushed:   %65 = ashr i32 %22, 1
visiting inst:   %65 = ashr i32 %22, 1
NONONONO NONOMONO return bottom
visiting inst:   br label %66
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %66
ffffffflowwl succ pushed:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
visit phi inst:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
0,incoming:   %65 = ashr i32 %22, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming:   %71 = ashr i32 %.013, 1
edge not in execflag!!
visit phi inst:   %.18 = phi i32 [ %.07, %64 ], [ %70, %69 ]
0,incoming:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
edge not in execflag!!
1,incoming:   %70 = sub nsw i32 %.18, %.013
edge not in execflag!!
visiting inst:   %67 = icmp sge i32 %.013, %21
NONONONO NONOMONO return bottom
visiting inst:   %68 = icmp sgt i32 %.18, %.013
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %67, i1 %68, i1 false
NONONONO NONOMONO return bottom
visiting inst:   br i1 %spec.select, label %69, label %72
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %spec.select, label %69, label %72
ffffffflowwl succ pushed:   %70 = sub nsw i32 %.18, %.013
ffffffflowwl inst pushed:   br i1 %spec.select, label %69, label %72
ffffffflowwl succ pushed:   %73 = add nsw i32 %.18, %.013
visiting inst:   %73 = add nsw i32 %.18, %.013
opInstr1:   %.18 = phi i32 [ %.07, %64 ], [ %70, %69 ]
opInstr2:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %74 = add nsw i32 %.03, %21
opInstr1:   %.03 = phi i32 [ 1, %15 ], [ %74, %72 ]
NONONONO NONOMONO return bottom
visiting inst:   br label %24, !llvm.loop !11
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %24, !llvm.loop !11
ffffffflowwl succ pushed:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
visit phi inst:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %73 = add nsw i32 %.18, %.013
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   %70 = sub nsw i32 %.18, %.013
opInstr1:   %.18 = phi i32 [ %.07, %64 ], [ %70, %69 ]
opInstr2:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %71 = ashr i32 %.013, 1
opInstr1:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %66, !llvm.loop !10
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %66, !llvm.loop !10
ffffffflowwl succ pushed:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
visit phi inst:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
0,incoming:   %65 = ashr i32 %22, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %71 = ashr i32 %.013, 1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br label %28
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %28
ffffffflowwl succ pushed:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
visit phi inst:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
0,incoming:   %63 = add nsw i32 %.02, 2
edge not in execflag!!
1,incoming:   %.03 = phi i32 [ 1, %15 ], [ %74, %72 ]
MMMMMMMMMMnewtype = 0
no constant
!!!!! changed, added here
visiting inst:   %29 = add nsw i32 %.03, %21
opInstr1:   %.03 = phi i32 [ 1, %15 ], [ %74, %72 ]
NONONONO NONOMONO return bottom
visiting inst:   %30 = sub nsw i32 %29, 2
NONONONO NONOMONO return bottom
visiting inst:   %31 = icmp sle i32 %.02, %30
NONONONO NONOMONO return bottom
visiting inst:   br i1 %31, label %.preheader2, label %.loopexit4
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %31, label %.preheader2, label %.loopexit4
ffffffflowwl succ pushed:   br label %32
ffffffflowwl inst pushed:   br i1 %31, label %.preheader2, label %.loopexit4
ffffffflowwl succ pushed:   br label %64
visiting inst:   br label %64
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %64
ffffffflowwl succ pushed:   %65 = ashr i32 %22, 1
visiting inst:   br label %32
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %32
ffffffflowwl succ pushed:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
visit phi inst:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
0,incoming:   %61 = add nsw i32 %.05, %22
edge not in execflag!!
1,incoming:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
MMMMMMMMMMnewtype = 0
no constant
!!!!! changed, added here
visiting inst:   %33 = icmp sle i32 %.05, %23
NONONONO NONOMONO return bottom
visiting inst:   br i1 %33, label %34, label %62
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %33, label %34, label %62
ffffffflowwl succ pushed:   %35 = add nsw i32 %.07, %.05
ffffffflowwl inst pushed:   br i1 %33, label %34, label %62
ffffffflowwl succ pushed:   %63 = add nsw i32 %.02, 2
visiting inst:   %63 = add nsw i32 %.02, 2
opInstr1:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %28, !llvm.loop !9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %28, !llvm.loop !9
ffffffflowwl succ pushed:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
visit phi inst:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
0,incoming:   %63 = add nsw i32 %.02, 2
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming:   %.03 = phi i32 [ 1, %15 ], [ %74, %72 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %35 = add nsw i32 %.07, %.05
opInstr1:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %36 = sub nsw i32 %35, %.03
opInstr2:   %.03 = phi i32 [ 1, %15 ], [ %74, %72 ]
NONONONO NONOMONO return bottom
visiting inst:   %37 = sext i32 %.05 to i64
NONONONO NONOMONO return bottom
visiting inst:   %38 = getelementptr inbounds double, ptr %0, i64 %37
NONONONO NONOMONO return bottom
visiting inst:   %39 = load double, ptr %38, align 8
NONONONO NONOMONO return bottom
visiting inst:   %40 = sext i32 %36 to i64
NONONONO NONOMONO return bottom
visiting inst:   %41 = getelementptr inbounds double, ptr %0, i64 %40
NONONONO NONOMONO return bottom
visiting inst:   %42 = load double, ptr %41, align 8
NONONONO NONOMONO return bottom
visiting inst:   %43 = sext i32 %.05 to i64
NONONONO NONOMONO return bottom
visiting inst:   %44 = getelementptr inbounds double, ptr %0, i64 %43
NONONONO NONOMONO return bottom
visiting inst:   store double %42, ptr %44, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %42, ptr %44, align 8
ffffffflowwl succ pushed:   %45 = sext i32 %36 to i64
visiting inst:   %45 = sext i32 %36 to i64
NONONONO NONOMONO return bottom
visiting inst:   %46 = getelementptr inbounds double, ptr %0, i64 %45
NONONONO NONOMONO return bottom
visiting inst:   store double %39, ptr %46, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %39, ptr %46, align 8
ffffffflowwl succ pushed:   %47 = add nsw i32 %.05, 1
visiting inst:   %47 = add nsw i32 %.05, 1
opInstr1:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %48 = sext i32 %47 to i64
NONONONO NONOMONO return bottom
visiting inst:   %49 = getelementptr inbounds double, ptr %0, i64 %48
NONONONO NONOMONO return bottom
visiting inst:   %50 = load double, ptr %49, align 8
NONONONO NONOMONO return bottom
visiting inst:   %51 = add nsw i32 %36, 1
NONONONO NONOMONO return bottom
visiting inst:   %52 = sext i32 %51 to i64
NONONONO NONOMONO return bottom
visiting inst:   %53 = getelementptr inbounds double, ptr %0, i64 %52
NONONONO NONOMONO return bottom
visiting inst:   %54 = load double, ptr %53, align 8
NONONONO NONOMONO return bottom
visiting inst:   %55 = add nsw i32 %.05, 1
opInstr1:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %56 = sext i32 %55 to i64
NONONONO NONOMONO return bottom
visiting inst:   %57 = getelementptr inbounds double, ptr %0, i64 %56
NONONONO NONOMONO return bottom
visiting inst:   store double %54, ptr %57, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %54, ptr %57, align 8
ffffffflowwl succ pushed:   %58 = add nsw i32 %36, 1
visiting inst:   %58 = add nsw i32 %36, 1
NONONONO NONOMONO return bottom
visiting inst:   %59 = sext i32 %58 to i64
NONONONO NONOMONO return bottom
visiting inst:   %60 = getelementptr inbounds double, ptr %0, i64 %59
NONONONO NONOMONO return bottom
visiting inst:   store double %50, ptr %60, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %50, ptr %60, align 8
ffffffflowwl succ pushed:   %61 = add nsw i32 %.05, %22
visiting inst:   %61 = add nsw i32 %.05, %22
opInstr1:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %32, !llvm.loop !8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %32, !llvm.loop !8
ffffffflowwl succ pushed:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
visit phi inst:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
0,incoming:   %61 = add nsw i32 %.05, %22
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br label %75
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %75
ffffffflowwl succ pushed:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
visit phi inst:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
0,incoming:   %78 = shl i32 %.014, 1
edge not in execflag!!
1,incoming:   %21 = shl i32 %.010, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %76 = icmp slt i32 %.014, %22
NONONONO NONOMONO return bottom
visiting inst:   br i1 %76, label %77, label %153
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %76, label %77, label %153
ffffffflowwl succ pushed:   %78 = shl i32 %.014, 1
ffffffflowwl inst pushed:   br i1 %76, label %77, label %153
ffffffflowwl succ pushed:   %154 = mul nsw i32 %.010, %18
visiting inst:   %154 = mul nsw i32 %.010, %18
opInstr1:   %.010 = phi i32 [ %154, %153 ], [ 1, %.preheader6 ]
NONONONO NONOMONO return bottom
visiting inst:   %155 = add nsw i32 %.112, -1
opInstr1:   %.112 = phi i32 [ %155, %153 ], [ %2, %.preheader6 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %13, !llvm.loop !16
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %13, !llvm.loop !16
ffffffflowwl succ pushed:   %.112 = phi i32 [ %155, %153 ], [ %2, %.preheader6 ]
visit phi inst:   %.112 = phi i32 [ %155, %153 ], [ %2, %.preheader6 ]
0,incoming:   %155 = add nsw i32 %.112, -1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 %2
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %78 = shl i32 %.014, 1
opInstr1:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %79 = sitofp i32 %3 to double
NONONONO NONOMONO return bottom
visiting inst:   %80 = fmul double %79, 0x401921FB54442D1C
NONONONO NONOMONO return bottom
visiting inst:   %81 = sdiv i32 %78, %21
NONONONO NONOMONO return bottom
visiting inst:   %82 = sitofp i32 %81 to double
NONONONO NONOMONO return bottom
visiting inst:   %83 = fdiv double %80, %82
NONONONO NONOMONO return bottom
visiting inst:   %84 = fmul double 5.000000e-01, %83
NONONONO NONOMONO return bottom
visiting inst:   %85 = call double @sin(double noundef %84) #7
NONONONO NONOMONO return bottom
visiting inst:   %86 = fmul double -2.000000e+00, %85
NONONONO NONOMONO return bottom
visiting inst:   %87 = fmul double %86, %85
NONONONO NONOMONO return bottom
visiting inst:   %88 = call double @sin(double noundef %83) #7
NONONONO NONOMONO return bottom
visiting inst:   br label %89
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %89
ffffffflowwl succ pushed:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
visit phi inst:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %152 = add nsw i32 %.16, %21
edge not in execflag!!
visit phi inst:   %.01 = phi double [ 0.000000e+00, %77 ], [ %151, %144 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %151 = fadd double %150, %.01
edge not in execflag!!
visit phi inst:   %.0 = phi double [ 1.000000e+00, %77 ], [ %148, %144 ]
0,incoming: double 1.000000e+00
edge not in execflag!!
1,incoming:   %148 = fadd double %147, %.0
edge not in execflag!!
visiting inst:   %90 = icmp sle i32 %.16, %.014
NONONONO NONOMONO return bottom
visiting inst:   br i1 %90, label %.preheader1, label %.loopexit
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %90, label %.preheader1, label %.loopexit
ffffffflowwl succ pushed:   br label %91
ffffffflowwl inst pushed:   br i1 %90, label %.preheader1, label %.loopexit
ffffffflowwl succ pushed:   br label %75, !llvm.loop !12
visiting inst:   br label %75, !llvm.loop !12
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %75, !llvm.loop !12
ffffffflowwl succ pushed:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
visit phi inst:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
0,incoming:   %78 = shl i32 %.014, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %21 = shl i32 %.010, 1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br label %91
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %91
ffffffflowwl succ pushed:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
visit phi inst:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
0,incoming:   %143 = add nsw i32 %.1, 2
edge not in execflag!!
1,incoming:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %92 = add nsw i32 %.16, %21
opInstr1:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
const phi 1 found to be a const!!
NONONONO NONOMONO return bottom
visiting inst:   %93 = sub nsw i32 %92, 2
NONONONO NONOMONO return bottom
visiting inst:   %94 = icmp sle i32 %.1, %93
NONONONO NONOMONO return bottom
visiting inst:   br i1 %94, label %.preheader, label %144
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %94, label %.preheader, label %144
ffffffflowwl succ pushed:   br label %95
ffffffflowwl inst pushed:   br i1 %94, label %.preheader, label %144
ffffffflowwl succ pushed:   %145 = fmul double %.01, %88
visiting inst:   %145 = fmul double %.01, %88
opInstr1:   %.01 = phi double [ 0.000000e+00, %77 ], [ %151, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %146 = fneg double %145
NONONONO NONOMONO return bottom
visiting inst:   %147 = call double @llvm.fmuladd.f64(double %.0, double %87, double %146)
NONONONO NONOMONO return bottom
visiting inst:   %148 = fadd double %147, %.0
opInstr2:   %.0 = phi double [ 1.000000e+00, %77 ], [ %148, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %149 = fmul double %.0, %88
opInstr1:   %.0 = phi double [ 1.000000e+00, %77 ], [ %148, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %150 = call double @llvm.fmuladd.f64(double %.01, double %87, double %149)
NONONONO NONOMONO return bottom
visiting inst:   %151 = fadd double %150, %.01
opInstr2:   %.01 = phi double [ 0.000000e+00, %77 ], [ %151, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %152 = add nsw i32 %.16, %21
opInstr1:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
const phi 1 found to be a const!!
NONONONO NONOMONO return bottom
visiting inst:   br label %89, !llvm.loop !15
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %89, !llvm.loop !15
ffffffflowwl succ pushed:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
visit phi inst:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %152 = add nsw i32 %.16, %21
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
visiting inst:   br label %95
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %95
ffffffflowwl succ pushed:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
visit phi inst:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
0,incoming:   %141 = add nsw i32 %.14, %78
edge not in execflag!!
1,incoming:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %96 = icmp sle i32 %.14, %23
NONONONO NONOMONO return bottom
visiting inst:   br i1 %96, label %97, label %142
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %96, label %97, label %142
ffffffflowwl succ pushed:   %98 = add nsw i32 %.14, %.014
ffffffflowwl inst pushed:   br i1 %96, label %97, label %142
ffffffflowwl succ pushed:   %143 = add nsw i32 %.1, 2
visiting inst:   %143 = add nsw i32 %.1, 2
opInstr1:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %91, !llvm.loop !14
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %91, !llvm.loop !14
ffffffflowwl succ pushed:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
visit phi inst:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
0,incoming:   %143 = add nsw i32 %.1, 2
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %98 = add nsw i32 %.14, %.014
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %99 = sext i32 %98 to i64
NONONONO NONOMONO return bottom
visiting inst:   %100 = getelementptr inbounds double, ptr %0, i64 %99
NONONONO NONOMONO return bottom
visiting inst:   %101 = load double, ptr %100, align 8
NONONONO NONOMONO return bottom
visiting inst:   %102 = add nsw i32 %98, 1
NONONONO NONOMONO return bottom
visiting inst:   %103 = sext i32 %102 to i64
NONONONO NONOMONO return bottom
visiting inst:   %104 = getelementptr inbounds double, ptr %0, i64 %103
NONONONO NONOMONO return bottom
visiting inst:   %105 = load double, ptr %104, align 8
NONONONO NONOMONO return bottom
visiting inst:   %106 = fmul double %.01, %105
opInstr1:   %.01 = phi double [ 0.000000e+00, %77 ], [ %151, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %107 = fneg double %106
NONONONO NONOMONO return bottom
visiting inst:   %108 = call double @llvm.fmuladd.f64(double %.0, double %101, double %107)
NONONONO NONOMONO return bottom
visiting inst:   %109 = add nsw i32 %98, 1
NONONONO NONOMONO return bottom
visiting inst:   %110 = sext i32 %109 to i64
NONONONO NONOMONO return bottom
visiting inst:   %111 = getelementptr inbounds double, ptr %0, i64 %110
NONONONO NONOMONO return bottom
visiting inst:   %112 = load double, ptr %111, align 8
NONONONO NONOMONO return bottom
visiting inst:   %113 = sext i32 %98 to i64
NONONONO NONOMONO return bottom
visiting inst:   %114 = getelementptr inbounds double, ptr %0, i64 %113
NONONONO NONOMONO return bottom
visiting inst:   %115 = load double, ptr %114, align 8
NONONONO NONOMONO return bottom
visiting inst:   %116 = fmul double %.01, %115
opInstr1:   %.01 = phi double [ 0.000000e+00, %77 ], [ %151, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %117 = call double @llvm.fmuladd.f64(double %.0, double %112, double %116)
NONONONO NONOMONO return bottom
visiting inst:   %118 = sext i32 %.14 to i64
NONONONO NONOMONO return bottom
visiting inst:   %119 = getelementptr inbounds double, ptr %0, i64 %118
NONONONO NONOMONO return bottom
visiting inst:   %120 = load double, ptr %119, align 8
NONONONO NONOMONO return bottom
visiting inst:   %121 = fsub double %120, %108
NONONONO NONOMONO return bottom
visiting inst:   %122 = sext i32 %98 to i64
NONONONO NONOMONO return bottom
visiting inst:   %123 = getelementptr inbounds double, ptr %0, i64 %122
NONONONO NONOMONO return bottom
visiting inst:   store double %121, ptr %123, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %121, ptr %123, align 8
ffffffflowwl succ pushed:   %124 = add nsw i32 %.14, 1
visiting inst:   %124 = add nsw i32 %.14, 1
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %125 = sext i32 %124 to i64
NONONONO NONOMONO return bottom
visiting inst:   %126 = getelementptr inbounds double, ptr %0, i64 %125
NONONONO NONOMONO return bottom
visiting inst:   %127 = load double, ptr %126, align 8
NONONONO NONOMONO return bottom
visiting inst:   %128 = fsub double %127, %117
NONONONO NONOMONO return bottom
visiting inst:   %129 = add nsw i32 %98, 1
NONONONO NONOMONO return bottom
visiting inst:   %130 = sext i32 %129 to i64
NONONONO NONOMONO return bottom
visiting inst:   %131 = getelementptr inbounds double, ptr %0, i64 %130
NONONONO NONOMONO return bottom
visiting inst:   store double %128, ptr %131, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %128, ptr %131, align 8
ffffffflowwl succ pushed:   %132 = sext i32 %.14 to i64
visiting inst:   %132 = sext i32 %.14 to i64
NONONONO NONOMONO return bottom
visiting inst:   %133 = getelementptr inbounds double, ptr %0, i64 %132
NONONONO NONOMONO return bottom
visiting inst:   %134 = load double, ptr %133, align 8
NONONONO NONOMONO return bottom
visiting inst:   %135 = fadd double %134, %108
NONONONO NONOMONO return bottom
visiting inst:   store double %135, ptr %133, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %135, ptr %133, align 8
ffffffflowwl succ pushed:   %136 = add nsw i32 %.14, 1
visiting inst:   %136 = add nsw i32 %.14, 1
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %137 = sext i32 %136 to i64
NONONONO NONOMONO return bottom
visiting inst:   %138 = getelementptr inbounds double, ptr %0, i64 %137
NONONONO NONOMONO return bottom
visiting inst:   %139 = load double, ptr %138, align 8
NONONONO NONOMONO return bottom
visiting inst:   %140 = fadd double %139, %117
NONONONO NONOMONO return bottom
visiting inst:   store double %140, ptr %138, align 8
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   store double %140, ptr %138, align 8
ffffffflowwl succ pushed:   %141 = add nsw i32 %.14, %78
visiting inst:   %141 = add nsw i32 %.14, %78
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br label %95, !llvm.loop !13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %95, !llvm.loop !13
ffffffflowwl succ pushed:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
visit phi inst:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
0,incoming:   %141 = add nsw i32 %.14, %78
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %96 = icmp sle i32 %.14, %23
NONONONO NONOMONO return bottom
visiting inst:   %98 = add nsw i32 %.14, %.014
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %118 = sext i32 %.14 to i64
NONONONO NONOMONO return bottom
visiting inst:   %124 = add nsw i32 %.14, 1
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %132 = sext i32 %.14 to i64
NONONONO NONOMONO return bottom
visiting inst:   %136 = add nsw i32 %.14, 1
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %141 = add nsw i32 %.14, %78
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %96 = icmp sle i32 %.14, %23
NONONONO NONOMONO return bottom
visiting inst:   %98 = add nsw i32 %.14, %.014
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %118 = sext i32 %.14 to i64
NONONONO NONOMONO return bottom
visiting inst:   %124 = add nsw i32 %.14, 1
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %132 = sext i32 %.14 to i64
NONONONO NONOMONO return bottom
visiting inst:   %136 = add nsw i32 %.14, 1
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %141 = add nsw i32 %.14, %78
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
0,incoming:   %141 = add nsw i32 %.14, %78
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   store double %140, ptr %138, align 8
NONONONO NONOMONO return bottom
visiting inst:   %140 = fadd double %139, %117
NONONONO NONOMONO return bottom
visiting inst:   %139 = load double, ptr %138, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %140, ptr %138, align 8
NONONONO NONOMONO return bottom
visiting inst:   %138 = getelementptr inbounds double, ptr %0, i64 %137
NONONONO NONOMONO return bottom
visiting inst:   %137 = sext i32 %136 to i64
NONONONO NONOMONO return bottom
visiting inst:   store double %135, ptr %133, align 8
NONONONO NONOMONO return bottom
visiting inst:   %135 = fadd double %134, %108
NONONONO NONOMONO return bottom
visiting inst:   %134 = load double, ptr %133, align 8
NONONONO NONOMONO return bottom
visiting inst:   store double %135, ptr %133, align 8
NONONONO NONOMONO return bottom
visiting inst:   %133 = getelementptr inbounds double, ptr %0, i64 %132
NONONONO NONOMONO return bottom
visiting inst:   store double %128, ptr %131, align 8
NONONONO NONOMONO return bottom
visiting inst:   %131 = getelementptr inbounds double, ptr %0, i64 %130
NONONONO NONOMONO return bottom
visiting inst:   %130 = sext i32 %129 to i64
NONONONO NONOMONO return bottom
visiting inst:   store double %128, ptr %131, align 8
NONONONO NONOMONO return bottom
visiting inst:   %128 = fsub double %127, %117
NONONONO NONOMONO return bottom
visiting inst:   %127 = load double, ptr %126, align 8
NONONONO NONOMONO return bottom
visiting inst:   %126 = getelementptr inbounds double, ptr %0, i64 %125
NONONONO NONOMONO return bottom
visiting inst:   %125 = sext i32 %124 to i64
NONONONO NONOMONO return bottom
visiting inst:   store double %121, ptr %123, align 8
NONONONO NONOMONO return bottom
visiting inst:   %123 = getelementptr inbounds double, ptr %0, i64 %122
NONONONO NONOMONO return bottom
visiting inst:   store double %121, ptr %123, align 8
NONONONO NONOMONO return bottom
visiting inst:   %121 = fsub double %120, %108
NONONONO NONOMONO return bottom
visiting inst:   %120 = load double, ptr %119, align 8
NONONONO NONOMONO return bottom
visiting inst:   %119 = getelementptr inbounds double, ptr %0, i64 %118
NONONONO NONOMONO return bottom
visiting inst:   %128 = fsub double %127, %117
NONONONO NONOMONO return bottom
visiting inst:   %140 = fadd double %139, %117
NONONONO NONOMONO return bottom
visiting inst:   %117 = call double @llvm.fmuladd.f64(double %.0, double %112, double %116)
NONONONO NONOMONO return bottom
visiting inst:   %116 = fmul double %.01, %115
opInstr1:   %.01 = phi double [ 0.000000e+00, %77 ], [ %151, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %115 = load double, ptr %114, align 8
NONONONO NONOMONO return bottom
visiting inst:   %114 = getelementptr inbounds double, ptr %0, i64 %113
NONONONO NONOMONO return bottom
visiting inst:   %117 = call double @llvm.fmuladd.f64(double %.0, double %112, double %116)
NONONONO NONOMONO return bottom
visiting inst:   %112 = load double, ptr %111, align 8
NONONONO NONOMONO return bottom
visiting inst:   %111 = getelementptr inbounds double, ptr %0, i64 %110
NONONONO NONOMONO return bottom
visiting inst:   %110 = sext i32 %109 to i64
NONONONO NONOMONO return bottom
visiting inst:   %121 = fsub double %120, %108
NONONONO NONOMONO return bottom
visiting inst:   %135 = fadd double %134, %108
NONONONO NONOMONO return bottom
visiting inst:   %108 = call double @llvm.fmuladd.f64(double %.0, double %101, double %107)
NONONONO NONOMONO return bottom
visiting inst:   %107 = fneg double %106
NONONONO NONOMONO return bottom
visiting inst:   %106 = fmul double %.01, %105
opInstr1:   %.01 = phi double [ 0.000000e+00, %77 ], [ %151, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %105 = load double, ptr %104, align 8
NONONONO NONOMONO return bottom
visiting inst:   %104 = getelementptr inbounds double, ptr %0, i64 %103
NONONONO NONOMONO return bottom
visiting inst:   %103 = sext i32 %102 to i64
NONONONO NONOMONO return bottom
visiting inst:   %108 = call double @llvm.fmuladd.f64(double %.0, double %101, double %107)
NONONONO NONOMONO return bottom
visiting inst:   %101 = load double, ptr %100, align 8
NONONONO NONOMONO return bottom
visiting inst:   %100 = getelementptr inbounds double, ptr %0, i64 %99
NONONONO NONOMONO return bottom
visiting inst:   %99 = sext i32 %98 to i64
NONONONO NONOMONO return bottom
visiting inst:   %102 = add nsw i32 %98, 1
NONONONO NONOMONO return bottom
visiting inst:   %109 = add nsw i32 %98, 1
NONONONO NONOMONO return bottom
visiting inst:   %113 = sext i32 %98 to i64
NONONONO NONOMONO return bottom
visiting inst:   %122 = sext i32 %98 to i64
NONONONO NONOMONO return bottom
visiting inst:   %129 = add nsw i32 %98, 1
NONONONO NONOMONO return bottom
visiting inst:   %94 = icmp sle i32 %.1, %93
NONONONO NONOMONO return bottom
visiting inst:   %143 = add nsw i32 %.1, 2
opInstr1:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
0,incoming:   %141 = add nsw i32 %.14, %78
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %94 = icmp sle i32 %.1, %93
NONONONO NONOMONO return bottom
visiting inst:   %143 = add nsw i32 %.1, 2
opInstr1:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
0,incoming:   %141 = add nsw i32 %.14, %78
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
0,incoming:   %143 = add nsw i32 %.1, 2
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br i1 %96, label %97, label %142
NONONONO NONOMONO return bottom
visiting inst:   %96 = icmp sle i32 %.14, %23
NONONONO NONOMONO return bottom
visiting inst:   %98 = add nsw i32 %.14, %.014
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %118 = sext i32 %.14 to i64
NONONONO NONOMONO return bottom
visiting inst:   %124 = add nsw i32 %.14, 1
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %132 = sext i32 %.14 to i64
NONONONO NONOMONO return bottom
visiting inst:   %136 = add nsw i32 %.14, 1
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %141 = add nsw i32 %.14, %78
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %90 = icmp sle i32 %.16, %.014
NONONONO NONOMONO return bottom
visiting inst:   %92 = add nsw i32 %.16, %21
opInstr1:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %152 = add nsw i32 %.16, %21
opInstr1:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
0,incoming:   %143 = add nsw i32 %.1, 2
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %152 = add nsw i32 %.16, %21
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %90 = icmp sle i32 %.16, %.014
NONONONO NONOMONO return bottom
visiting inst:   %92 = add nsw i32 %.16, %21
opInstr1:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %152 = add nsw i32 %.16, %21
opInstr1:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
0,incoming:   %143 = add nsw i32 %.1, 2
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.01 = phi double [ 0.000000e+00, %77 ], [ %151, %144 ]
0,incoming: double 0.000000e+00
edge not in execflag!!
1,incoming:   %151 = fadd double %150, %.01
edge not in execflag!!
visiting inst:   %151 = fadd double %150, %.01
opInstr2:   %.01 = phi double [ 0.000000e+00, %77 ], [ %151, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %150 = call double @llvm.fmuladd.f64(double %.01, double %87, double %149)
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi double [ 1.000000e+00, %77 ], [ %148, %144 ]
0,incoming: double 1.000000e+00
edge not in execflag!!
1,incoming:   %148 = fadd double %147, %.0
edge not in execflag!!
visiting inst:   %148 = fadd double %147, %.0
opInstr2:   %.0 = phi double [ 1.000000e+00, %77 ], [ %148, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %147 = call double @llvm.fmuladd.f64(double %.0, double %87, double %146)
NONONONO NONOMONO return bottom
visiting inst:   %146 = fneg double %145
NONONONO NONOMONO return bottom
visiting inst:   br i1 %94, label %.preheader, label %144
NONONONO NONOMONO return bottom
visiting inst:   %94 = icmp sle i32 %.1, %93
NONONONO NONOMONO return bottom
visiting inst:   %93 = sub nsw i32 %92, 2
NONONONO NONOMONO return bottom
visiting inst:   %94 = icmp sle i32 %.1, %93
NONONONO NONOMONO return bottom
visiting inst:   %143 = add nsw i32 %.1, 2
opInstr1:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
0,incoming:   %141 = add nsw i32 %.14, %78
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br i1 %90, label %.preheader1, label %.loopexit
NONONONO NONOMONO return bottom
visiting inst:   %90 = icmp sle i32 %.16, %.014
NONONONO NONOMONO return bottom
visiting inst:   %92 = add nsw i32 %.16, %21
opInstr1:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %152 = add nsw i32 %.16, %21
opInstr1:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.1 = phi i32 [ %143, %142 ], [ %.16, %.preheader1 ]
0,incoming:   %143 = add nsw i32 %.1, 2
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %145 = fmul double %.01, %88
opInstr1:   %.01 = phi double [ 0.000000e+00, %77 ], [ %151, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %149 = fmul double %.0, %88
opInstr1:   %.0 = phi double [ 1.000000e+00, %77 ], [ %148, %144 ]
NONONONO NONOMONO return bottom
visiting inst:   %147 = call double @llvm.fmuladd.f64(double %.0, double %87, double %146)
NONONONO NONOMONO return bottom
visiting inst:   %150 = call double @llvm.fmuladd.f64(double %.01, double %87, double %149)
NONONONO NONOMONO return bottom
visiting inst:   %87 = fmul double %86, %85
NONONONO NONOMONO return bottom
visiting inst:   %86 = fmul double -2.000000e+00, %85
NONONONO NONOMONO return bottom
visiting inst:   %87 = fmul double %86, %85
NONONONO NONOMONO return bottom
visiting inst:   %85 = call double @sin(double noundef %84) #7
NONONONO NONOMONO return bottom
visiting inst:   %84 = fmul double 5.000000e-01, %83
NONONONO NONOMONO return bottom
visiting inst:   %88 = call double @sin(double noundef %83) #7
NONONONO NONOMONO return bottom
visiting inst:   %83 = fdiv double %80, %82
NONONONO NONOMONO return bottom
visiting inst:   %82 = sitofp i32 %81 to double
NONONONO NONOMONO return bottom
visiting inst:   %83 = fdiv double %80, %82
NONONONO NONOMONO return bottom
visiting inst:   %80 = fmul double %79, 0x401921FB54442D1C
NONONONO NONOMONO return bottom
visiting inst:   %81 = sdiv i32 %78, %21
NONONONO NONOMONO return bottom
visiting inst:   %141 = add nsw i32 %.14, %78
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
0,incoming:   %78 = shl i32 %.014, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %21 = shl i32 %.010, 1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %14 = icmp sge i32 %.112, 1
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.112 to i64
NONONONO NONOMONO return bottom
visiting inst:   %155 = add nsw i32 %.112, -1
opInstr1:   %.112 = phi i32 [ %155, %153 ], [ %2, %.preheader6 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.112 = phi i32 [ %155, %153 ], [ %2, %.preheader6 ]
0,incoming:   %155 = add nsw i32 %.112, -1
MMMMMMMMMMnewtype = 1
no constant
1,incoming: i32 %2
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.010 = phi i32 [ %154, %153 ], [ 1, %.preheader6 ]
0,incoming:   %154 = mul nsw i32 %.010, %18
edge not in execflag!!
1,incoming: i32 1
edge not in execflag!!
visiting inst:   br i1 %76, label %77, label %153
NONONONO NONOMONO return bottom
visiting inst:   %76 = icmp slt i32 %.014, %22
NONONONO NONOMONO return bottom
visiting inst:   %78 = shl i32 %.014, 1
opInstr1:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %90 = icmp sle i32 %.16, %.014
NONONONO NONOMONO return bottom
visiting inst:   %98 = add nsw i32 %.14, %.014
opInstr1:   %.14 = phi i32 [ %141, %97 ], [ %.1, %.preheader ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %33 = icmp sle i32 %.05, %23
NONONONO NONOMONO return bottom
visiting inst:   %35 = add nsw i32 %.07, %.05
opInstr1:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %37 = sext i32 %.05 to i64
NONONONO NONOMONO return bottom
visiting inst:   %43 = sext i32 %.05 to i64
NONONONO NONOMONO return bottom
visiting inst:   %47 = add nsw i32 %.05, 1
opInstr1:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %55 = add nsw i32 %.05, 1
opInstr1:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %61 = add nsw i32 %.05, %22
opInstr1:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
0,incoming:   %61 = add nsw i32 %.05, %22
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   store double %50, ptr %60, align 8
NONONONO NONOMONO return bottom
visiting inst:   %60 = getelementptr inbounds double, ptr %0, i64 %59
NONONONO NONOMONO return bottom
visiting inst:   %59 = sext i32 %58 to i64
NONONONO NONOMONO return bottom
visiting inst:   store double %54, ptr %57, align 8
NONONONO NONOMONO return bottom
visiting inst:   %57 = getelementptr inbounds double, ptr %0, i64 %56
NONONONO NONOMONO return bottom
visiting inst:   %56 = sext i32 %55 to i64
NONONONO NONOMONO return bottom
visiting inst:   store double %54, ptr %57, align 8
NONONONO NONOMONO return bottom
visiting inst:   %54 = load double, ptr %53, align 8
NONONONO NONOMONO return bottom
visiting inst:   %53 = getelementptr inbounds double, ptr %0, i64 %52
NONONONO NONOMONO return bottom
visiting inst:   %52 = sext i32 %51 to i64
NONONONO NONOMONO return bottom
visiting inst:   store double %50, ptr %60, align 8
NONONONO NONOMONO return bottom
visiting inst:   %50 = load double, ptr %49, align 8
NONONONO NONOMONO return bottom
visiting inst:   %49 = getelementptr inbounds double, ptr %0, i64 %48
NONONONO NONOMONO return bottom
visiting inst:   %48 = sext i32 %47 to i64
NONONONO NONOMONO return bottom
visiting inst:   store double %39, ptr %46, align 8
NONONONO NONOMONO return bottom
visiting inst:   %46 = getelementptr inbounds double, ptr %0, i64 %45
NONONONO NONOMONO return bottom
visiting inst:   store double %42, ptr %44, align 8
NONONONO NONOMONO return bottom
visiting inst:   %44 = getelementptr inbounds double, ptr %0, i64 %43
NONONONO NONOMONO return bottom
visiting inst:   store double %42, ptr %44, align 8
NONONONO NONOMONO return bottom
visiting inst:   %42 = load double, ptr %41, align 8
NONONONO NONOMONO return bottom
visiting inst:   %41 = getelementptr inbounds double, ptr %0, i64 %40
NONONONO NONOMONO return bottom
visiting inst:   store double %39, ptr %46, align 8
NONONONO NONOMONO return bottom
visiting inst:   %39 = load double, ptr %38, align 8
NONONONO NONOMONO return bottom
visiting inst:   %38 = getelementptr inbounds double, ptr %0, i64 %37
NONONONO NONOMONO return bottom
visiting inst:   %40 = sext i32 %36 to i64
NONONONO NONOMONO return bottom
visiting inst:   %45 = sext i32 %36 to i64
NONONONO NONOMONO return bottom
visiting inst:   %51 = add nsw i32 %36, 1
NONONONO NONOMONO return bottom
visiting inst:   %58 = add nsw i32 %36, 1
NONONONO NONOMONO return bottom
visiting inst:   %36 = sub nsw i32 %35, %.03
opInstr2:   %.03 = phi i32 [ 1, %15 ], [ %74, %72 ]
NONONONO NONOMONO return bottom
visiting inst:   %31 = icmp sle i32 %.02, %30
NONONONO NONOMONO return bottom
visiting inst:   %63 = add nsw i32 %.02, 2
opInstr1:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
0,incoming:   %61 = add nsw i32 %.05, %22
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
0,incoming:   %63 = add nsw i32 %.02, 2
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.03 = phi i32 [ 1, %15 ], [ %74, %72 ]
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br i1 %33, label %34, label %62
NONONONO NONOMONO return bottom
visiting inst:   %33 = icmp sle i32 %.05, %23
NONONONO NONOMONO return bottom
visiting inst:   %35 = add nsw i32 %.07, %.05
opInstr1:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %37 = sext i32 %.05 to i64
NONONONO NONOMONO return bottom
visiting inst:   %43 = sext i32 %.05 to i64
NONONONO NONOMONO return bottom
visiting inst:   %47 = add nsw i32 %.05, 1
opInstr1:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %55 = add nsw i32 %.05, 1
opInstr1:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %61 = add nsw i32 %.05, %22
opInstr1:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   br i1 %31, label %.preheader2, label %.loopexit4
NONONONO NONOMONO return bottom
visiting inst:   %31 = icmp sle i32 %.02, %30
NONONONO NONOMONO return bottom
visiting inst:   %30 = sub nsw i32 %29, 2
NONONONO NONOMONO return bottom
visiting inst:   %31 = icmp sle i32 %.02, %30
NONONONO NONOMONO return bottom
visiting inst:   %63 = add nsw i32 %.02, 2
opInstr1:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
0,incoming:   %61 = add nsw i32 %.05, %22
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %.02 = phi i32 [ %63, %62 ], [ %.03, %.preheader3 ]
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
0,incoming:   %65 = ashr i32 %22, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %71 = ashr i32 %.013, 1
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.18 = phi i32 [ %.07, %64 ], [ %70, %69 ]
0,incoming:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
edge not in execflag!!
1,incoming:   %70 = sub nsw i32 %.18, %.013
edge not in execflag!!
visiting inst:   %27 = icmp slt i32 %.03, %.07
NONONONO NONOMONO return bottom
visiting inst:   %35 = add nsw i32 %.07, %.05
opInstr1:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.18 = phi i32 [ %.07, %64 ], [ %70, %69 ]
0,incoming:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
edge not in execflag!!
1,incoming:   %70 = sub nsw i32 %.18, %.013
edge not in execflag!!
visit phi inst:   %.03 = phi i32 [ 1, %15 ], [ %74, %72 ]
0,incoming: i32 1
edge not in execflag!!
1,incoming:   %74 = add nsw i32 %.03, %21
edge not in execflag!!
visit phi inst:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %73 = add nsw i32 %.18, %.013
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %27 = icmp slt i32 %.03, %.07
NONONONO NONOMONO return bottom
visiting inst:   %35 = add nsw i32 %.07, %.05
opInstr1:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.18 = phi i32 [ %.07, %64 ], [ %70, %69 ]
0,incoming:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
edge not in execflag!!
1,incoming:   %70 = sub nsw i32 %.18, %.013
edge not in execflag!!
visiting inst:   br i1 %spec.select, label %69, label %72
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %67, i1 %68, i1 false
NONONONO NONOMONO return bottom
visiting inst:   %spec.select = select i1 %67, i1 %68, i1 false
NONONONO NONOMONO return bottom
visiting inst:   %67 = icmp sge i32 %.013, %21
NONONONO NONOMONO return bottom
visiting inst:   %68 = icmp sgt i32 %.18, %.013
NONONONO NONOMONO return bottom
visiting inst:   %70 = sub nsw i32 %.18, %.013
opInstr1:   %.18 = phi i32 [ %.07, %64 ], [ %70, %69 ]
opInstr2:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %71 = ashr i32 %.013, 1
opInstr1:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %73 = add nsw i32 %.18, %.013
opInstr1:   %.18 = phi i32 [ %.07, %64 ], [ %70, %69 ]
opInstr2:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.013 = phi i32 [ %65, %64 ], [ %71, %69 ]
0,incoming:   %65 = ashr i32 %22, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %71 = ashr i32 %.013, 1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   br i1 %27, label %.preheader3, label %64
NONONONO NONOMONO return bottom
visiting inst:   br i1 %25, label %26, label %.preheader5
NONONONO NONOMONO return bottom
visiting inst:   %27 = icmp slt i32 %.03, %.07
NONONONO NONOMONO return bottom
visiting inst:   %35 = add nsw i32 %.07, %.05
opInstr1:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
NNNNNOOOOOOOOOOOOOOOO
opInstr2:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.18 = phi i32 [ %.07, %64 ], [ %70, %69 ]
0,incoming:   %.07 = phi i32 [ 1, %15 ], [ %73, %72 ]
edge not in execflag!!
1,incoming:   %70 = sub nsw i32 %.18, %.013
edge not in execflag!!
visiting inst:   %33 = icmp sle i32 %.05, %23
NONONONO NONOMONO return bottom
visiting inst:   %96 = icmp sle i32 %.14, %23
NONONONO NONOMONO return bottom
visiting inst:   %23 = mul nsw i32 %22, %20
NONONONO NONOMONO return bottom
visiting inst:   %25 = icmp sle i32 %.03, %22
NONONONO NONOMONO return bottom
visiting inst:   %61 = add nsw i32 %.05, %22
opInstr1:   %.05 = phi i32 [ %61, %34 ], [ %.02, %.preheader2 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %65 = ashr i32 %22, 1
NONONONO NONOMONO return bottom
visiting inst:   %76 = icmp slt i32 %.014, %22
NONONONO NONOMONO return bottom
visiting inst:   %22 = mul nsw i32 %21, %18
NONONONO NONOMONO return bottom
visiting inst:   %29 = add nsw i32 %.03, %21
opInstr1:   %.03 = phi i32 [ 1, %15 ], [ %74, %72 ]
NONONONO NONOMONO return bottom
visiting inst:   %67 = icmp sge i32 %.013, %21
NONONONO NONOMONO return bottom
visiting inst:   %74 = add nsw i32 %.03, %21
opInstr1:   %.03 = phi i32 [ 1, %15 ], [ %74, %72 ]
NONONONO NONOMONO return bottom
visiting inst:   %81 = sdiv i32 %78, %21
NONONONO NONOMONO return bottom
visiting inst:   %92 = add nsw i32 %.16, %21
opInstr1:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %152 = add nsw i32 %.16, %21
opInstr1:   %.16 = phi i32 [ 1, %77 ], [ %152, %144 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.014 = phi i32 [ %78, %.loopexit ], [ %21, %.preheader5 ]
0,incoming:   %78 = shl i32 %.014, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %21 = shl i32 %.010, 1
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %23 = mul nsw i32 %22, %20
NONONONO NONOMONO return bottom
visiting inst:   %20 = sdiv i32 %.09, %19
opInstr1:   %.09 = phi i32 [ 1, %4 ], [ %11, %7 ]
NONONONO NONOMONO return bottom
visiting inst:   %19 = mul nsw i32 %18, %.010
opInstr2:   %.010 = phi i32 [ %154, %153 ], [ 1, %.preheader6 ]
NONONONO NONOMONO return bottom
visiting inst:   %22 = mul nsw i32 %21, %18
NONONONO NONOMONO return bottom
visiting inst:   %154 = mul nsw i32 %.010, %18
opInstr1:   %.010 = phi i32 [ %154, %153 ], [ 1, %.preheader6 ]
NONONONO NONOMONO return bottom
visiting inst:   %18 = load i32, ptr %17, align 4
NONONONO NONOMONO return bottom
visiting inst:   %17 = getelementptr inbounds i32, ptr %1, i64 %16
NONONONO NONOMONO return bottom
visiting inst:   br i1 %14, label %15, label %156
NONONONO NONOMONO return bottom
visiting inst:   %14 = icmp sge i32 %.112, 1
NONONONO NONOMONO return bottom
visiting inst:   %16 = sext i32 %.112 to i64
NONONONO NONOMONO return bottom
visiting inst:   %155 = add nsw i32 %.112, -1
opInstr1:   %.112 = phi i32 [ %155, %153 ], [ %2, %.preheader6 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %6 = icmp sle i32 %.011, %2
NONONONO NONOMONO return bottom
visiting inst:   %8 = sext i32 %.011 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.011, 1
opInstr1:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
1,incoming:   %12 = add nsw i32 %.011, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %6 = icmp sle i32 %.011, %2
NONONONO NONOMONO return bottom
visiting inst:   %8 = sext i32 %.011 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.011, 1
opInstr1:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
1,incoming:   %12 = add nsw i32 %.011, 1
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   %6 = icmp sle i32 %.011, %2
NONONONO NONOMONO return bottom
visiting inst:   %8 = sext i32 %.011 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.011, 1
opInstr1:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visiting inst:   %6 = icmp sle i32 %.011, %2
NONONONO NONOMONO return bottom
visiting inst:   %8 = sext i32 %.011 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.011, 1
opInstr1:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom
visit phi inst:   %.09 = phi i32 [ 1, %4 ], [ %11, %7 ]
0,incoming: i32 1
edge not in execflag!!
1,incoming:   %11 = mul nsw i32 %.09, %10
edge not in execflag!!
visiting inst:   %11 = mul nsw i32 %.09, %10
opInstr1:   %.09 = phi i32 [ 1, %4 ], [ %11, %7 ]
NONONONO NONOMONO return bottom
visiting inst:   %10 = load i32, ptr %9, align 4
NONONONO NONOMONO return bottom
visiting inst:   %9 = getelementptr inbounds i32, ptr %1, i64 %8
NONONONO NONOMONO return bottom
visiting inst:   br i1 %6, label %7, label %.preheader6
NONONONO NONOMONO return bottom
visiting inst:   %6 = icmp sle i32 %.011, %2
NONONONO NONOMONO return bottom
visiting inst:   %8 = sext i32 %.011 to i64
NONONONO NONOMONO return bottom
visiting inst:   %12 = add nsw i32 %.011, 1
opInstr1:   %.011 = phi i32 [ 1, %4 ], [ %12, %7 ]
NNNNNOOOOOOOOOOOOOOOO
NONONONO NONOMONO return bottom

Running recursive...
[100%] Built target UnitProject
visiting inst:   %3 = icmp eq i32 %0, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %3, label %4, label %6
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %3, label %4, label %6
ffffffflowwl succ pushed:   %5 = add nsw i32 %1, 1
ffffffflowwl inst pushed:   br i1 %3, label %4, label %6
ffffffflowwl succ pushed:   %7 = sub nsw i32 %0, 1
visiting inst:   %7 = sub nsw i32 %0, 1
NONONONO NONOMONO return bottom
visiting inst:   %8 = or i32 %1, 0
NONONONO NONOMONO return bottom
visiting inst:   %9 = icmp ne i32 %8, 0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %9, label %10, label %13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %9, label %10, label %13
ffffffflowwl succ pushed:   %11 = sub nsw i32 %1, 1
ffffffflowwl inst pushed:   br i1 %9, label %10, label %13
ffffffflowwl succ pushed:   %14 = phi i32 [ %12, %10 ], [ 1, %6 ]
visit phi inst:   %14 = phi i32 [ %12, %10 ], [ 1, %6 ]
0,incoming:   %12 = call i32 @ack(i32 noundef %0, i32 noundef %11)
edge not in execflag!!
1,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
visiting inst:   %15 = call i32 @ack(i32 noundef %7, i32 noundef %14)
NONONONO NONOMONO return bottom
visiting inst:   br label %16
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %16
ffffffflowwl succ pushed:   %.0 = phi i32 [ %5, %4 ], [ %15, %13 ]
visit phi inst:   %.0 = phi i32 [ %5, %4 ], [ %15, %13 ]
0,incoming:   %5 = add nsw i32 %1, 1
edge not in execflag!!
1,incoming:   %15 = call i32 @ack(i32 noundef %7, i32 noundef %14)
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %.0
ffffffflowwl succ pushed: null!
visiting inst:   %11 = sub nsw i32 %1, 1
NONONONO NONOMONO return bottom
visiting inst:   %12 = call i32 @ack(i32 noundef %0, i32 noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   br label %13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %13
ffffffflowwl succ pushed:   %14 = phi i32 [ %12, %10 ], [ 1, %6 ]
visit phi inst:   %14 = phi i32 [ %12, %10 ], [ 1, %6 ]
0,incoming:   %12 = call i32 @ack(i32 noundef %0, i32 noundef %11)
MMMMMMMMMMnewtype = 1
prev constant
!!!!! changed, added here
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
visiting inst:   %5 = add nsw i32 %1, 1
NONONONO NONOMONO return bottom
visiting inst:   br label %16
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %16
ffffffflowwl succ pushed:   %.0 = phi i32 [ %5, %4 ], [ %15, %13 ]
visit phi inst:   %.0 = phi i32 [ %5, %4 ], [ %15, %13 ]
0,incoming:   %5 = add nsw i32 %1, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %15 = call i32 @ack(i32 noundef %7, i32 noundef %14)
MMMMMMMMMMnewtype = 1
no constant
visit phi inst:   %.0 = phi i32 [ %5, %4 ], [ %15, %13 ]
0,incoming:   %5 = add nsw i32 %1, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %15 = call i32 @ack(i32 noundef %7, i32 noundef %14)
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %15 = call i32 @ack(i32 noundef %7, i32 noundef %14)
NONONONO NONOMONO return bottom
visit phi inst:   %14 = phi i32 [ %12, %10 ], [ 1, %6 ]
0,incoming:   %12 = call i32 @ack(i32 noundef %0, i32 noundef %11)
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   %15 = call i32 @ack(i32 noundef %7, i32 noundef %14)
NONONONO NONOMONO return bottom
visiting inst:   %15 = call i32 @ack(i32 noundef %7, i32 noundef %14)
NONONONO NONOMONO return bottom
visiting inst:   %12 = call i32 @ack(i32 noundef %0, i32 noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ %5, %4 ], [ %15, %13 ]
0,incoming:   %5 = add nsw i32 %1, 1
MMMMMMMMMMnewtype = 1
no constant
1,incoming:   %15 = call i32 @ack(i32 noundef %7, i32 noundef %14)
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %15 = call i32 @ack(i32 noundef %7, i32 noundef %14)
NONONONO NONOMONO return bottom
visiting inst:   br i1 %9, label %10, label %13
NONONONO NONOMONO return bottom
visiting inst:   %9 = icmp ne i32 %8, 0
NONONONO NONOMONO return bottom
visiting inst:   %15 = call i32 @ack(i32 noundef %7, i32 noundef %14)
NONONONO NONOMONO return bottom
visiting inst:   br i1 %3, label %4, label %6
NONONONO NONOMONO return bottom
visiting inst:   %2 = icmp slt i32 %0, 2
NONONONO NONOMONO return bottom
visiting inst:   br i1 %2, label %9, label %3
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %2, label %9, label %3
ffffffflowwl succ pushed:   %.0 = phi i32 [ %8, %3 ], [ 1, %1 ]
ffffffflowwl inst pushed:   br i1 %2, label %9, label %3
ffffffflowwl succ pushed:   %4 = sub nsw i32 %0, 2
visiting inst:   %4 = sub nsw i32 %0, 2
NONONONO NONOMONO return bottom
visiting inst:   %5 = call i32 @fib(i32 noundef %4)
NONONONO NONOMONO return bottom
visiting inst:   %6 = sub nsw i32 %0, 1
NONONONO NONOMONO return bottom
visiting inst:   %7 = call i32 @fib(i32 noundef %6)
NONONONO NONOMONO return bottom
visiting inst:   %8 = add nsw i32 %5, %7
NONONONO NONOMONO return bottom
visiting inst:   br label %9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %9
ffffffflowwl succ pushed:   %.0 = phi i32 [ %8, %3 ], [ 1, %1 ]
visit phi inst:   %.0 = phi i32 [ %8, %3 ], [ 1, %1 ]
0,incoming:   %8 = add nsw i32 %5, %7
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 1
edge not in execflag!!
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %.0
ffffffflowwl succ pushed: null!
visit phi inst:   %.0 = phi i32 [ %8, %3 ], [ 1, %1 ]
0,incoming:   %8 = add nsw i32 %5, %7
MMMMMMMMMMnewtype = 1
no constant
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ %8, %3 ], [ 1, %1 ]
0,incoming:   %8 = add nsw i32 %5, %7
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 1
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
visiting inst:   %8 = add nsw i32 %5, %7
NONONONO NONOMONO return bottom
visiting inst:   %7 = call i32 @fib(i32 noundef %6)
NONONONO NONOMONO return bottom
visiting inst:   %8 = add nsw i32 %5, %7
NONONONO NONOMONO return bottom
visiting inst:   %5 = call i32 @fib(i32 noundef %4)
NONONONO NONOMONO return bottom
visiting inst:   br i1 %2, label %9, label %3
NONONONO NONOMONO return bottom
visiting inst:   %2 = fcmp olt double %0, 2.000000e+00
NONONONO NONOMONO return bottom
visiting inst:   br i1 %2, label %9, label %3
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %2, label %9, label %3
ffffffflowwl succ pushed:   %.0 = phi double [ %8, %3 ], [ 1.000000e+00, %1 ]
ffffffflowwl inst pushed:   br i1 %2, label %9, label %3
ffffffflowwl succ pushed:   %4 = fsub double %0, 2.000000e+00
visiting inst:   %4 = fsub double %0, 2.000000e+00
NONONONO NONOMONO return bottom
visiting inst:   %5 = call double @fibFP(double noundef %4)
NONONONO NONOMONO return bottom
visiting inst:   %6 = fsub double %0, 1.000000e+00
NONONONO NONOMONO return bottom
visiting inst:   %7 = call double @fibFP(double noundef %6)
NONONONO NONOMONO return bottom
visiting inst:   %8 = fadd double %5, %7
NONONONO NONOMONO return bottom
visiting inst:   br label %9
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %9
ffffffflowwl succ pushed:   %.0 = phi double [ %8, %3 ], [ 1.000000e+00, %1 ]
visit phi inst:   %.0 = phi double [ %8, %3 ], [ 1.000000e+00, %1 ]
0,incoming:   %8 = fadd double %5, %7
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: double 1.000000e+00
edge not in execflag!!
visiting inst:   ret double %.0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret double %.0
ffffffflowwl succ pushed: null!
visit phi inst:   %.0 = phi double [ %8, %3 ], [ 1.000000e+00, %1 ]
0,incoming:   %8 = fadd double %5, %7
MMMMMMMMMMnewtype = 1
no constant
1,incoming: double 1.000000e+00
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   ret double %.0
NONONONO NONOMONO return bottom
visiting inst:   ret double %.0
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi double [ %8, %3 ], [ 1.000000e+00, %1 ]
0,incoming:   %8 = fadd double %5, %7
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: double 1.000000e+00
MMMMMMMMMMnewtype = 1
incoming constant
!!!!! changed, added here
visiting inst:   ret double %.0
NONONONO NONOMONO return bottom
visiting inst:   ret double %.0
NONONONO NONOMONO return bottom
visiting inst:   %8 = fadd double %5, %7
NONONONO NONOMONO return bottom
visiting inst:   %7 = call double @fibFP(double noundef %6)
NONONONO NONOMONO return bottom
visiting inst:   %8 = fadd double %5, %7
NONONONO NONOMONO return bottom
visiting inst:   %5 = call double @fibFP(double noundef %4)
NONONONO NONOMONO return bottom
visiting inst:   br i1 %2, label %9, label %3
NONONONO NONOMONO return bottom
visiting inst:   %4 = icmp slt i32 %1, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %4, label %5, label %13
ffffffflowwl succ pushed:   %6 = sub nsw i32 %0, 1
ffffffflowwl inst pushed:   br i1 %4, label %5, label %13
ffffffflowwl succ pushed:   %.0 = phi i32 [ %12, %5 ], [ %2, %3 ]
visit phi inst:   %.0 = phi i32 [ %12, %5 ], [ %2, %3 ]
0,incoming:   %12 = call i32 @tak(i32 noundef %7, i32 noundef %9, i32 noundef %11)
edge not in execflag!!
1,incoming: i32 %2
MMMMMMMMMMnewtype = 0
no constant
!!!!! changed, added here
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %.0
ffffffflowwl succ pushed: null!
visiting inst:   %6 = sub nsw i32 %0, 1
NONONONO NONOMONO return bottom
visiting inst:   %7 = call i32 @tak(i32 noundef %6, i32 noundef %1, i32 noundef %2)
NONONONO NONOMONO return bottom
visiting inst:   %8 = sub nsw i32 %1, 1
NONONONO NONOMONO return bottom
visiting inst:   %9 = call i32 @tak(i32 noundef %8, i32 noundef %2, i32 noundef %0)
NONONONO NONOMONO return bottom
visiting inst:   %10 = sub nsw i32 %2, 1
NONONONO NONOMONO return bottom
visiting inst:   %11 = call i32 @tak(i32 noundef %10, i32 noundef %0, i32 noundef %1)
NONONONO NONOMONO return bottom
visiting inst:   %12 = call i32 @tak(i32 noundef %7, i32 noundef %9, i32 noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   br label %13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %13
ffffffflowwl succ pushed:   %.0 = phi i32 [ %12, %5 ], [ %2, %3 ]
visit phi inst:   %.0 = phi i32 [ %12, %5 ], [ %2, %3 ]
0,incoming:   %12 = call i32 @tak(i32 noundef %7, i32 noundef %9, i32 noundef %11)
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: i32 %2
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ %12, %5 ], [ %2, %3 ]
0,incoming:   %12 = call i32 @tak(i32 noundef %7, i32 noundef %9, i32 noundef %11)
MMMMMMMMMMnewtype = 1
no constant
1,incoming: i32 %2
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %12 = call i32 @tak(i32 noundef %7, i32 noundef %9, i32 noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   %11 = call i32 @tak(i32 noundef %10, i32 noundef %0, i32 noundef %1)
NONONONO NONOMONO return bottom
visiting inst:   %12 = call i32 @tak(i32 noundef %7, i32 noundef %9, i32 noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   %9 = call i32 @tak(i32 noundef %8, i32 noundef %2, i32 noundef %0)
NONONONO NONOMONO return bottom
visiting inst:   %12 = call i32 @tak(i32 noundef %7, i32 noundef %9, i32 noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   %7 = call i32 @tak(i32 noundef %6, i32 noundef %1, i32 noundef %2)
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %.0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %13
NONONONO NONOMONO return bottom
visiting inst:   %4 = fcmp olt double %1, %0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %4, label %5, label %13
ffffffflowwl succ pushed:   %6 = fsub double %0, 1.000000e+00
ffffffflowwl inst pushed:   br i1 %4, label %5, label %13
ffffffflowwl succ pushed:   %.0 = phi double [ %12, %5 ], [ %2, %3 ]
visit phi inst:   %.0 = phi double [ %12, %5 ], [ %2, %3 ]
0,incoming:   %12 = call double @takFP(double noundef %7, double noundef %9, double noundef %11)
edge not in execflag!!
1,incoming: double %2
MMMMMMMMMMnewtype = 0
no constant
!!!!! changed, added here
visiting inst:   ret double %.0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret double %.0
ffffffflowwl succ pushed: null!
visiting inst:   %6 = fsub double %0, 1.000000e+00
NONONONO NONOMONO return bottom
visiting inst:   %7 = call double @takFP(double noundef %6, double noundef %1, double noundef %2)
NONONONO NONOMONO return bottom
visiting inst:   %8 = fsub double %1, 1.000000e+00
NONONONO NONOMONO return bottom
visiting inst:   %9 = call double @takFP(double noundef %8, double noundef %2, double noundef %0)
NONONONO NONOMONO return bottom
visiting inst:   %10 = fsub double %2, 1.000000e+00
NONONONO NONOMONO return bottom
visiting inst:   %11 = call double @takFP(double noundef %10, double noundef %0, double noundef %1)
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @takFP(double noundef %7, double noundef %9, double noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   br label %13
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %13
ffffffflowwl succ pushed:   %.0 = phi double [ %12, %5 ], [ %2, %3 ]
visit phi inst:   %.0 = phi double [ %12, %5 ], [ %2, %3 ]
0,incoming:   %12 = call double @takFP(double noundef %7, double noundef %9, double noundef %11)
MMMMMMMMMMnewtype = 1
no constant
!!!!! changed, added here
1,incoming: double %2
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   ret double %.0
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi double [ %12, %5 ], [ %2, %3 ]
0,incoming:   %12 = call double @takFP(double noundef %7, double noundef %9, double noundef %11)
MMMMMMMMMMnewtype = 1
no constant
1,incoming: double %2
MMMMMMMMMMnewtype = 1
no constant
visiting inst:   %12 = call double @takFP(double noundef %7, double noundef %9, double noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   %11 = call double @takFP(double noundef %10, double noundef %0, double noundef %1)
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @takFP(double noundef %7, double noundef %9, double noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   %9 = call double @takFP(double noundef %8, double noundef %2, double noundef %0)
NONONONO NONOMONO return bottom
visiting inst:   %12 = call double @takFP(double noundef %7, double noundef %9, double noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   %7 = call double @takFP(double noundef %6, double noundef %1, double noundef %2)
NONONONO NONOMONO return bottom
visiting inst:   ret double %.0
NONONONO NONOMONO return bottom
visiting inst:   br i1 %4, label %5, label %13
NONONONO NONOMONO return bottom
visiting inst:   %3 = add nsw i32 10, 1
binaryOp const!!
visiting inst:   %4 = add nsw i32 10, 1
binaryOp const!!
visiting inst:   %5 = call i32 @ack(i32 noundef 3, i32 noundef %4)
NONONONO NONOMONO return bottom
visiting inst:   %6 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %3, i32 noundef %5)
NONONONO NONOMONO return bottom
visiting inst:   %7 = sitofp i32 10 to double
NONONONO NONOMONO return bottom
visiting inst:   %8 = fadd double 2.800000e+01, %7
NONONONO NONOMONO return bottom
visiting inst:   %9 = sitofp i32 10 to double
NONONONO NONOMONO return bottom
visiting inst:   %10 = fadd double 2.800000e+01, %9
NONONONO NONOMONO return bottom
visiting inst:   %11 = call double @fibFP(double noundef %10)
NONONONO NONOMONO return bottom
visiting inst:   %12 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8, double noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   %13 = mul nsw i32 3, 10
binaryOp const!!
visiting inst:   %14 = mul nsw i32 2, 10
binaryOp const!!
visiting inst:   %15 = mul nsw i32 3, 10
binaryOp const!!
visiting inst:   %16 = mul nsw i32 2, 10
binaryOp const!!
visiting inst:   %17 = call i32 @tak(i32 noundef %15, i32 noundef %16, i32 noundef 10)
NONONONO NONOMONO return bottom
visiting inst:   %18 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13, i32 noundef %14, i32 noundef 10, i32 noundef %17)
NONONONO NONOMONO return bottom
visiting inst:   %19 = call i32 @fib(i32 noundef 3)
NONONONO NONOMONO return bottom
visiting inst:   %20 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i32 noundef %19)
NONONONO NONOMONO return bottom
visiting inst:   %21 = call double @takFP(double noundef 3.000000e+00, double noundef 2.000000e+00, double noundef 1.000000e+00)
NONONONO NONOMONO return bottom
visiting inst:   %22 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, double noundef %21)
NONONONO NONOMONO return bottom
visiting inst:   ret i32 0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 0
ffffffflowwl succ pushed: null!
visiting inst:   %22 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, double noundef %21)
NONONONO NONOMONO return bottom
visiting inst:   %20 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i32 noundef %19)
NONONONO NONOMONO return bottom
visiting inst:   %18 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13, i32 noundef %14, i32 noundef 10, i32 noundef %17)
NONONONO NONOMONO return bottom
visiting inst:   %17 = call i32 @tak(i32 noundef %15, i32 noundef %16, i32 noundef 10)
NONONONO NONOMONO return bottom
visiting inst:   %17 = call i32 @tak(i32 noundef %15, i32 noundef %16, i32 noundef 10)
NONONONO NONOMONO return bottom
visiting inst:   %18 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13, i32 noundef %14, i32 noundef 10, i32 noundef %17)
NONONONO NONOMONO return bottom
visiting inst:   %18 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13, i32 noundef %14, i32 noundef 10, i32 noundef %17)
NONONONO NONOMONO return bottom
visiting inst:   %12 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8, double noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   %11 = call double @fibFP(double noundef %10)
NONONONO NONOMONO return bottom
visiting inst:   %10 = fadd double 2.800000e+01, %9
NONONONO NONOMONO return bottom
visiting inst:   %12 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, double noundef %8, double noundef %11)
NONONONO NONOMONO return bottom
visiting inst:   %8 = fadd double 2.800000e+01, %7
NONONONO NONOMONO return bottom
visiting inst:   %6 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %3, i32 noundef %5)
NONONONO NONOMONO return bottom
visiting inst:   %5 = call i32 @ack(i32 noundef 3, i32 noundef %4)
NONONONO NONOMONO return bottom
visiting inst:   %6 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %3, i32 noundef %5)
NONONONO NONOMONO return bottom
in replacing, inst   %3 = add nsw i32 10, 1 is const and replaced
in replacing, inst   %4 = add nsw i32 10, 1 is const and replaced
in replacing, inst   %13 = mul nsw i32 3, 10 is const and replaced
in replacing, inst   %14 = mul nsw i32 2, 10 is const and replaced
in replacing, inst   %15 = mul nsw i32 3, 10 is const and replaced
in replacing, inst   %16 = mul nsw i32 2, 10 is const and replaced

Running one-iter...
[100%] Built target UnitProject
visiting inst:   br label %2
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br label %2
ffffffflowwl succ pushed:   %.0 = phi i32 [ 1, %1 ], [ %spec.select, %2 ]
visit phi inst:   %.0 = phi i32 [ 1, %1 ], [ %spec.select, %2 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
incoming constant
!!!!! changed, added here
1,incoming:   %spec.select = select i1 %9, i32 %3, i32 %8
edge not in execflag!!
visiting inst:   %3 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 1, %1 ], [ %spec.select, %2 ]
const phi 1 found to be a const!!
binaryOp const!!
visiting inst:   %4 = call i32 @rand() #2
NONONONO NONOMONO return bottom
visiting inst:   %5 = srem i32 %4, 4
NONONONO NONOMONO return bottom
visiting inst:   %6 = add nsw i32 1, %3
not in latcell, latcell:
5
  %3 = add nsw i32 %.0, 1, type: 2, name = , v = i32 2
  %5 = srem i32 %4, 4, type: 1, name = , v =   %5 = srem i32 %4, 4
  br label %2, type: 1, name = , v =   br label %2
  %.0 = phi i32 [ 1, %1 ], [ %spec.select, %2 ], type: 2, name = .0, v = i32 1
  %4 = call i32 @rand() #2, type: 1, name = , v =   %4 = call i32 @rand() #2
binaryOp const!!
visiting inst:   %7 = sub nsw i32 %5, %6
not in latcell, latcell:
6
  %3 = add nsw i32 %.0, 1, type: 2, name = , v = i32 2
  %5 = srem i32 %4, 4, type: 1, name = , v =   %5 = srem i32 %4, 4
  %6 = add nsw i32 1, %3, type: 2, name = , v = i32 3
  br label %2, type: 1, name = , v =   br label %2
  %.0 = phi i32 [ 1, %1 ], [ %spec.select, %2 ], type: 2, name = .0, v = i32 1
  %4 = call i32 @rand() #2, type: 1, name = , v =   %4 = call i32 @rand() #2
NONONONO NONOMONO return bottom
visiting inst:   %8 = add nsw i32 %7, %0
NONONONO NONOMONO return bottom
visiting inst:   %9 = icmp sgt i32 %3, 0
icmp const!!
visiting inst:   %spec.select = select i1 %9, i32 %3, i32 %8
really const1 yes????
visiting inst:   %10 = icmp slt i32 %3, 2
icmp const!!
visiting inst:   br i1 %10, label %2, label %11, !llvm.loop !6
branch const!! 0
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   br i1 %10, label %11, label %11, !llvm.loop !6
ffffffflowwl succ pushed:   ret i32 %spec.select
visiting inst:   ret i32 %spec.select
NONONONO NONOMONO return bottom
ffffffflowwl val.type: 1
ffffffflowwl inst pushed:   ret i32 %spec.select
ffffffflowwl succ pushed: null!
visiting inst:   br i1 %10, label %11, label %11, !llvm.loop !6
branch const!! 0
NONONONO NONOMONO return bottom
visiting inst:   ret i32 %spec.select
NONONONO NONOMONO return bottom
visit phi inst:   %.0 = phi i32 [ 1, %1 ], [ %spec.select, %2 ]
0,incoming: i32 1
MMMMMMMMMMnewtype = 2
prev constant
1,incoming:   %spec.select = select i1 %9, i32 %3, i32 %8
edge not in execflag!!
visiting inst:   %spec.select = select i1 %9, i32 %3, i32 %8
really const1 yes????
visiting inst:   %spec.select = select i1 %9, i32 %3, i32 %8
really const1 yes????
visiting inst:   %8 = add nsw i32 %7, %0
NONONONO NONOMONO return bottom
visiting inst:   %7 = sub nsw i32 %5, %6
not in latcell, latcell:
13
  %3 = add nsw i32 %.0, 1, type: 2, name = , v = i32 2
  %5 = srem i32 %4, 4, type: 1, name = , v =   %5 = srem i32 %4, 4
  %6 = add nsw i32 1, %3, type: 2, name = , v = i32 3
  %7 = sub nsw i32 %5, %6, type: 1, name = , v =   %7 = sub nsw i32 %5, %6
  %8 = add nsw i32 %7, %0, type: 1, name = , v =   %8 = add nsw i32 %7, %0
  %spec.select = select i1 %9, i32 %3, i32 %8, type: 2, name = spec.select, v =   %3 = add nsw i32 %.0, 1
  br label %2, type: 1, name = , v =   br label %2
  %.0 = phi i32 [ 1, %1 ], [ %spec.select, %2 ], type: 2, name = .0, v = i32 1
  %4 = call i32 @rand() #2, type: 1, name = , v =   %4 = call i32 @rand() #2
  %9 = icmp sgt i32 %3, 0, type: 2, name = , v = i1 true
  %10 = icmp slt i32 %3, 2, type: 2, name = , v = i1 false
  br i1 %10, label %11, label %11, !llvm.loop !6, type: 1, name = , v =   br i1 %10, label %11, label %11, !llvm.loop !6
  ret i32 %spec.select, type: 1, name = , v =   ret i32 %spec.select
NONONONO NONOMONO return bottom
visiting inst:   %7 = sub nsw i32 %5, %6
not in latcell, latcell:
13
  %3 = add nsw i32 %.0, 1, type: 2, name = , v = i32 2
  %5 = srem i32 %4, 4, type: 1, name = , v =   %5 = srem i32 %4, 4
  %6 = add nsw i32 1, %3, type: 2, name = , v = i32 3
  %7 = sub nsw i32 %5, %6, type: 1, name = , v =   %7 = sub nsw i32 %5, %6
  %8 = add nsw i32 %7, %0, type: 1, name = , v =   %8 = add nsw i32 %7, %0
  %spec.select = select i1 %9, i32 %3, i32 %8, type: 2, name = spec.select, v =   %3 = add nsw i32 %.0, 1
  br label %2, type: 1, name = , v =   br label %2
  %.0 = phi i32 [ 1, %1 ], [ %spec.select, %2 ], type: 2, name = .0, v = i32 1
  %4 = call i32 @rand() #2, type: 1, name = , v =   %4 = call i32 @rand() #2
  %9 = icmp sgt i32 %3, 0, type: 2, name = , v = i1 true
  %10 = icmp slt i32 %3, 2, type: 2, name = , v = i1 false
  br i1 %10, label %11, label %11, !llvm.loop !6, type: 1, name = , v =   br i1 %10, label %11, label %11, !llvm.loop !6
  ret i32 %spec.select, type: 1, name = , v =   ret i32 %spec.select
NONONONO NONOMONO return bottom
visiting inst:   %5 = srem i32 %4, 4
NONONONO NONOMONO return bottom
visiting inst:   %6 = add nsw i32 1, %3
not in latcell, latcell:
13
  %3 = add nsw i32 %.0, 1, type: 2, name = , v = i32 2
  %5 = srem i32 %4, 4, type: 1, name = , v =   %5 = srem i32 %4, 4
  %6 = add nsw i32 1, %3, type: 2, name = , v = i32 3
  %7 = sub nsw i32 %5, %6, type: 1, name = , v =   %7 = sub nsw i32 %5, %6
  %8 = add nsw i32 %7, %0, type: 1, name = , v =   %8 = add nsw i32 %7, %0
  %spec.select = select i1 %9, i32 %3, i32 %8, type: 2, name = spec.select, v =   %3 = add nsw i32 %.0, 1
  br label %2, type: 1, name = , v =   br label %2
  %.0 = phi i32 [ 1, %1 ], [ %spec.select, %2 ], type: 2, name = .0, v = i32 1
  %4 = call i32 @rand() #2, type: 1, name = , v =   %4 = call i32 @rand() #2
  %9 = icmp sgt i32 %3, 0, type: 2, name = , v = i1 true
  %10 = icmp slt i32 %3, 2, type: 2, name = , v = i1 false
  br i1 %10, label %11, label %11, !llvm.loop !6, type: 1, name = , v =   br i1 %10, label %11, label %11, !llvm.loop !6
  ret i32 %spec.select, type: 1, name = , v =   ret i32 %spec.select
binaryOp const!!
visiting inst:   %9 = icmp sgt i32 %3, 0
icmp const!!
visiting inst:   %10 = icmp slt i32 %3, 2
icmp const!!
visiting inst:   %spec.select = select i1 %9, i32 %3, i32 %8
really const1 yes????
visiting inst:   %3 = add nsw i32 %.0, 1
opInstr1:   %.0 = phi i32 [ 1, %1 ], [ %spec.select, %2 ]
const phi 1 found to be a const!!
binaryOp const!!
in replacing, inst   %3 = add nsw i32 %.0, 1 is const and replaced
in replacing, inst   %6 = add nsw i32 1, 2 is const and replaced
in replacing, inst   %spec.select = select i1 %9, i32 2, i32 %8 is const and replaced
in replacing, inst   %.0 = phi i32 [ 1, %1 ], [ %3, %2 ] is const and replaced
in replacing, inst   %9 = icmp sgt i32 2, 0 is const and replaced
in replacing, inst   %10 = icmp slt i32 2, 2 is const and replaced
8,16d7
< almabench
< 20.642158 -25.523861 0.429999
< 1.249416 4.846966 0.725148
< 6.705096 23.070462 0.983362
< 4.298896 21.920988 1.510085
< 12.624735 -2.623410 5.451432
< 13.207531 -4.994690 9.666555
< 1.193477 6.908804 19.971530
< 11.053079 7.100724 30.209035
Some tests failed!!
